{"version":3,"sources":["pages/HomePage.jsx","services/httpService.js","services/userService.js","store/actions/userActions.js","services/utilService.js","services/cloudinaryService.js","pages/LoginSignup.jsx","cmps/BoardPreview.jsx","services/boardService.js","services/socketService.js","store/actions/boardActions.js","cmps/BoardBg.jsx","cmps/BoardAdd.jsx","cmps/BoardList.jsx","pages/Boards.jsx","cmps/AddContent.jsx","cmps/CardPreview.jsx","cmps/Stack.jsx","cmps/CardDescription.jsx","cmps/CardComments.jsx","cmps/DueDate.jsx","cmps/CardChangeLabel.jsx","cmps/LabelsPicker.jsx","cmps/CardMembers.jsx","cmps/CardMove.jsx","cmps/CardTimeEstimation.jsx","cmps/RemoveCard.jsx","cmps/StackMenu.jsx","cmps/CardBgColor.jsx","cmps/ActionContainer.jsx","cmps/CardChecklist.jsx","cmps/CardPreviewActions.jsx","cmps/CardImg.jsx","cmps/CardActivity.jsx","cmps/CardShowTimeEstimation.jsx","pages/CardDetails.jsx","cmps/AddMember.jsx","cmps/BoardBackground.jsx","cmps/BoardStyling.jsx","cmps/BoardActivities.jsx","cmps/RemoveBoard.jsx","cmps/BoardMenu.jsx","cmps/FilterCardsList.jsx","cmps/BoardFilter.jsx","cmps/BoardOptions.jsx","cmps/StatisticsPie.jsx","cmps/StatisticsBar.jsx","cmps/StatisticsInfoBlock.jsx","pages/BoardStatistics.jsx","services/boardDetailsUtils.js","pages/BoardDetails.jsx","pages/UserProfile.jsx","cmps/NavBar.jsx","App.js","serviceWorker.js","store/reducers/userReducer.js","store/reducers/boardReducers.js","store/store.js","history.js","index.js"],"names":["HomePage","className","to","src","alt","axios","Axios","create","withCredentials","endpoint","data","ajax","a","method","url","res","console","log","dir","response","error","login","logout","signup","getById","userId","httpService","query","filterBy","q","board","_id","update","user","userCred","_handleLogin","sessionStorage","clear","setItem","JSON","stringify","userCreds","dispatch","userService","setUser","err","type","makeId","length","id","possible","i","charAt","Math","floor","random","getRandomColor","letters","split","color","uploadImg","ev","UPLOAD_URL","formData","FormData","append","target","files","post","then","catch","LoginSignup","state","username","password","fullname","imgUrl","confirmPassword","isLogin","msg","isUploadImg","isFinishUpload","setCurrPage","props","match","path","setState","onUploadImg","timeoutFinishUpload","setTimeout","prevState","handleChange","field","name","value","handleUserSubmit","preventDefault","bgColor","history","push","onOpenUpload","inputElement","click","this","prevProps","params","clearTimeout","onSubmit","onChange","autoComplete","placeholder","ref","input","hidden","onClick","disabled","Component","mapDispatchToProps","connect","loggedInUser","BoardPreview","style","backgroundColor","bg","backgroundImage","title","save","remove","get","queryStr","prm","socket","setup","io","terminate","on","eventName","cb","off","emit","loadBoard","boardService","socketService","BoardBg","bgs","changeBgColor","map","idx","key","backgroundSize","React","BoardAdd","bgColors","bgImgs","bgBy","onHandleSubmit","members","stacks","createdAt","Date","now","createdBy","activities","addBoard","onClose","stopPropagation","width","required","onChangeBgBy","savedBoard","BoardList","isAddOpen","toggleAddShown","boards","Boards","loadBoards","AddContent","isOpen","addItem","event","undefined","itemTitle","currBoard","unshift","txt","byMember","onStackAdd","parentId","itemId","onCardAdd","toggleOpen","padding","fontSize","minWidth","maxWidth","borderTopLeftRadius","borderTopRightRadius","autoFocus","CardPreview","card","innerRef","provided","labelsOpen","todosStatus","todosCount","checklists","doneTodosCount","forEach","checklist","todos","todo","isDone","getTodosInfo","dueDateClass","dueDate","parse","getDueDateType","showInfo","comments","description","link","draggableProps","dragHandleProps","background","labels","onToggleLabels","label","moment","format","Stack","children","droppableProps","CardDescription","textAreaHeight","textAreaMinHeight","setDescHeight","keyCode","htmlFor","onSaveDesc","onFocus","isShown","onKeyUp","minHeight","height","isSubmitShown","CardComments","myRef","createRef","isFocusComment","current","focus","onAddComment","comment","getTwoChars","fromNow","removeComment","DueDate","date","calendarType","locale","onSubmitDate","onToggleAction","removeDueDate","LabelsPicker","isChangeShown","labelSelected","isLabelChecked","labelId","currCard","find","onEditLabel","addLabel","onChagneLabelColor","toUpperCase","slice","CardMembers","isMemberChecked","memberId","getCurrCard","member","getMembers","searchBy","filter","includes","str","twoChars","addMember","CardMove","selectIsShown","onToggleSelect","stack","cards","moveCardToStack","CardTimeEstimation","timeEstimation","hours","minutes","days","onAddTimeEstimation","removeCardEstimation","ReomveCard","onToggleRemoveCard","onRemoveStack","onRemoveCard","StackMenu","isOpenModalRemove","onStackRemove","stackId","CardBgColor","onChangeBgColor","ActionContainer","action","checkAction","actions","stackInfo","onOutsideClick","display","titleToReturn","move","CardChecklist","newTodo","onEditChecklistTitle","onAddTodo","addTodo","onUpdateTodo","calculateProgBarWidth","countIsDone","toFixed","calculateProgBarBgc","bgc","onRemoveChecklist","onRemoveTodo","CardPreviewActions","CardImg","onRemoveImg","CardActivity","activity","CardShowTimeEstimation","approve","onApproveTimeEstimation","onFocusComment","CardDetails","prevCardDesc","dueDateNotSave","loadCard","cardId","some","onDescShown","isPrevDesc","isDescShown","setPrevDesc","onBackBoard","boardId","onEditTitleFinish","onChangeDate","saveCard","handleCommentChange","currComment","onEditTitle","onAddLabel","currLabel","labelIdx","findIndex","splice","onAddMember","currMember","memberIdx","onAddChecklist","newChecklist","checklistId","currTodo","currChecklist","stackDest","cardIdx","isPublic","onMouseDown","onBlur","changeLabel","getState","AddMember","loadUsers","users","BoardBackground","onSetBg","img","backgroundPosition","BoardStyling","bgChooseShown","setBgShown","BoardActivities","ReomveBoard","onToggleRemoveBoard","onRemoveBoard","BoardMenu","isStylingShown","isRemoveBoardShown","onToggleStyling","removeBoard","onToggleStatistics","toggleShowStatistics","onCloseMenu","isShowingStatistics","FilterCardsList","BoardFilter","onSetFilterBy","clearFilter","filterCards","toLowerCase","concat","BoardOptions","isAddMemberShown","isBoardMenuShown","onToggleAddMember","onToggleBoardMenu","onRemoveMember","StatisticsPie","statsTimeOut","getSliceColor","margin","top","right","bottom","left","innerRadius","padAngle","cornerRadius","colors","borderWidth","borderColor","from","modifiers","radialLabelsSkipAngle","radialLabelsTextXOffset","radialLabelsTextColor","radialLabelsLinkOffset","radialLabelsLinkDiagonalLength","radialLabelsLinkHorizontalLength","radialLabelsLinkStrokeWidth","radialLabelsLinkColor","slicesLabelsSkipAngle","slicesLabelsTextColor","animate","motionStiffness","motionDamping","theme","fontFamily","legends","StatisticsBar","Tasks","keys","indexBy","axisTop","axisRight","axisBottom","tickSize","tickPadding","tickRotation","legend","legendPosition","legendOffset","axisLeft","labelSkipWidth","labelSkipHeight","labelTextColor","dataFrom","anchor","direction","justify","translateX","translateY","itemsSpacing","itemWidth","itemHeight","itemDirection","itemOpacity","symbolSize","effects","axis","text","ticks","StatisticsInfoBlock","info","BoardStatistics","currView","cardCount","boardStats","getStatsByLabels","count","Object","labelTitle","labelInfo","getStatsByUsers","tasks","doneTasks","userInfo","getStatsByDueDates","workload","Delayed","getBoardStats","stats","byLabels","byUsers","byDueDate","isNoCardsBoard","elStats","reorder","list","startIndex","endIndex","result","Array","removed","BoardDetails","areLabelsOpen","stackTitles","stackMenus","populateStacksInfo","setBoard","onEditStackTitle","dataset","onNewStackTitle","getItemStyle","isDragging","draggableStyle","stackIdx","newStackTitle","newCardTitle","onDragEnd","source","destination","newState","droppableId","items","index","stackSourceTitle","stackPlace","sIndex","dIndex","sourceTitle","destTitle","cardMovedTitle","droppableSource","droppableDestination","sourceClone","destClone","onStackTitleFocus","stackTitleFocus","bgUrl","document","body","constructor","component","isCombineEnabled","snapshot","draggableId","data-idx","updateStackTitle","UserProfile","isErrorMsg","onUpdateUser","go","msgStyle","updatedUser","NavBar","isScroll","isMenuOpen","handleScroll","theDocument","documentElement","clientHeight","scrollTop","onLogout","toggleMenu","isGuest","scrollEvent","window","removeEventListener","addEventListener","isHomepage","marginTop","exact","location","pathname","App","guestSignup","Boolean","hostname","localLoggedinUser","initialState","rootReducer","combineReducers","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","createBrowserHistory","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.cc80c28c.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport default function HomePage() {\r\n    return (\r\n        <>\r\n            <section className=\"home-container hero-container\">\r\n                <div className=\"hero-cta flex space-between align-center\">\r\n                    <div className=\"hero-content\">\r\n                        <div className=\"hero-txt\">With wetask - You Can Start Working - With Confidence!</div>\r\n                        <p>\r\n                            Lorem ipsum dolor sit amet consectetur adipisicing elit. Totam dolorem molestias qui? Voluptates provident ratione harum architecto saepe nisi eligendi.\r\n                        </p>\r\n                        <Link to=\"/boards/5ece0b6d695f8047ac641f74\" className=\"hero-btn\">Try now</Link>\r\n                    </div>\r\n                    <img src=\"assets/img/hero-img.svg\" alt=\"\" className=\"hero-img\" />\r\n                </div>\r\n            </section>\r\n\r\n            <section className=\"home-container second-container flex align-center\">\r\n                <img src=\"assets/img/home-second-img.svg\" alt=\"\" className=\"hero-img\" />\r\n                <div className=\"content \">\r\n                    <div className=\"txt-title\">Lorem ipsum dolor sit amet</div>\r\n                    <p>\r\n                        Lorem ipsum dolor sit amet consectetur, adipisicing elit. Rem facilis exercitationemoptio unde beatae quia, sed repellat blanditiis aspernatur consectetur quos placeat magni ipsa dolorem architecto tempora! Debitis beatae blanditiis tempore nesciunt dignissimos eius, minima harum sed, adipisci nihil, placeat fuga quos perspiciatis totam qui incidunt. Consectetur!\r\n                    </p>\r\n                </div>\r\n            </section>\r\n        </>\r\n    )\r\n}\r\n","import Axios from 'axios';\r\n\r\nconst BASE_URL = process.env.NODE_ENV === 'production'\r\n    ? '/api/'\r\n    : '//localhost:3030/api/'\r\n\r\n\r\nvar axios = Axios.create({\r\n    withCredentials: true\r\n});\r\n\r\nexport default {\r\n    get(endpoint, data) {\r\n        return ajax(endpoint, 'GET', data)\r\n    },\r\n    post(endpoint, data) {\r\n        return ajax(endpoint, 'POST', data)\r\n    },\r\n    put(endpoint, data) {\r\n        return ajax(endpoint, 'PUT', data)\r\n    },\r\n    delete(endpoint, data) {\r\n        return ajax(endpoint, 'DELETE', data)\r\n    }\r\n}\r\n\r\n\r\nasync function ajax(endpoint, method = 'get', data = null) {\r\n    try {\r\n        const res = await axios({\r\n            url: `${BASE_URL}${endpoint}`,\r\n            method,\r\n            data\r\n        })\r\n        return res.data;\r\n    } catch (err) {\r\n        console.log(`Had Issues ${method}ing to the backend, endpoint: ${endpoint}, with data: ${data}`);\r\n        console.dir(err);\r\n        throw err.response.data.error;\r\n    }\r\n}","import httpService from './httpService'\r\n\r\nexport default {\r\n    login,\r\n    logout,\r\n    signup,\r\n    getById,\r\n    query,\r\n    update\r\n}\r\n\r\nfunction query(filterBy) {\r\n    if (!filterBy) return httpService.get('users')\r\n    return httpService.get(`users?q=${filterBy.q}&boardId=${filterBy.board._id}`)\r\n}\r\n\r\nasync function login(userCred) {\r\n    try {\r\n        const user = await httpService.post('auth/login', userCred)\r\n        return _handleLogin(user)\r\n    } catch (err) {\r\n        throw err\r\n    }\r\n}\r\n\r\nasync function signup(userCred) {\r\n    const user = await httpService.post('auth/signup', userCred)\r\n    return _handleLogin(user)\r\n}\r\n\r\nasync function logout() {\r\n    await httpService.post('auth/logout');\r\n    sessionStorage.clear();\r\n}\r\n\r\nfunction _handleLogin(user) {\r\n    sessionStorage.setItem('user', JSON.stringify(user))\r\n    return user;\r\n}\r\n\r\nfunction getById(userId) {\r\n    return httpService.get(`user/${userId}`)\r\n}\r\n\r\nfunction update(user) {\r\n    return httpService.put(`users/${user._id}`, user)\r\n}","import userService from '../../services/userService';\r\n\r\nexport function login(userCreds) {\r\n    try {\r\n        return async dispatch => {\r\n            const user = await userService.login(userCreds);\r\n            dispatch(setUser(user));\r\n        };\r\n    } catch (err) {\r\n        throw err\r\n    }\r\n}\r\n\r\nexport function update(user) {\r\n    return async dispatch => {\r\n        const updatedUser = await userService.update(user)\r\n        dispatch({ type: 'UPDATE_USER', updatedUser })\r\n    }\r\n}\r\n\r\nexport function loadUsers(filterBy = null) {\r\n    return async dispatch => {\r\n        try {\r\n            const users = await userService.query(filterBy)\r\n            dispatch({ type: 'LOAD_USERS', users })\r\n        } catch (err) {\r\n            console.log('userActions: cannot load users!', err);\r\n        }\r\n    }\r\n}\r\n\r\nexport function signup(userCreds) {\r\n    return async dispatch => {\r\n        const user = await userService.signup(userCreds);\r\n        dispatch(setUser(user));\r\n    };\r\n}\r\n\r\nexport function logout() {\r\n    return async dispatch => {\r\n        await userService.logout();\r\n        dispatch(setUser(null));\r\n    };\r\n}\r\n\r\nexport function setUser(user) {\r\n    return {\r\n        type: 'SET_USER',\r\n        user\r\n    };\r\n}","export function makeId(length = 5) {\r\n    let id = '';\r\n    let possible = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n\r\n    for (let i = 0; i < length; i++) {\r\n        id += possible.charAt(Math.floor(Math.random() * possible.length));\r\n    }\r\n\r\n    return id;\r\n}\r\n\r\nexport function getRandomColor() {\r\n    const letters = '0123456789ABCDEF'.split('');\r\n    let color = '#';\r\n    for (let i = 0; i < 6; i++) {\r\n        color += letters[Math.floor(Math.random() * 16)];\r\n    }\r\n    return color;\r\n}\r\n","import axios from 'axios'\r\n\r\nexport function uploadImg(ev) {\r\n    const CLOUD_NAME = 'shaishar9'; // find it in your cloudinary account (main page)\r\n    const UPLOAD_URL = `https://api.cloudinary.com/v1_1/${CLOUD_NAME}/image/upload`;\r\n\r\n    const formData = new FormData();\r\n    formData.append('file', ev.target.files[0]);\r\n    formData.append('upload_preset', 'cgwfirgu'); // second parameter is the upload preset (you can find it in cloudinary settings)\r\n\r\n    return axios.post(UPLOAD_URL, formData)\r\n        .then(res => res.data.url)\r\n        .catch(err => console.error(err))\r\n}","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { login, signup } from '../store/actions/userActions';\r\nimport { getRandomColor } from '../services/utilService'\r\nimport { uploadImg } from '../services/cloudinaryService'\r\nimport { Link } from 'react-router-dom'\r\n\r\nclass LoginSignup extends Component {\r\n\r\n    state = {\r\n        user: {\r\n            username: '',\r\n            password: '',\r\n            fullname: '',\r\n            imgUrl: '',\r\n            confirmPassword: ''\r\n        },\r\n        isLogin: false,\r\n        msg: '',\r\n        isUploadImg: false,\r\n        isFinishUpload: false\r\n    }\r\n\r\n    componentDidMount() {\r\n        // if (!this.props.loggedInUser?.isGuest) this.props.history.push('/boards')\r\n        this.setCurrPage()\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.match.params !== this.props.match.params) {\r\n            this.setState({\r\n                msg: '', isUploadImg: false, isFinishUpload: false,\r\n                user: { username: '', password: '', confirmPassword: '', fullname: '', imgUrl: '' }\r\n            })\r\n            this.setCurrPage()\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearTimeout(this.timeoutFinishUpload)\r\n    }\r\n\r\n    setCurrPage = () => {\r\n        const isLogin = (this.props.match.path === '/login') ? true : false\r\n        this.setState({ isLogin })\r\n    }\r\n\r\n    onUploadImg = async ev => {\r\n        this.setState({ isUploadImg: true })\r\n        const imgUrl = await uploadImg(ev)\r\n        this.setState({ isUploadImg: false, isFinishUpload: true })\r\n        this.timeoutFinishUpload = setTimeout(() => {\r\n            this.setState({ isFinishUpload: false })\r\n        }, 2500);\r\n        this.setState(prevState => ({ user: { ...prevState.user, imgUrl } }))\r\n    }\r\n\r\n    handleChange = ({ target }) => {\r\n        const field = target.name\r\n        const value = target.value\r\n\r\n        this.setState(prevState => ({ user: { ...prevState.user, [field]: value } }))\r\n    }\r\n\r\n    handleUserSubmit = async ev => {\r\n        ev.preventDefault();\r\n        const { username, password, fullname, imgUrl, confirmPassword } = this.state.user\r\n        const { isLogin } = this.state\r\n\r\n        if (!username || !password && !confirmPassword && isLogin) return this.setState({ msg: 'Please enter username and password' })\r\n        if (!isLogin && password !== confirmPassword) return this.setState({ msg: 'Passwords don\\'t match!' })\r\n        if (!isLogin && !username && !password && !fullname) return this.setState({ msg: 'Please enter username, password and full name' });\r\n\r\n        const userCred = { username, password, fullname, imgUrl }\r\n        try {\r\n            if (this.state.isLogin) await this.props.login(userCred)\r\n            else {\r\n                userCred.bgColor = getRandomColor()\r\n                await this.props.signup(userCred)\r\n            }\r\n        } catch (err) {\r\n            return this.setState({ msg: err })\r\n        }\r\n\r\n        this.props.history.push('/boards')\r\n    }\r\n\r\n    onOpenUpload = () => {\r\n        this.inputElement.click();\r\n    }\r\n\r\n    render() {\r\n        const { isLogin, msg, user, isUploadImg, isFinishUpload } = this.state\r\n        return (\r\n            <div className=\"container flex column align-center\">\r\n                <div className=\"form-container\">\r\n                    <h2 className=\"form-title\">{isLogin ? 'Login' : 'Signup'}</h2>\r\n\r\n                    {isLogin && <div className=\"signup-login-link\"><Link to=\"/signup\">Sign up for an account</Link></div>}\r\n                    {!isLogin && <div className=\"signup-login-link\"><Link to=\"/login\">Already have an account? Sign in</Link></div>}\r\n                    {isFinishUpload && <div className=\"img-uploaded-msg flex align-center space-between\">Your image was uploaded successfully! <img src=\"assets/img/success.png\" className=\"small-icon\" alt=\"\" /></div>}\r\n                    <div className=\"form-img-container flex\">\r\n                        <form className=\"login-signup-form flex column align-start\" onSubmit={this.handleUserSubmit}>\r\n                            <input type=\"text\" onChange={this.handleChange} value={user.username} name=\"username\" autoComplete=\"off\" placeholder=\"Username\" />\r\n                            {!isLogin && <input type=\"text\" onChange={this.handleChange} value={user.fullname} name=\"fullname\" autoComplete=\"off\" placeholder=\"Full name\" />}\r\n                            <input type=\"password\" onChange={this.handleChange} value={user.password} name=\"password\" placeholder=\"Password\" />\r\n                            {!isLogin && <input type=\"password\" onChange={this.handleChange} value={user.confirmPassword} name=\"confirmPassword\" placeholder=\"Confirm password\" />}\r\n                            {!isLogin && <input type=\"file\" ref={input => this.inputElement = input} name=\"imgUrl\" onChange={this.onUploadImg} hidden />}\r\n                            <div className=\"img-submit-container flex align-start space-between\">\r\n                                {!isLogin && <span className=\"upload-img\" onClick={() => this.onOpenUpload()}>Upload Profile Image</span>}\r\n                                <button className={`btn btn-success ${isUploadImg ? 'disable' : ''}`} disabled={isUploadImg}>{isLogin ? 'Login' : 'Signup'}</button>\r\n                            </div>\r\n                        </form>\r\n                        <img src=\"assets/img/login-signup.png\" className=\"login-signup-img\" alt=\"\" />\r\n                    </div>\r\n\r\n                    {msg && <div className=\"user-msg flex align-center space-between\">{msg}<img src=\"assets/img/error-white.png\" className=\"small-icon\" alt=\"\" /></div>}\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        loggedInUser: state.user.loggedInUser\r\n    };\r\n};\r\nconst mapDispatchToProps = {\r\n    signup,\r\n    login\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginSignup);\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\nexport default function BoardPreview({ board }) {\r\n\r\n    return (\r\n        <Link to={`/boards/${board._id}`}>\r\n            <section style={{ backgroundColor: board.bg, backgroundImage: `url(${board.bg})`} } className=\"board-item\" >\r\n                <h3>{board.title}</h3>\r\n            </section>\r\n        </Link>\r\n    )\r\n}","import httpService from './httpService'\r\nconst BASE_URL = 'boards'\r\n\r\nexport default {\r\n    query,\r\n    save,\r\n    remove,\r\n    get\r\n}\r\n\r\nasync function query(userId) {\r\n    const queryStr = `?userId=${userId}`;\r\n    return await httpService.get(`${BASE_URL}${queryStr}`);\r\n}\r\n\r\nasync function get(id) {\r\n    return await httpService.get(`${BASE_URL}/${id}`)\r\n}\r\n\r\n\r\nasync function remove(id) {\r\n    return await httpService.delete(`${BASE_URL}/${id}`)\r\n}\r\n\r\nasync function save(board) {\r\n    var prm;\r\n    if (board._id) {\r\n        prm = await httpService.put(`${BASE_URL}/${board._id}`, board)\r\n    } else {\r\n        prm = await httpService.post(`${BASE_URL}`, board)\r\n    }\r\n    return prm\r\n}\r\n\r\n","import io from 'socket.io-client';\r\n\r\nconst BASE_URL =\r\n    process.env.NODE_ENV === 'production' ? '/' : '//localhost:3030';\r\n\r\nlet socket;\r\n\r\nexport default {\r\n    setup,\r\n    terminate,\r\n    on,\r\n    off,\r\n    emit\r\n};\r\n\r\nfunction setup() {\r\n    socket = io(BASE_URL);\r\n}\r\n\r\nfunction terminate() {\r\n    socket = null;\r\n}\r\n\r\nfunction on(eventName, cb) {\r\n    socket.on(eventName, cb);\r\n}\r\n\r\nfunction off(eventName, cb) {\r\n    socket.off(eventName, cb);\r\n}\r\n\r\nfunction emit(eventName, data) {\r\n    socket.emit(eventName, data);\r\n}\r\n","import boardService from '../../services/boardService'\r\nimport socketService from '../../services/socketService'\r\n\r\nexport function loadBoards(userId) {\r\n  return dispatch => {\r\n    return boardService.query(userId)\r\n      .then(boards => dispatch({ type: 'SET_BOARDS', boards }))\r\n  }\r\n}\r\n\r\nexport function updateStackTitle(id, title) {\r\n  return dispatch => dispatch({ type: 'UPDATE_STACK_TITLE', stack: { id, title } })\r\n}\r\n\r\nexport function loadBoard(id) {\r\n  return dispatch => {\r\n    boardService.get(id)\r\n      .then(board => {\r\n        dispatch({ type: 'SET_BOARD', board });\r\n      })\r\n  }\r\n}\r\nexport function saveCard(card) {\r\n  return (dispatch, getState) => {\r\n    dispatch({ type: 'SET_CARD', card });\r\n    socketService.emit('updateBoard', getState().board.currBoard);\r\n    boardService.save(getState().board.currBoard)\r\n  }\r\n}\r\nexport function removeBoard(boardId) {\r\n  return dispatch => {\r\n    return boardService.remove(boardId)\r\n      .then(() => {\r\n        dispatch({ type: 'REMOVE_BOARD', boardId })\r\n      })\r\n  }\r\n}\r\nexport function addBoard(board) {\r\n  return dispatch => {\r\n    boardService.save(board)\r\n      .then(savedBoard => dispatch({ type: 'ADD_BOARD', board: savedBoard }))\r\n  }\r\n}\r\n\r\nexport function save(board) {\r\n  return dispatch => {\r\n    dispatch({ type: 'SET_BOARD', board })\r\n    socketService.emit('updateBoard', board);\r\n    boardService.save(board)\r\n  }\r\n}\r\nexport function setBoard(board) {\r\n  return dispatch => dispatch({ type: 'SET_BOARD', board })\r\n}","import React from 'react'\r\n\r\n\r\nexport default class BoardBg extends React.Component {\r\n\r\n    render() {\r\n        const { bgs, type, changeBgColor  } = this.props\r\n        \r\n        return <ul className=\"bg-color-list clean-list flex wrap\">{\r\n            bgs.map((bg,idx )=> {\r\n                return <li key={idx} className=\"bg-color-li\" onClick={() => changeBgColor(bg)} \r\n                style={type === 'color' ? { backgroundColor: bg } : { backgroundImage: `url(${bg})`,backgroundSize:\"cover\" }}></li>\r\n            })\r\n        }\r\n      </ul >\r\n    }\r\n}\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { addBoard } from '../store/actions/boardActions'\r\nimport { Link } from 'react-router-dom'\r\nimport BoardBg from './BoardBg'\r\n\r\n\r\n\r\nclass BoardAdd extends React.Component {\r\n    state = {\r\n        board: {\r\n            title: '',\r\n            bg: '#122961'\r\n        },\r\n        bgColors: ['#fd9644', '#fc5c65', '#fed330', '#26de81', '#2bcbba', '#45aaf2', '#4b7bec', '#a55eea', '#122961'],\r\n        bgImgs: ['assets/img/bg-beach.jpg', 'assets/img/bg-flowers.jpg',\r\n            'assets/img/bg-sunset.jpg', 'assets/img/bg-view.jpg',\r\n            'assets/img/bg-view2.jpg', 'assets/img/bg-view3.jpg',\r\n            'assets/img/bg-view4.jpg', 'assets/img/bg-water.jpg', 'assets/img/bg-view5.jpg'],\r\n        bgBy: 'color'\r\n    }\r\n\r\n    handleChange = (ev) => {\r\n        let { name, value } = ev.target;\r\n        this.setState(prevState => ({ board: { ...prevState.board, [name]: value } }))\r\n    };\r\n\r\n    onHandleSubmit = (ev) => {\r\n        ev.preventDefault()\r\n        const { board } = this.state\r\n        if (!board.title) return;\r\n        board.members = [this.props.loggedInUser];\r\n        board.stacks = [];\r\n        board.createdAt = Date.now();\r\n        board.createdBy = this.props.loggedInUser;\r\n        board.activities = [];\r\n        this.props.addBoard(board)\r\n        this.setState({ board: '' })\r\n        this.props.onClose()\r\n    };\r\n\r\n    changeBgColor = (bg) => {\r\n        this.setState(prevState => ({ board: { ...prevState.board, bg } }))\r\n    }\r\n\r\n    onChangeBgBy(bgBy) {\r\n        this.setState({ bgBy });\r\n    }\r\n\r\n    render() {\r\n        const { board, bgColors, bgImgs, bgBy } = this.state\r\n        const { onClose } = this.props\r\n        return <>\r\n            <div className=\"screen\" onClick={onClose}>\r\n                <div className=\"add-board-container modal-container\" onClick={(ev) => ev.stopPropagation()} style={{ backgroundColor: \"unset\", width: 'fit-content' }}>\r\n                    <img src=\"assets/img/close.png\" onClick={onClose} className=\"close-btn\" alt=\"\" />\r\n                    <form onSubmit={this.onHandleSubmit}>\r\n                        <div className=\"main-form-container flex wrap\">\r\n                            <div className=\"main-form\"\r\n                                style={{ width: 'unset', backgroundColor: board.bg, backgroundImage: `url(${board.bg})`, backgroundSize: \"cover\" }}>\r\n                                <div className=\"main-form-header flex space-between\">\r\n                                    <h3>Create Board</h3>\r\n                                </div>\r\n\r\n                                <input name=\"title\" className=\"board-title\" value={board.title}\r\n                                    placeholder=\"Add board title\" onChange={this.handleChange} autoComplete=\"off\" required />\r\n                                <div className=\"bg-btns-container\">\r\n                                    <Link className=\"clean-link bg-btn\" to=\"#\" onClick={() => this.onChangeBgBy('color')}>Background Color</Link>\r\n                                    <Link className=\"clean-link bg-btn\" to=\"#\" onClick={() => this.onChangeBgBy('image')}>Background Image</Link>\r\n                                </div>\r\n\r\n                            </div>\r\n                            <div className=\"bg-color-container flex \">\r\n                                <BoardBg bgs={bgBy === 'color' ? bgColors : bgImgs} type={bgBy} changeBgColor={this.changeBgColor} />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"modal-footer flex justify-end\">\r\n                            <button className=\"create-board-btn btn btn-success\">Create Board</button>\r\n                        </div>\r\n                    </form>\r\n\r\n                </div>\r\n            </div>\r\n        </>\r\n    }\r\n}\r\n\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        loggedInUser: state.user.loggedInUser\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    addBoard\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(BoardAdd)","import React from 'react'\r\nimport BoardPreview from './BoardPreview'\r\nimport BoardAdd from './BoardAdd'\r\n\r\nexport default class BoardList extends React.Component {\r\n    \r\n    state = {\r\n        isAddOpen: false\r\n    }\r\n\r\n\r\n    toggleAddShown = () => {\r\n        this.setState(prevState => ({ isAddOpen: !prevState.isAddOpen }))\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                {this.state.isAddOpen && <BoardAdd onClose={this.toggleAddShown} />}\r\n                <div className=\"boards-list justify-center flex wrap\">\r\n                    {this.props.boards.map(board => <BoardPreview key={board._id} board={board} />)}\r\n                    <button className=\"add-new-board board-item\" onClick={this.toggleAddShown}>Create new board</button>\r\n                </div>\r\n            </>)\r\n    }\r\n}\r\n\r\n\r\n\r\n","import React from 'react'\r\nimport BoardList from '../cmps/BoardList'\r\nimport { loadBoards } from '../store/actions/boardActions'\r\nimport { connect } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\nclass Boards extends React.Component {\r\n\r\n    async componentDidMount() {\r\n        if (!this.props.loggedInUser) return this.props.history.push('/')\r\n        await this.props.loadBoards(this.props.loggedInUser._id)\r\n    }\r\n\r\n    render() {\r\n        const { loggedInUser, boards } = this.props\r\n        return ((!loggedInUser) ? 'Loading...' :\r\n            <div className=\"container flex justify-center\">\r\n                <div className=\"form-container boards-page  align-center column\">\r\n                    <header className=\"boards-header wrap flex space-between\">\r\n                        <h2 className=\"boards-title\">My Boards</h2>\r\n                        <Link to=\"/profile\" className=\"hello-btn\">Hello {loggedInUser.username}</Link>\r\n                    </header>\r\n                    <BoardList boards={boards} />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        boards: state.board.boards,\r\n        loggedInUser: state.user.loggedInUser\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    loadBoards\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Boards)","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { makeId } from '../services/utilService'\r\nimport { connect } from 'react-redux'\r\n\r\nclass AddContent extends React.Component {\r\n\r\n    state = {\r\n        isOpen: false,\r\n        title: ''\r\n    };\r\n\r\n    addItem = (event) => {\r\n        event.preventDefault();\r\n\r\n        if (!event.target) return;\r\n        if (event.target.name.value === '' || event.target.name.value === undefined) return;\r\n\r\n        const itemTitle = event.target.name.value;\r\n        const { loggedInUser, type } = this.props\r\n        this.props.currBoard.activities.unshift({ id: makeId(), txt: `added new ${(type === 'stack') ? 'list' : type}: ${itemTitle}`, createdAt: Date.now(), byMember: loggedInUser })\r\n        switch (type) {\r\n            case 'stack':\r\n                this.props.onStackAdd(itemTitle);\r\n                break;\r\n            case 'card':\r\n                const parentId = this.props.itemId;\r\n                this.props.onCardAdd(itemTitle, parentId);\r\n                break;\r\n            default:\r\n                \r\n        }\r\n\r\n        this.setState({ isOpen: false, title: '' });\r\n    }\r\n\r\n    handleChange = ({ target }) => {\r\n\r\n        let title = target.value;\r\n\r\n        this.setState({ title });\r\n    }\r\n\r\n    toggleOpen = (event) => {\r\n        event.preventDefault();\r\n\r\n        this.setState(({ isOpen }) => ({ isOpen: !isOpen }));\r\n    }\r\n\r\n    render() {\r\n        const { title, isOpen } = this.state;\r\n        const { type } = this.props;\r\n\r\n        return (\r\n\r\n            <div className={`add-content-container flex align-start add-${type}`} style={{\r\n\r\n                // marginRight: (type === 'stack') ? '16px' : '0',\r\n                padding: (type === 'stack') ? '10px 20px' : '10px 15px',\r\n                fontSize: (type === 'stack') ? 16 : 14,\r\n                color: (type === 'stack') ? '#ffffff' : '#888888',\r\n                // background: (type === 'stack') ? 'lightgreen' : 'cornflowerblue',\r\n                minWidth: (type === 'stack') ? 250 : '100%',\r\n                maxWidth: (type === 'stack') ? 250 : '100%',\r\n                borderTopLeftRadius: (type === 'stack') ? 3 : 0,\r\n                borderTopRightRadius: (type === 'stack') ? 3 : 0\r\n\r\n            }}>\r\n                {(isOpen)\r\n                    ?\r\n                    <>\r\n                        <form onSubmit={this.addItem} className={`add-content flex column align-start ${type === 'stack' ? '' : 'card-add-content'}`}>\r\n                            <input name=\"name\" autoComplete=\"off\" onChange={this.handleChange}\r\n                                value={title} placeholder={`Enter ${(type === 'stack') ? 'list' : type} title...`}\r\n                                className={`input ${(type === 'stack') ? 'stack-input' : 'card-input'}`} style={{ padding: '8px 12px' }} autoFocus={true} />\r\n                            <span className=\"add-content-buttons flex space-between\">\r\n                                <button className={`btn btn-${(type === 'stack') ? 'primary' : 'success'} btn-small`}>{`Add ${type}`}</button>\r\n                                <img src={`/assets/img/close${(type === 'stack') ? '-stack' : ''}.png`} onClick={this.toggleOpen} className=\"close-add-icon\" alt=\"\" />\r\n                            </span>\r\n                        </form>\r\n                    </>\r\n                    :\r\n                    <>\r\n                        <Link to=\"#\" onClick={this.toggleOpen} className=\"add-content-title\">{`Add ${(type === 'stack') ? 'list' : type}`}</Link>\r\n                    </>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        currBoard: state.board.currBoard,\r\n        loggedInUser: state.user.loggedInUser\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(AddContent)\r\n","import React from 'react';\r\nimport moment from 'moment'\r\n\r\n\r\nexport function CardPreview(props) {\r\n\r\n    function onLabelsPress(ev) {\r\n        ev.stopPropagation()\r\n        props.onToggleLabels();\r\n    }\r\n\r\n    function getTodosInfo() {\r\n\r\n        let doneTodosCount = 0;\r\n\r\n        card.checklists.forEach(checklist => {\r\n            todosCount += checklist.todos.length;\r\n\r\n            checklist.todos.forEach(todo => {\r\n\r\n                if (todo.isDone) doneTodosCount += 1;\r\n            })\r\n        })\r\n\r\n        return `${doneTodosCount}/${todosCount}`;\r\n    }\r\n\r\n    function getDueDateType() {\r\n        const now = Date.now();\r\n        return (Date.parse(card.dueDate) > now) ? 'future' : 'past'\r\n    }\r\n\r\n    const { card, innerRef, provided, style, labelsOpen } = props;\r\n\r\n    let todosStatus = '';\r\n    let todosCount = 0;\r\n    if (card.checklists && card.checklists.length) {\r\n        todosStatus = getTodosInfo();\r\n    }\r\n\r\n    let dueDateClass = '';\r\n    if (card.dueDate && card.dueDate !== '') {\r\n        dueDateClass = 'due-date-' + getDueDateType();\r\n    }\r\n\r\n    const showInfo = (card.comments.length || card.description !== '' || todosCount || card.dueDate !== '');\r\n\r\n    function onCardClick() {\r\n        props.history.push(props.link)\r\n    }\r\n    // console.log(style);\r\n\r\n    return (\r\n        <>\r\n            {/* <Link to={link}> */}\r\n            <div className=\"card-preview flex column align-center justify-center\" onClick={onCardClick} ref={innerRef} style={style}\r\n                {...provided.draggableProps} {...provided.dragHandleProps} >\r\n                <div className=\"card-preview-content\" style={{ background: style.background }}>\r\n\r\n\r\n                    {(card.labels.length)\r\n                        ?\r\n                        <div className={`card-labels flex wrap align-center`} onClick={(event) => onLabelsPress(event)}>\r\n                            {\r\n                                card.labels.map(label => {\r\n                                    return (\r\n                                        <div className={`card-label flex align-center justify-center ${(labelsOpen) ? 'label-expand' : ''}`}\r\n                                            key={label.title + card.id} style={{\r\n                                                background: label.color,\r\n\r\n                                            }}>{(labelsOpen) ? label.title : ''}</div>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </div>\r\n                        : null\r\n\r\n                    }\r\n                    {card.imgUrl && <img src={card.imgUrl} className=\"card-img\" alt=\"\" />}\r\n                    <p className={`card-preview-title ${(card.labels.length) ? 'top-margin' : ''}`} >{props.title}</p>\r\n\r\n                    {(showInfo)\r\n                        ?\r\n                        <div className=\"card-preview-info flex align-center space-start\">\r\n\r\n                            {(card.dueDate && card.dueDate !== '')\r\n                                ?\r\n                                <span className={`preview-info-span flex align-center due-date ${dueDateClass}`}>\r\n                                    <img className=\"preview-info-img\" src=\"/assets/img/clock.png\" alt=\"\" />\r\n                                    <p className=\"preview-info-count\">{moment(card.dueDate).format(\"MMM DD\")}</p>\r\n                                </span>\r\n                                :\r\n                                null\r\n                            }\r\n                            {(card.description !== '')\r\n                                ?\r\n                                <span className=\"preview-info-span flex align-center\">\r\n                                    <img className=\"preview-info-img\" src=\"/assets/img/description.png\" alt=\"\" />\r\n                                </span>\r\n                                :\r\n                                null\r\n                            }\r\n                            {(card.comments.length)\r\n                                ?\r\n                                <span className=\"preview-info-span flex align-center\">\r\n                                    <img className=\"preview-info-img\" src=\"/assets/img/comment.png\" alt=\"\" />\r\n                                    <p className=\"preview-info-count\">{card.comments.length}</p>\r\n                                </span>\r\n                                :\r\n                                null\r\n                            }\r\n                            {(card.checklists && todosCount)\r\n                                ?\r\n                                <span className=\"preview-info-span flex align-center\">\r\n                                    <img className=\"preview-info-img\" src=\"/assets/img/todos.png\" alt=\"\" />\r\n                                    <p className=\"preview-info-count\">{todosStatus}</p>\r\n                                </span>\r\n                                :\r\n                                null\r\n                            }\r\n\r\n                        </div>\r\n                        : null}\r\n                </div>\r\n            </div>\r\n            {/* </Link> */}\r\n\r\n        </>\r\n    )\r\n\r\n}","import React from 'react'\r\n\r\nexport class Stack extends React.Component {\r\n\r\n    state = {\r\n\r\n    };\r\n\r\n    render() {\r\n        const { innerRef, provided, style, children } = this.props;\r\n        return (\r\n            <div className=\"stack flex column space-start\" ref={innerRef} style={style}\r\n                {...provided.droppableProps} >\r\n                {children}\r\n            </div>\r\n\r\n        )\r\n    }\r\n};","import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\nexport default class CardDescription extends Component {\r\n\r\n    state = {\r\n        textAreaHeight: 35,\r\n        textAreaMinHeight: 0\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.props.description.split(/\\r\\n|\\r|\\n/).length < 5) this.setState({ textAreaMinHeight: '50px' })\r\n        else this.setState({ textAreaMinHeight: '150px' })\r\n    }\r\n\r\n    setDescHeight = (ev) => {\r\n        if (ev.keyCode === 13) this.setState(prevState => ({ textAreaHeight: 20 + prevState.textAreaHeight }))\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"card-desc-container\">\r\n\r\n\r\n                <div className=\"card-mini-title flex align-center\">\r\n                    <img src=\"/assets/img/description.png\" alt=\"\"></img>\r\n                    <label className=\"card-txt-title\" htmlFor=\"cardDesc\">Description:</label>\r\n                </div>\r\n\r\n                <form className=\"main-content-card-action\" onSubmit={this.props.onSaveDesc}>\r\n                    <textarea name=\"description\" value={this.props.description} onChange={this.props.handleChange}\r\n                        onFocus={() => this.props.isShown(true)} className=\"card-desc\" onKeyUp={this.setDescHeight} style={{ minHeight: this.state.textAreaMinHeight, height: this.state.textAreaHeight }} id=\"cardDesc\" placeholder=\"Add your card description...\">\r\n                    </textarea>\r\n                    {this.props.isSubmitShown && <div className=\"desc-btns-container flex align-center\">\r\n                        <button className=\"btn btn-primary btn-save-desc\">Save Changes</button>\r\n                        <Link to=\"#\" className=\"cancel-changes\" onClick={() => this.props.isShown(false, true)}>\r\n                            <img className=\"close-btn-desc\" src=\"/assets/img/close.png\" alt=\"\" />\r\n                        </Link>\r\n                    </div>}\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport moment from 'moment'\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\nexport default class CardComments extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.myRef = React.createRef();\r\n    }\r\n\r\n    componentDidUpdate(prevProps){\r\n        if (this.props.isFocusComment !== prevProps.isFocusComment) {\r\n            this.myRef.current.focus();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <div className=\"card-mini-title flex align-center\">\r\n                    <img src=\"/assets/img/comment.png\" alt=\"\" />\r\n                    <label className=\"card-txt-title\" htmlFor=\"cardComment\">Comments:</label>\r\n                </div>\r\n                <div className=\"main-content-card-action\">\r\n                    <form onSubmit={this.props.onAddComment}>\r\n                        <input ref={this.myRef} name=\"comment\" className=\"comment-input input\" autoComplete=\"off\" \r\n                        onChange={this.props.handleChange} id=\"cardComment\" placeholder=\"Your comment...\" \r\n                        value={this.props.comment} />\r\n                        <button className=\"btn-primary comment-btn\">Add Comment</button>\r\n                    </form>\r\n                    <div className=\"comments-container\">\r\n                        {this.props.comments && this.props.comments.map((comment, idx) => <div className=\"comment flex align-start column\" key={idx}>\r\n                            <div className=\"flex align-center\">\r\n                                <div className=\"member flex justify-center align-center\"\r\n                                    style={{ backgroundImage: `url(${comment.byMember.imgUrl})`, backgroundColor: comment.byMember.bgColor }}>\r\n                                    {this.props.getTwoChars(comment.byMember.fullname)}\r\n                                </div>\r\n                                <div>\r\n                                    <span className=\"comment-title-fullname\">{comment.byMember.fullname}</span>\r\n                                    <span className=\"comment-title-time\">{moment(comment.createdAt).fromNow()}</span>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"comment-txt\">{comment.txt}</div>\r\n                            <Link className=\"delete-comment\" to=\"#\" onClick={() => this.props.removeComment(comment)}>Delete</Link>\r\n                        </div>)}\r\n                    </div>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n","import React from 'react'\r\n\r\nimport Calendar from 'react-calendar';\r\nimport 'react-calendar/dist/Calendar.css';\r\n\r\nexport default function DueDate(props) {\r\n    const date = (props.value) ? new Date(props.value) : new Date()\r\n    return <div>\r\n        <Calendar onChange={props.onChange} calendarType=\"US\" value={date} locale=\"en-GB\" name=\"dueDate\" />\r\n        <div className=\"btns-container flex space-between\">\r\n            <button className=\"btn btn-primary\" onClick={() => {\r\n                props.onSubmitDate()\r\n                props.onToggleAction('dueDate')\r\n            }}>Save</button>\r\n            <button className=\"btn btn-danger\" onClick={() => {\r\n                props.removeDueDate()\r\n                props.onToggleAction('dueDate')\r\n            }}>Remove</button>\r\n        </div>\r\n    </div>\r\n}\r\n","import React, { Component } from 'react'\r\n\r\n\r\nexport default class CardChangeLabel extends Component {\r\n    state = {\r\n        colors: [\r\n            { title: '#61bd4f', isChecked: false }, { title: '#f2d600', isChecked: false },\r\n            { title: '#ff9f1a', isChecked: false }, { title: '#eb5a46', isChecked: false },\r\n            { title: '#c377e0', isChecked: false }, { title: '#0079bf', isChecked: false },\r\n            { title: '#61bd4f', isChecked: false }, { title: '#f2d600', isChecked: false },\r\n            { title: '#ff9f1a', isChecked: false }, { title: '#eb5a46', isChecked: false },\r\n            { title: '#c377e0', isChecked: false }, { title: '#0079bf', isChecked: false }\r\n        ],\r\n        colorChecked: ''\r\n    }\r\n\r\n    isColorChecked = (color) => {\r\n        this.setState(prevState => ({\r\n            colorChecked: color,\r\n            colors: prevState.colors.map(currColor => {\r\n                if (currColor.title === color) currColor.isChecked = true;\r\n                else currColor.isChecked = false;\r\n                return currColor;\r\n            })\r\n        }))\r\n    }\r\n\r\n    changeLabel = (labelId) => {\r\n        if (!this.state.colorChecked) return null       \r\n        this.props.onChagneLabelColor(labelId,this.state.colorChecked);\r\n    }\r\n\r\n\r\n    render() {\r\n        const { labelId, onToggleAction } = this.props\r\n        return <>\r\n            <div className=\"flex wrap align-center justify-center\">\r\n                {this.state.colors.map((color, idx) => {\r\n                    return <div key={idx} className=\"label-color-item flex align-center justify-center\" onClick={() => this.isColorChecked(color.title)}\r\n                        style={{ backgroundColor: color.title }} >\r\n                        {color.isChecked && <img src=\"/assets/img/icon-checked-white.png\" alt=\"\" />}\r\n                    </div>\r\n                })}\r\n            </div>\r\n            <div className=\"btns-container flex space-between\">\r\n                <button className=\"btn btn-primary\" onClick={() => {\r\n                    this.changeLabel(labelId);\r\n                }}>Save</button>\r\n                <button className=\"btn btn-danger\" onClick={() => {\r\n                    this.changeLabel('');\r\n                }}>Remove</button>\r\n            </div>\r\n        </>\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport CardChangeLabel from './CardChangeLabel';\r\n\r\n\r\nexport default class LabelsPicker extends Component {\r\n    state = {\r\n        labels: [{ id: '101', title: 'done', color: '#61bd4f' }, { id: '102', title: 'error', color: '#f2d600' },\r\n        { id: '103', title: 'design', color: '#ff9f1a' }, { id: '104', title: 'feature', color: '#eb5a46' },\r\n        { id: '105', title: 'bug', id: '106', color: '#c377e0' }, { id: '107', title: 'warning', color: '#0079bf' }],\r\n        isChangeShown: false,\r\n        labelSelected: ''\r\n    }\r\n\r\n    isLabelChecked = (labelId) => {\r\n        const currCard = this.props.card;\r\n        if (!currCard.labels) currCard.labels = [];\r\n        if (currCard.labels.find(label => labelId === label.id)) return true\r\n        return false\r\n    }\r\n\r\n    onEditLabel = (labelId) => {\r\n        this.setState({ isChangeShown: true, labelSelected: labelId });\r\n    }\r\n\r\n    render() {\r\n        const { addLabel, onChagneLabelColor } = this.props\r\n        const { labelSelected, isChangeShown } = this.state\r\n        return <>\r\n            {!isChangeShown && this.state.labels.map((label, idx) => {\r\n                return <div key={idx} className=\"flex align-center space-between\">\r\n                    <div className=\"label-item flex align-center space-between\"\r\n                        style={{ backgroundColor: label.color }} onClick={() => addLabel(label)}>\r\n                        {label.title.charAt(0).toUpperCase() + label.title.slice(1)}\r\n                        {this.isLabelChecked(label.id) ? <img src=\"/assets/img/icon-checked-white.png\" alt=\"\" /> : ''}\r\n                    </div>\r\n                    <div className=\"edit-icon\" onClick={() => this.onEditLabel(label.id)}>\r\n                        <img src=\"/assets/img/edit.svg\" />\r\n                    </div>\r\n                </div>\r\n            })}\r\n            {/* {isChangeShown && <CardChangeLabel labelSelected={labelSelected} onChagneLabelColor={onChagneLabelColor} />} */}\r\n        </>\r\n    }\r\n}","import React from 'react'\r\n\r\nexport default class CardMembers extends React.Component {\r\n    state = {\r\n        byMember: ''\r\n    }\r\n\r\n    handleChange = (ev) => {\r\n        let { value } = ev.target;\r\n        this.setState(({ byMember: value }))\r\n    };\r\n\r\n    isMemberChecked = (memberId) => {\r\n        const currCard = this.props.getCurrCard();\r\n\r\n        if (currCard.members.find(member => memberId === member._id)) return true\r\n        return false\r\n    }\r\n\r\n    getMembers = () => {\r\n        let searchBy = this.state.byMember;\r\n        if (searchBy) return this.props.board.members.filter(member => member.username.includes(searchBy))\r\n\r\n        return this.props.board.members;\r\n    }\r\n\r\n    getTwoChars(str) {\r\n        let twoChars;\r\n        if (str.split(' ').length !== 2) twoChars = str?.charAt(0)\r\n        else twoChars = str?.charAt(0) + str.split(' ')[1].charAt(0)\r\n        if (!twoChars) twoChars = ''\r\n        return twoChars\r\n    }\r\n\r\n    render() {\r\n        const { addMember } = this.props\r\n        const { getMembers } = this\r\n        return (\r\n            <div className=\"card-members-container\">\r\n                <div className=\"search-input\">\r\n                    <input type=\"text\" className=\"input search-members\" value={this.state.byMember} autoComplete=\"off\"\r\n                        placeholder=\"Search member\" onChange={this.handleChange} />\r\n                </div>\r\n                <div className=\"members-list-container\">\r\n                    <h4>BOARD MEMBERS</h4>\r\n                    <div className=\"members-list\">\r\n                        {getMembers().map(member => {\r\n                            return <div key={member._id}\r\n                                className=\"member-item flex space-between align-center\" onClick={() => addMember(member)}>\r\n                                <div className=\"flex align-center\">\r\n                                    <div className=\"member flex justify-center align-center\" style={{\r\n                                        backgroundImage: `url(${member.imgUrl})`,\r\n                                        backgroundColor: member.bgColor\r\n                                    }}>\r\n                                        {this.getTwoChars(member.fullname)}\r\n                                    </div>\r\n                                    <span className=\"members-card-title\">{member.username}</span>\r\n                                </div>\r\n                                {this.isMemberChecked(member._id) ? <img src=\"/assets/img/icon-checked.png\" /> : ''}\r\n                            </div>\r\n                        })}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\n","import React from 'react'\r\n\r\nexport default class CardMove extends React.Component {\r\n\r\n    state = {\r\n        selectIsShown: false\r\n    }\r\n\r\n    onToggleSelect = () => {\r\n        this.setState(prevState => ({ selectIsShown: !prevState.selectIsShown }))\r\n    }\r\n\r\n    render() {\r\n        const { card, board } = this.props\r\n        const { selectIsShown } = this.state\r\n        return (\r\n            <div className=\"card-move-container\">\r\n                <h4>SELECT DESTINATION</h4>\r\n                <div className=\"select-stack\" onClick={this.onToggleSelect}>Select list</div>\r\n                {selectIsShown && <div className=\"selection-container\">\r\n                    {board.stacks.map((stack, idx) => {\r\n                        if(stack.cards.find(currCard => currCard.id === card.id)) return null;\r\n                        return <div key={idx} className=\"option-stack-name\" onClick={() => this.props.moveCardToStack(stack)}>{stack.title}</div>\r\n                    })}\r\n                </div>}\r\n            </div>\r\n\r\n        )\r\n    }\r\n\r\n}\r\n\r\n","import React from 'react'\r\n\r\nexport default class CardTimeEstimation extends React.Component {\r\n\r\n    state = {\r\n        timeEstimation: {\r\n            hours: '',\r\n            minutes: '',\r\n            days:''\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        const { timeEstimation } = this.props.card\r\n        if(timeEstimation) this.setState({ timeEstimation })\r\n    }\r\n\r\n    handleChange = (ev) => {\r\n        let { name, value } = ev.target;\r\n        this.setState(prevState => ({ timeEstimation: { ...prevState.timeEstimation, [name]: value } }))\r\n    }\r\n\r\n    render() {\r\n        const { card, onAddTimeEstimation, removeCardEstimation, onToggleAction } = this.props\r\n        console.log('card', card);\r\n\r\n        return (\r\n            <div className=\"card-time-estimation-container\">\r\n                <h4>SELECT TIME ESTIMATION</h4>\r\n                <div>Days:<input type=\"number\" name=\"days\" className=\"input input-time-estimation\"\r\n                    onChange={this.handleChange} autoComplete=\"off\" value={this.state.timeEstimation.days}\r\n                    placeholder={`${card.timeEstimation ? card.timeEstimation.days : '00'}`} />\r\n                </div>\r\n                <div>Hours:<input type=\"number\" name=\"hours\" className=\"input input-time-estimation\"\r\n                    onChange={this.handleChange} autoComplete=\"off\" value={this.state.timeEstimation.hours}\r\n                    placeholder={`${card.timeEstimation ? card.timeEstimation.hours : '00'}`} />\r\n                </div>\r\n                <div>Minutes:<input type=\"number\" name=\"minutes\" className=\"input input-time-estimation\"\r\n                    onChange={this.handleChange} autoComplete=\"off\" value={this.state.timeEstimation.minutes}\r\n                    placeholder={`${card.timeEstimation ? card.timeEstimation.minutes : '00'}`} />\r\n                </div>\r\n                <div className=\"btns-container flex space-between\">\r\n                    <button className=\"btn btn-primary\" onClick={() => {\r\n                        onAddTimeEstimation(this.state.timeEstimation);\r\n                        onToggleAction('timeEstimation');\r\n                    }}>Save</button>\r\n                    <button className=\"btn btn-danger\" onClick={() => {\r\n                        removeCardEstimation()\r\n                        onToggleAction('timeEstimation');\r\n                    }}>Remove</button>\r\n                </div>\r\n            </div>\r\n\r\n        )\r\n    }\r\n\r\n}\r\n\r\n","import React from 'react'\r\n\r\nexport default function ReomveCard(props) {\r\n    const { type } = props;\r\n    return (\r\n        <div className=\"remove-board-container remove-card\">\r\n            <div className=\"remove-board-title remove-card-title flex align-center space-between\">\r\n                {`Remove ${(type && type === 'stack') ? 'list' : 'card'}`}\r\n                <img src=\"/assets/img/close.png\" className=\"close-icon\" onClick={() => props.onToggleRemoveCard()} alt=\"\" />\r\n            </div>\r\n            <p>Are you sure?</p>\r\n            {(type && type === 'stack') ?\r\n                <button className=\"btn btn-danger btn-remove-card\" onClick={() => props.onRemoveStack()}>Yes, remove!</button>\r\n                :\r\n                <button className=\"btn btn-danger btn-remove-card\" onClick={() => props.onRemoveCard()}>Yes, remove!</button>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport ReomveCard from '../cmps/RemoveCard'\r\n\r\nexport default class StackMenu extends React.Component {\r\n\r\n    state = {\r\n        isOpenModalRemove: false\r\n    };\r\n\r\n    onToggleRemoveCard = () => {\r\n        this.setState(prevState => ({ isOpenModalRemove: !prevState.isOpenModalRemove }))\r\n    }\r\n\r\n    onRemoveStack = () => {\r\n        this.props.onStackRemove(this.props.stackId)\r\n    }\r\n\r\n    render() {\r\n\r\n        const { isOpenModalRemove } = this.state;\r\n\r\n        return (\r\n            <>\r\n            <ul className=\"stack-menu-list\">\r\n                <li className=\"stack-menu-item\"><div className=\"stack-menu-move\">Move List</div></li>\r\n                <li className=\"stack-menu-item\" onClick={this.onToggleRemoveCard}><div className=\"stack-menu-remove\" >Remove List</div></li>\r\n            </ul>\r\n            {isOpenModalRemove && <ReomveCard type=\"stack\" onToggleRemoveCard={this.onToggleRemoveCard} onRemoveStack={this.onRemoveStack} />}\r\n            </>\r\n        )\r\n    }\r\n};","import React from 'react'\r\n\r\nexport default function CardBgColor(props) {\r\n    const bgColors = ['#fd9644', '#fc5c65', '#fed330', '#26de81', '#2bcbba', '#45aaf2', '#4b7bec', '#a55eea', '#122961', '#fff', '#000','#f8a5c2']\r\n    return (\r\n        <div className=\"card-bg-container flex wrap justify-center\">\r\n            {bgColors.map((color, idx) => <div key={idx} className=\"card-bg\" onClick={() => props.onChangeBgColor(color)} style={{ backgroundColor: color }}></div>)}\r\n        </div>\r\n    )\r\n}\r\n","import React, { Component } from 'react'\r\nimport DueDate from './DueDate'\r\nimport LabelsPicker from './LabelsPicker'\r\nimport CardMembers from './CardMembers'\r\nimport CardMove from './CardMove'\r\nimport CardTimeEstimation from './CardTimeEstimation'\r\nimport StackMenu from './StackMenu'\r\nimport CardBgColor from './CardBgColor'\r\nimport OutsideClickHandler from 'react-outside-click-handler';\r\nimport CardChangeLabel from './CardChangeLabel'\r\n\r\n\r\n\r\nexport default class ActionContainer extends Component {\r\n    state = {\r\n        action: null\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.checkAction();\r\n    }\r\n\r\n    checkAction() {\r\n        const actions = this.props.isShown;\r\n        for (const key in actions) {\r\n            if (actions[key]) {\r\n                this.setState({ action: key });\r\n            }\r\n        }\r\n    }\r\n\r\n    titleToReturn(key) {\r\n        switch (key) {\r\n            case 'dueDate':\r\n                return 'Change Due Date'\r\n            case 'label':\r\n                return 'Labels'\r\n            case 'members':\r\n                return 'Add Members'\r\n            case 'move':\r\n                return 'Move Card'\r\n            case 'timeEstimation':\r\n                return 'Time Estimation'\r\n            case 'stack':\r\n                return this.props.stackInfo.title\r\n            case 'bgColor':\r\n                return 'Change Background Color'\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { isShown, card, onToggleAction, board, onChange, value, onSubmitDate,\r\n            getCurrCard, addLabel, addMember, removeDueDate, moveCardToStack,\r\n            onAddTimeEstimation, removeCardEstimation, stackInfo, onStackRemove,\r\n            onChangeBgColor, onChagneLabelColor } = this.props;\r\n\r\n\r\n        const { action, labelId } = this.state;\r\n\r\n        return (\r\n            <OutsideClickHandler onOutsideClick={() => onToggleAction(action)} display={'contents'}>\r\n                < div className=\"action-container\" >\r\n                    <div className=\"action-header flex space-between align-center\">\r\n                        <h3>{this.titleToReturn(action)}</h3>\r\n                        <button className=\"close-label\" onClick={() => onToggleAction(action)}>\r\n                            <img src=\"/assets/img/close.png\" alt=\"\" />\r\n                        </button>\r\n                    </div>\r\n                    {isShown.label && <LabelsPicker onChagneLabelColor={onChagneLabelColor} addLabel={addLabel} card={card} onToggleAction={onToggleAction} />}\r\n                    {isShown.dueDate && <DueDate onChange={onChange} value={value} onToggleAction={onToggleAction} removeDueDate={removeDueDate} onSubmitDate={onSubmitDate} />}\r\n                    {isShown.members && <CardMembers board={board} getCurrCard={getCurrCard} card={card} addMember={addMember} />}\r\n                    {isShown.bgColor && <CardBgColor board={board} onToggleAction={onToggleAction} getCurrCard={getCurrCard} card={card} onChangeBgColor={onChangeBgColor} />}\r\n                    {isShown.move && <CardMove board={board} card={card} moveCardToStack={moveCardToStack} />}\r\n                    {isShown.timeEstimation && <CardTimeEstimation card={card} onToggleAction={onToggleAction}\r\n                        onAddTimeEstimation={onAddTimeEstimation} removeCardEstimation={removeCardEstimation} />}\r\n                    {isShown.stack && <StackMenu board={board} stackId={stackInfo.id} onStackRemove={onStackRemove} />}\r\n                </div >\r\n            </OutsideClickHandler>\r\n        )\r\n    }\r\n}\r\n","import React from 'react'\r\n\r\nexport default class CardChecklist extends React.Component {\r\n    state = {\r\n        newTodo: {\r\n            title: '',\r\n            isDone: false\r\n        }\r\n    }\r\n\r\n    onEditChecklistTitle = (ev) => {\r\n        let { value } = ev.target;\r\n        this.props.onEditChecklistTitle(this.props.checklist.id, value)\r\n    }\r\n\r\n    handleChange = (ev) => {\r\n        let { name, value } = ev.target;\r\n        this.setState(prevState => ({ newTodo: { ...prevState.newTodo, [name]: value } }))\r\n    }\r\n\r\n    onAddTodo = (ev) => {\r\n        ev.preventDefault();\r\n        this.props.addTodo(this.props.checklist.id, this.state.newTodo)\r\n        this.setState({ newTodo: { title: '', isDone: false } })\r\n    }\r\n\r\n    onUpdateTodo = (ev, todo, click = false) => {\r\n        let { name, value } = ev.target;\r\n        if (click) todo.isDone = !todo.isDone;\r\n\r\n        const newTodo = { ...todo, [name]: value }\r\n        this.props.addTodo(this.props.checklist.id, newTodo)\r\n    }\r\n\r\n    calculateProgBarWidth = () => {\r\n        let countIsDone = 0;\r\n        this.props.checklist.todos.forEach(todo => {\r\n            if (todo.isDone) countIsDone++;\r\n        })\r\n        if (!this.props.checklist.todos.length) return 0;\r\n        return ((countIsDone / this.props.checklist.todos.length) * 100).toFixed(0);\r\n    }\r\n\r\n    calculateProgBarBgc = () => {\r\n        const width = this.calculateProgBarWidth();\r\n        if (width === '100') return '#61bd4f'\r\n        return '#0079bf'\r\n    }\r\n\r\n    render() {\r\n        const { title, todos, id, } = this.props.checklist\r\n        const width = this.calculateProgBarWidth();\r\n        const bgc = this.calculateProgBarBgc();\r\n        return (\r\n            <div className=\"card-checklist-container\">\r\n                <div className=\"card-checklist-title flex align-center space-between\">\r\n                    <div>\r\n                        <img src=\"/assets/img/todos.png\" />\r\n                        <input type=\"text\" name=\"title\" className=\"checklist-title\" autoComplete=\"off\" onChange={this.onEditChecklistTitle} value={title} />\r\n                    </div>\r\n                    <button className=\"btn btn-delete\" onClick={() => this.props.onRemoveChecklist(this.props.checklist)}>Delete</button>\r\n                </div>\r\n                <div className=\"checklist-main\">\r\n                    <div className=\"checklist-progress-bar-container\"><span>{`${width}%`}</span>\r\n                        <div className=\"checklist-progress-bar\">\r\n                            <div className=\"progress-bar\" style={{ width: `${width}%`, backgroundColor: `${bgc}` }}>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"checklist-todos-container\">\r\n                        {todos.map((todo) => <div className=\"flex align-center todo-item space-between\" key={todo.id}>\r\n                            <div className=\"todo-check-container flex align-center\">\r\n                                <div className={todo.isDone ? \"checkbox done\" : \"checkbox\"} onClick={(event) => this.onUpdateTodo(event, todo, true)}>\r\n                                </div>\r\n                                <input name=\"title\" className={`checklist-title todo-title ${todo.isDone ? 'done-decoration' : 'd'}`}\r\n                                    value={todo.title} onChange={(event) => this.onUpdateTodo(event, todo)} />\r\n                            </div>\r\n                            <div className=\"todo-delete-btn-container\"><img className=\"todo-delete-btn\" src=\"/assets/img/close.png\" onClick={() => this.props.onRemoveTodo(id, todo)} /></div>\r\n                        </div>\r\n                        )}\r\n                        <form onSubmit={this.onAddTodo}>\r\n                            <input type=\"text\" name=\"title\" className=\"checklist-title todo-title add-todo\" onChange={this.handleChange} placeholder=\"Add New Todo\" autoComplete=\"off\" value={this.state.newTodo.title} />\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div >\r\n        )\r\n    }\r\n}","import React from 'react'\r\nimport moment from 'moment'\r\n\r\nexport default function CardPreviewActions(props) {\r\n    const { card, getTwoChars } = props\r\n    return (\r\n        <>\r\n            {(card.members.length !== 0 || card.labels.length !== 0 || card.dueDate) && <div className=\"members-labels-container flex wrap\">\r\n                {card.members.length !== 0 &&\r\n                    <div className=\"member-card-container\" >\r\n                        <h3>Members</h3>\r\n                        <div className=\"flex wrap\">\r\n                            {card.members.map((member, idx) => <div key={idx} className=\"member flex justify-center align-center\"\r\n                                style={{ backgroundImage: `url(${member.imgUrl})`, backgroundColor: member.bgColor }}>\r\n                                {getTwoChars(member.fullname)}\r\n                            </div>)}\r\n                        </div>\r\n\r\n                    </div>}\r\n                {card.labels.length !== 0 &&\r\n                    <div className=\"labels-card-container\">\r\n                        <h3>Labels</h3>\r\n                        <div className=\"flex wrap\">\r\n                            {card.labels.map((label,idx) => <div key={idx} className=\"card-label-item\" style={{ backgroundColor: `${label.color}` }}>\r\n                                {label.title}\r\n                            </div>)}\r\n                        </div>\r\n\r\n                    </div>}\r\n                {card.dueDate &&\r\n                    <div className=\"due-date-container\">\r\n                        <h3>Due date</h3>\r\n                        <div className=\"flex align-center justify-center time-container\">\r\n                            {moment(card.dueDate).format(\"MMM DD\")}\r\n                        </div>\r\n                    </div>\r\n                }\r\n            </div>}\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function CardImg(props) {\r\n    return (\r\n        <div className=\"card-img-container\">\r\n            <div className=\"card-mini-title flex align-center space-between\">\r\n                <div>\r\n                    <img src=\"/assets/img/style.png\"></img>\r\n                    <label className=\"card-txt-title\">Image:</label>\r\n                </div>\r\n                <button className=\"btn btn-delete\" onClick={() => props.onRemoveImg()}>Delete</button>\r\n            </div>\r\n            <div className=\"card-img\">\r\n                {props.isUploadImg? <div className=\"loading\">\r\n                    <div className=\"dot\"></div>\r\n                    <div className=\"dot\"></div>\r\n                    <div className=\"dot\"></div>\r\n                    <div className=\"dot\"></div>\r\n                    <div className=\"dot\"></div>\r\n                </div> : <img src={`${props.card.imgUrl}`} />}\r\n\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport moment from 'moment'\r\n\r\nexport default function CardActivity(props) {\r\n    const { activities } = props;\r\n    return (\r\n        <>\r\n            <div className=\"card-mini-title flex align-center\">\r\n                <img src=\"/assets/img/activity.png\" />\r\n                <span className=\"card-txt-title\" htmlFor=\"cardComment\">Activity:</span>\r\n            </div>\r\n            <div className=\"main-content-card-action\">\r\n                <div className=\"comments-container\">\r\n                    {activities && activities.map((activity, idx) => <div className=\"comment flex align-start column\" key={idx}>\r\n                        <div className=\"flex align-center\">\r\n                            <div className=\"member flex justify-center align-center\"\r\n                                style={{ backgroundImage: `url(${activity.byMember.imgUrl})`, backgroundColor: activity.byMember.bgColor }}>\r\n                                {props.getTwoChars(activity.byMember.fullname)}\r\n                            </div>\r\n                            <div className=\"flex align-center\">\r\n                                <span className=\"comment-title-fullname\">{activity.byMember.fullname}</span>\r\n                                <div className=\"activity-txt\">{activity.txt}</div>\r\n                            </div>\r\n                        </div>\r\n                        <span className=\"comment-title-time activity-time\">{moment(activity.createdAt).fromNow()}</span>\r\n\r\n                    </div>)}\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default class CardShowTimeEstimation extends React.Component {\r\n\r\n\r\n\r\n    render() {\r\n        const { timeEstimation } = this.props.card\r\n        return (\r\n            <>\r\n                {(timeEstimation.days || timeEstimation.hours || timeEstimation.minutes) && <>\r\n                    <h3 className=\"time-estimation-title\">Time Estimation</h3>\r\n                    <div className=\"show-time-estimation flex align-center space-between\">\r\n                        <div>\r\n                            {timeEstimation.days ? <span>{timeEstimation.days} days </span> : ''}\r\n                            {timeEstimation.hours ? <span> {timeEstimation.hours} hours </span> : ''}\r\n                            {timeEstimation.minutes ? <span> {timeEstimation.minutes} minutes</span> : ''}\r\n                        </div>\r\n                        {!timeEstimation.approve && <div className=\"flex align-center justify-center\" >\r\n                            <span onClick={this.props.onApproveTimeEstimation}><img src=\"/assets/img/approve.png\" title=\"Approve\" alt=\"\" /></span>\r\n                            <span onClick={this.props.onFocusComment}><img src=\"/assets/img/small-comment.png\" title=\"Comment\" alt=\"\" /></span>\r\n                        </div>\r\n                        }\r\n                    </div>\r\n                </>}\r\n            </>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport CardDescription from '../cmps/CardDescription'\r\nimport CardComments from '../cmps/CardComments'\r\nimport { save, loadBoard, saveCard } from '../store/actions/boardActions'\r\nimport { Link } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\nimport { makeId } from '../services/utilService'\r\nimport ActionContainer from '../cmps/ActionContainer'\r\nimport CardChecklist from '../cmps/CardChecklist'\r\nimport CardPreviewActions from '../cmps/CardPreviewActions'\r\nimport { uploadImg } from '../services/cloudinaryService'\r\nimport CardImg from '../cmps/CardImg'\r\nimport RemoveCard from '../cmps/RemoveCard'\r\nimport moment from 'moment'\r\nimport CardActivity from '../cmps/CardActivity'\r\nimport CardShowTimeEstimation from '../cmps/CardShowTimeEstimation'\r\n\r\nclass CardDetails extends Component {\r\n\r\n    state = {\r\n        card: null,\r\n        prevCardDesc: '',\r\n        isShown: {\r\n            label: false,\r\n            dueDate: false,\r\n            members: false,\r\n            move: false,\r\n            timeEstimation: false,\r\n            bgColor: false\r\n        },\r\n        comment: {\r\n            txt: ''\r\n        },\r\n        isUploadImg: false,\r\n        isFinishUpload: false,\r\n        isOpenModalRemove: false,\r\n        dueDateNotSave: '',\r\n        isFocusComment: false\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.props.currBoard) this.loadCard()\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.currBoard !== prevProps.currBoard) {\r\n            this.loadCard()\r\n        }\r\n    }\r\n\r\n    loadCard = () => {\r\n        const currCard = this.getCurrCard();\r\n        this.setState({ card: currCard }, () => this.setState({ prevCardDesc: this.state.card.description }))\r\n    }\r\n\r\n    getCurrCard = () => {\r\n        const cardId = this.props.match.params.cardId\r\n        let card;\r\n        this.props.currBoard.stacks.some(stack => {\r\n            card = stack.cards.find(card => card.id === cardId)\r\n            return card\r\n        })\r\n        if (!card) return this.props.history.push('/boards')\r\n        return card\r\n    }\r\n\r\n    onDescShown = (isShown, isPrevDesc) => {\r\n        this.setState({ isDescShown: isShown })\r\n        if (!isShown && isPrevDesc) this.setPrevDesc()\r\n    }\r\n\r\n    setPrevDesc = () => {\r\n        this.setState(prevState => ({ card: { ...prevState.card, description: this.state.prevCardDesc } }))\r\n    }\r\n\r\n    onBackBoard = () => {\r\n        const { boardId } = this.props.match.params\r\n        this.onEditTitleFinish()\r\n        this.props.history.push(`/boards/${boardId}`)\r\n    }\r\n\r\n    // @TODO: due date start from the DB, if got\r\n\r\n    onChangeDate = (dueDate) => {\r\n        this.setState({ dueDateNotSave: dueDate })\r\n    }\r\n\r\n    onSubmitDate = () => {\r\n        const { currBoard, loggedInUser } = this.props\r\n        currBoard.activities.unshift({\r\n            id: makeId(), txt: `set card due date to \r\n        ${moment(this.state.dueDateNotSave).format(\"MMM DD\")}`, createdAt: Date.now(), byMember: loggedInUser\r\n        })\r\n        this.state.card.activities.unshift({\r\n            id: makeId(), txt: `set card due date to \r\n        ${moment(this.state.dueDateNotSave).format(\"MMM DD\")}`, createdAt: Date.now(), byMember: loggedInUser\r\n        })\r\n        this.setState(prevState => ({ card: { ...prevState.card, dueDate: this.state.dueDateNotSave } }), () => {\r\n            this.props.saveCard(this.state.card)\r\n        })\r\n    }\r\n\r\n    removeDueDate = () => {\r\n        const dueDate = '';\r\n        this.setState(prevState => ({ card: { ...prevState.card, dueDate } }), () => this.props.saveCard(this.state.card))\r\n    }\r\n\r\n    handleChange = ({ target }) => {\r\n        const field = target.name\r\n        const value = target.value\r\n        this.setState(prevState => ({ card: { ...prevState.card, [field]: value } }))\r\n    }\r\n\r\n    handleCommentChange = ({ target }) => {\r\n        this.setState(prevState => ({ comment: { ...prevState.comment, txt: target.value } }))\r\n    }\r\n\r\n    onAddComment = (ev) => {\r\n        ev.preventDefault();\r\n        const { comment, card } = this.state\r\n        if (!comment.txt) return;\r\n        comment.id = makeId();\r\n        comment.createdAt = Date.now();\r\n        comment.byMember = this.props.loggedInUser;\r\n        this.setState(prevState => ({ card: { ...prevState.card, comments: [comment, ...prevState.card.comments] } }), () => {\r\n            this.props.saveCard(this.state.card)\r\n        })\r\n        card.activities.unshift({\r\n            id: makeId(), txt: `set card comment to ${comment.txt}`,\r\n            createdAt: Date.now(), byMember: this.props.loggedInUser\r\n        })\r\n        this.setState({ comment: { txt: '' } })\r\n\r\n\r\n    }\r\n\r\n    removeComment = (comment) => {\r\n        this.setState(prevState => ({\r\n            card: {\r\n                ...prevState.card,\r\n                comments: prevState.card.comments.filter(currComment => currComment.id !== comment.id)\r\n            }\r\n        }), () => {\r\n            this.props.saveCard(this.state.card)\r\n        })\r\n        this.state.card.activities.unshift({\r\n            id: makeId(), txt: `removed card comment ${comment.txt}`,\r\n            createdAt: Date.now(), byMember: this.props.loggedInUser\r\n        })\r\n    }\r\n\r\n    onEditTitle = ({ target }) => {\r\n        this.setState(prevState => ({ card: { ...prevState.card, title: target.value } }))\r\n    }\r\n\r\n    onEditTitleFinish = () => {\r\n        this.state.card.activities.unshift({\r\n            id: makeId(), txt: `edited card title to ${this.state.card.title}`,\r\n            createdAt: Date.now(), byMember: this.props.loggedInUser\r\n        })\r\n        this.props.saveCard(this.state.card)\r\n    }\r\n\r\n    onSaveDesc = (ev) => {\r\n        ev.preventDefault()\r\n        this.setState({ prevCardDesc: this.state.card.description }, () => {\r\n            this.state.card.activities.unshift({\r\n                id: makeId(), txt: `edited card description`,\r\n                createdAt: Date.now(), byMember: this.props.loggedInUser\r\n            })\r\n            this.props.saveCard(this.state.card)\r\n            this.onDescShown(false)\r\n        })\r\n    }\r\n\r\n    onAddLabel = (currLabel) => {\r\n        let currCard = this.getCurrCard();\r\n        const labelIdx = currCard.labels.findIndex(label => label.title === currLabel.title);\r\n\r\n        if (labelIdx === -1) {\r\n            this.state.card.activities.unshift({\r\n                id: makeId(), txt: `add label: ${currLabel.title} to the card`,\r\n                createdAt: Date.now(), byMember: this.props.loggedInUser\r\n            })\r\n            currCard.labels.push(currLabel)\r\n        }\r\n        else {\r\n            this.state.card.activities.unshift({\r\n                id: makeId(), txt: `removed label: ${currLabel.title} from the card`,\r\n                createdAt: Date.now(), byMember: this.props.loggedInUser\r\n            })\r\n            currCard.labels.splice(labelIdx, 1)\r\n        }\r\n        this.setState({ card: currCard }, () => {\r\n            this.props.saveCard(this.state.card)\r\n        })\r\n    }\r\n\r\n    onAddMember = (currMember) => {\r\n        let currCard = this.getCurrCard();\r\n        const memberIdx = currCard.members.findIndex(member => member._id === currMember._id);\r\n\r\n        if (memberIdx === -1) {\r\n            this.state.card.activities.unshift({\r\n                id: makeId(), txt: `add member:  ${currMember.username} to the card`,\r\n                createdAt: Date.now(), byMember: this.props.loggedInUser\r\n            })\r\n            currCard.members.push(currMember)\r\n        }\r\n        else {\r\n            this.state.card.activities.unshift({\r\n                id: makeId(), txt: `removed member:  ${currMember.username} from the card`,\r\n                createdAt: Date.now(), byMember: this.props.loggedInUser\r\n            })\r\n            currCard.members.splice(memberIdx, 1)\r\n        }\r\n        this.setState({ card: currCard }, () => {\r\n\r\n            this.props.saveCard(this.state.card)\r\n        })\r\n    }\r\n\r\n    getTwoChars(str) {\r\n        let twoChars;\r\n        if (str.split(' ').length !== 2) twoChars = str?.charAt(0)\r\n        else twoChars = str?.charAt(0) + str.split(' ')[1].charAt(0)\r\n        if (!twoChars) twoChars = ''\r\n        return twoChars\r\n    }\r\n\r\n    onAddChecklist = () => {\r\n        let newChecklist = {\r\n            id: makeId(),\r\n            title: 'Checklist',\r\n            todos: []\r\n        }\r\n        this.setState(prevState => ({\r\n            card: {\r\n                ...prevState.card,\r\n                checklists: [...prevState.card.checklists, newChecklist]\r\n            }\r\n        }), () => {\r\n            this.state.card.activities.unshift({\r\n                id: makeId(), txt: `added checklist to the card`,\r\n                createdAt: Date.now(), byMember: this.props.loggedInUser\r\n            })\r\n            this.props.saveCard(this.state.card)\r\n        })\r\n    }\r\n\r\n    onEditChecklistTitle = (checklistId, title) => {\r\n        this.setState(prevState => ({\r\n            card: {\r\n                ...prevState.card,\r\n                checklists: prevState.card.checklists.map(checklist => {\r\n                    if (checklist.id === checklistId) checklist.title = title\r\n                    return checklist\r\n                })\r\n            }\r\n        }), () => { this.props.saveCard(this.state.card) })\r\n    }\r\n\r\n    onAddTodo = (checklistId, newTodo) => {\r\n        this.setState(prevState => ({\r\n            card: {\r\n                ...prevState.card,\r\n                checklists: prevState.card.checklists.map(checklist => {\r\n                    if (checklist.id === checklistId) {\r\n                        if (!newTodo.id) {\r\n                            checklist.todos.push(newTodo)\r\n                            newTodo.id = makeId();\r\n                        } else {\r\n                            checklist.todos = checklist.todos.map(todo => {\r\n                                if (todo.id === newTodo.id) return newTodo\r\n                                return todo\r\n                            })\r\n                        }\r\n                    }\r\n                    return checklist\r\n                })\r\n            }\r\n        }), () => {\r\n            this.state.card.activities.unshift({\r\n                id: makeId(), txt: `added todo ${newTodo.title} to the card`,\r\n                createdAt: Date.now(), byMember: this.props.loggedInUser\r\n            })\r\n            this.props.saveCard(this.state.card)\r\n        })\r\n    }\r\n\r\n    onRemoveTodo = (checklistId, todo) => {\r\n        this.setState(prevState => ({\r\n            card: {\r\n                ...prevState.card,\r\n                checklists: prevState.card.checklists.map(checklist => {\r\n                    if (checklist.id === checklistId) {\r\n                        checklist.todos = checklist.todos.filter(currTodo => currTodo.id !== todo.id)\r\n                    }\r\n                    return checklist\r\n                })\r\n            }\r\n        }), () => {\r\n            this.state.card.activities.unshift({\r\n                id: makeId(), txt: `removed todo ${todo.title} from the card`,\r\n                createdAt: Date.now(), byMember: this.props.loggedInUser\r\n            })\r\n            this.props.saveCard(this.state.card)\r\n        })\r\n    }\r\n\r\n    onRemoveChecklist = (checklist) => {\r\n        this.setState(prevState => ({\r\n            card: {\r\n                ...prevState.card,\r\n                checklists: prevState.card.checklists.filter(currChecklist => currChecklist.id !== checklist.id)\r\n            }\r\n        }), () => {\r\n            this.state.card.activities.unshift({\r\n                id: makeId(), txt: `removed checklist ${checklist.title} from the card`,\r\n                createdAt: Date.now(), byMember: this.props.loggedInUser\r\n            })\r\n            this.props.saveCard(this.state.card)\r\n        })\r\n    }\r\n\r\n\r\n    onToggleAction = (action) => {\r\n        console.log('action', action);\r\n\r\n        let actions = this.state.isShown;\r\n        for (const key in actions) {\r\n            if (key !== action) {\r\n                actions[key] = false;\r\n            }\r\n        }\r\n        actions[action] = !actions[action];\r\n        this.setState({ isShown: actions });\r\n    }\r\n\r\n    onOpenUpload = () => {\r\n        this.inputElement.click();\r\n    }\r\n\r\n    onUploadImg = async ev => {\r\n        this.setState({ isUploadImg: true })\r\n        const imgUrl = await uploadImg(ev)\r\n        this.setState({ isUploadImg: false, isFinishUpload: true })\r\n        this.setState(prevState => ({ card: { ...prevState.card, imgUrl } }), () => {\r\n            this.state.card.activities.unshift({\r\n                id: makeId(), txt: `uploaded image to the card`,\r\n                createdAt: Date.now(), byMember: this.props.loggedInUser\r\n            })\r\n            this.props.saveCard(this.state.card)\r\n        })\r\n    }\r\n\r\n    onRemoveImg = () => {\r\n        this.setState(prevState => ({ card: { ...prevState.card, imgUrl: null } }), () => {\r\n            this.state.card.activities.unshift({\r\n                id: makeId(), txt: `removed image from the card`,\r\n                createdAt: Date.now(), byMember: this.props.loggedInUser\r\n            })\r\n            this.props.saveCard(this.state.card)\r\n        })\r\n    }\r\n\r\n    moveCardToStack = (stackDest) => {\r\n        this.props.currBoard.stacks.forEach(stack => {\r\n            let cardIdx = stack.cards.findIndex(card => card.id === this.state.card.id)\r\n            if (cardIdx !== -1) {\r\n                stack.cards.splice(cardIdx, 1);\r\n            }\r\n            if (stack.title === stackDest.title) {\r\n                stack.cards.push(this.state.card)\r\n            }\r\n        })\r\n        this.state.card.activities.unshift({\r\n            id: makeId(), txt: `moved card to stack ${stackDest.title}`,\r\n            createdAt: Date.now(), byMember: this.props.loggedInUser\r\n        })\r\n        this.props.save(this.props.currBoard)\r\n    }\r\n\r\n    onToggleRemoveCard = () => {\r\n        this.setState(prevState => ({ isOpenModalRemove: !prevState.isOpenModalRemove }))\r\n    }\r\n\r\n    onRemoveCard = () => {\r\n        const { currBoard, save, history, loggedInUser } = this.props\r\n        if (currBoard.isPublic) return;\r\n        currBoard.stacks.forEach(stack => {\r\n            let cardIdx = stack.cards.findIndex(card => {\r\n                return card.id === this.state.card.id\r\n            })\r\n            if (cardIdx !== -1) {\r\n                stack.cards.splice(cardIdx, 1);\r\n            }\r\n        })\r\n        currBoard.activities.unshift({ id: makeId(), txt: `has removed a card`, createdAt: Date.now(), byMember: loggedInUser })\r\n        save(this.props.currBoard);\r\n        history.push(`/boards/${this.props.currBoard._id}`);\r\n    }\r\n\r\n    onAddTimeEstimation = (timeEstimation) => {\r\n        timeEstimation.approve = false;\r\n        this.setState(prevState => ({ card: { ...prevState.card, timeEstimation } }), () => {\r\n            this.state.card.activities.unshift({\r\n                id: makeId(), txt: `added time estimation to card`,\r\n                createdAt: Date.now(), byMember: this.props.loggedInUser\r\n            })\r\n            this.props.saveCard(this.state.card)\r\n        })\r\n    }\r\n\r\n    removeCardEstimation = () => {\r\n        this.setState(prevState => ({ card: { ...prevState.card, timeEstimation: null } }), () => {\r\n            this.state.card.activities.unshift({\r\n                id: makeId(), txt: `removed time estimation from the card`,\r\n                createdAt: Date.now(), byMember: this.props.loggedInUser\r\n            })\r\n            this.props.saveCard(this.state.card)\r\n        })\r\n    }\r\n\r\n    onApproveTimeEstimation = () => {\r\n        this.setState(prevState => ({ card: { ...prevState.card, timeEstimation: { ...prevState.card.timeEstimation, approve: true } } }), () => {\r\n            this.state.card.activities.unshift({\r\n                id: makeId(), txt: `confirmed the time estimate`,\r\n                createdAt: Date.now(), byMember: this.props.loggedInUser\r\n            })\r\n            this.props.saveCard(this.state.card)\r\n        })\r\n    }\r\n\r\n    onFocusComment = () => {\r\n        this.setState(prevState => ({ isFocusComment: !prevState.isFocusComment }), () => {\r\n            this.setState({ comment: { txt: 'Comment on time estimation: ' } })\r\n        })\r\n    }\r\n\r\n    onChangeBgColor = (bgColor) => {\r\n        this.setState(prevState => ({ card: { ...prevState.card, bgColor } }), () => this.props.saveCard(this.state.card))\r\n        this.onToggleAction('bgColor')\r\n    }\r\n\r\n    onChagneLabelColor = (labelId, color) => {\r\n\r\n    }\r\n\r\n    render() {\r\n        const { card, isDescShown, comment, isShown, isUploadImg, isOpenModalRemove, isFocusComment } = this.state\r\n        const { onToggleAction } = this;\r\n\r\n        return ((!card) ? 'Loading...' :\r\n            <>\r\n                <div className=\"screen\" onMouseDown={this.onBackBoard} >\r\n                    <div className=\"modal-container shadow-drop-2-center card-details-modal\" onMouseDown={(ev) => ev.stopPropagation()}>\r\n                        <div className=\"modal-header flex align-center space-between\">\r\n                            <div className=\"task-title-container flex align-center\">\r\n                                <img className=\"img-icon\" src=\"/assets/img/task.png\" alt=\"\" />\r\n                                <input type=\"text\" name=\"title\" className=\"card-title\" onChange={this.onEditTitle} onBlur={this.onEditTitleFinish} value={card.title} />\r\n                            </div>\r\n                            <div className=\"close-modal flex justify-content align-center\" onClick={this.onBackBoard}><img className=\"img-icon\" src=\"/assets/img/close.png\" alt=\"\" /></div>\r\n                        </div>\r\n\r\n                        <div className=\"card-container flex\">\r\n                            <aside className=\"card-content\">\r\n                                {card.timeEstimation && <CardShowTimeEstimation card={card} onApproveTimeEstimation={this.onApproveTimeEstimation} onFocusComment={this.onFocusComment} />}\r\n                                <CardPreviewActions card={card} getTwoChars={this.getTwoChars} />\r\n                                <CardDescription description={card.description} onSaveDesc={this.onSaveDesc} handleChange={this.handleChange} isShown={this.onDescShown} isSubmitShown={isDescShown} />\r\n                                {(isUploadImg || card.imgUrl) && <CardImg card={card} isUploadImg={isUploadImg} onRemoveImg={this.onRemoveImg} />}\r\n                                {card.checklists && card.checklists.map(checklist => <CardChecklist key={checklist.id} checklist={checklist} addTodo={this.onAddTodo} onEditChecklistTitle={this.onEditChecklistTitle} onRemoveTodo={this.onRemoveTodo} onRemoveChecklist={this.onRemoveChecklist} />)}\r\n                                <CardComments isFocusComment={isFocusComment} comments={card.comments} onAddComment={this.onAddComment} handleChange={this.handleCommentChange} comment={comment.txt} getTwoChars={this.getTwoChars} removeComment={this.removeComment} />\r\n                                {card.activities && <CardActivity activities={card.activities} getTwoChars={this.getTwoChars} />}\r\n                            </aside>\r\n                            <aside className=\"card-actions\">\r\n                                <div className=\"actions-title\">Actions:</div>\r\n                                <ul className=\"actions-list clean-list\">\r\n                                    <Link title=\"Edit Card Members\" to=\"#\" onClick={() => onToggleAction('members')}><li><img src=\"/assets/img/user-icon.png\" alt=\"\" />Members</li></Link>\r\n                                    <Link title=\"Edit Card Labels\" to=\"#\" onClick={() => onToggleAction('label')}><li><img src=\"/assets/img/label-icon.png\" alt=\"\" />Labels</li></Link>\r\n                                    <Link title=\"Add Checklist\" to=\"#\" onClick={this.onAddChecklist}><li><img src=\"/assets/img/checklist-icon.png\" alt=\"\" />Checklist</li></Link>\r\n                                    <Link title=\"Set Due Date\" to=\"#\" onClick={() => onToggleAction('dueDate')}><li><img src=\"/assets/img/clock-icon.png\" alt=\"\" />Due Date</li></Link>\r\n                                    <Link title=\"Set Time Estimation\" to=\"#\" onClick={() => onToggleAction('timeEstimation')}><li><img src=\"/assets/img/clock-icon.png\" alt=\"\" />Time Estimation</li></Link>\r\n                                    <Link title=\"Add Image\" to=\"#\" onClick={() => this.onOpenUpload()}><li><img src=\"/assets/img/style.png\" alt=\"\" />Add Image</li></Link>\r\n                                    <Link title=\"Change Card Background\" to=\"#\" onClick={() => this.onToggleAction('bgColor')}><li><img src=\"/assets/img/palette.png\" alt=\"\" />Change Background</li></Link>\r\n                                    <input type=\"file\" ref={input => this.inputElement = input} name=\"imgUrl\" onChange={this.onUploadImg} hidden />\r\n                                    <Link title=\"Move Card\" to=\"#\" onClick={() => this.onToggleAction('move')}><li><img src=\"/assets/img/back.png\" className=\"img-rotate\" alt=\"\" />Move Card</li></Link>\r\n                                    <Link title=\"Remove Card\" to=\"#\" onClick={this.onToggleRemoveCard}><li className=\"li-last-child\"><img src=\"/assets/img/trash-white.png\" alt=\"\" />Remove Card</li></Link>\r\n\r\n                                    {isShown.dueDate && <ActionContainer isShown={isShown} onChange={this.onChangeDate} onSubmitDate={this.onSubmitDate} onToggleAction={onToggleAction} value={card.dueDate} removeDueDate={this.removeDueDate} />}\r\n                                    {isShown.label && <ActionContainer isShown={isShown} addLabel={this.onAddLabel} onToggleAction={onToggleAction} card={card} onChagneLabelColor={this.onChagneLabelColor} />}\r\n                                    {isShown.members && <ActionContainer board={this.props.currBoard} isShown={isShown} card={card} addMember={this.onAddMember} onToggleAction={onToggleAction} getCurrCard={this.getCurrCard} />}\r\n                                    {isShown.bgColor && <ActionContainer board={this.props.currBoard} isShown={isShown} card={card} onChangeBgColor={this.onChangeBgColor} onToggleAction={onToggleAction} getCurrCard={this.getCurrCard} />}\r\n                                    {isShown.move && <ActionContainer board={this.props.currBoard} isShown={isShown} card={card} onToggleAction={onToggleAction} moveCardToStack={this.moveCardToStack} />}\r\n                                    {isShown.timeEstimation && <ActionContainer board={this.props.currBoard} isShown={isShown} card={card} onToggleAction={onToggleAction} onAddTimeEstimation={this.onAddTimeEstimation} removeCardEstimation={this.removeCardEstimation} />}\r\n                                    {isShown.changeLabel && <ActionContainer isShown={isShown} onToggleAction={onToggleAction} card={card} />}\r\n\r\n                                </ul>\r\n                                {isOpenModalRemove && <RemoveCard onToggleRemoveCard={this.onToggleRemoveCard} onRemoveCard={this.onRemoveCard} />}\r\n\r\n                            </aside>\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    save,\r\n    loadBoard,\r\n    saveCard\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        currBoard: state.board.currBoard,\r\n        loggedInUser: state.user.loggedInUser\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CardDetails);","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport { loadUsers } from '../store/actions/userActions'\r\nimport OutsideClickHandler from 'react-outside-click-handler';\r\n\r\nclass AddMember extends Component {\r\n\r\n    state = {\r\n        filterBy: {\r\n            board: null,\r\n            q: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({ filterBy: { board: this.props.currBoard, q: '' } }, () => this.props.loadUsers(this.state.filterBy))\r\n    }\r\n\r\n    handleChange = ({ target }) => {\r\n        const field = target.name\r\n        const value = target.value\r\n\r\n        this.setState(prevState => ({ filterBy: { ...prevState.filterBy, [field]: value } }), () => {\r\n            this.props.loadUsers(this.state.filterBy)\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { users, onClose, onAddMember } = this.props\r\n        const { filterBy } = this.state\r\n\r\n        return ((!users) ? 'Loading...' :\r\n            <OutsideClickHandler onOutsideClick={() => onClose()} display={'contents'}>\r\n                <div className=\"add-member-container slide-bottom\">\r\n                    <div className=\"add-member-title flex space-between align-center\">\r\n                        Add Members\r\n                    <img src=\"/assets/img/close-white.png\" className=\"close-icon\" onClick={() => onClose()} alt=\"\" />\r\n                    </div>\r\n                    <input type=\"text\" placeholder=\"Enter user name\" autoComplete=\"off\" name=\"q\" value={filterBy.q} onChange={this.handleChange} className=\"add-member-input\" />\r\n                    <div className=\"members-list flex column\">\r\n                        {users.map((user, idx) => <Link to=\"#\" key={idx} onClick={() => onAddMember(user)} className=\"single-member\">{user.username}</Link>)}\r\n                    </div>\r\n                </div>\r\n            </OutsideClickHandler>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        users: state.user.users,\r\n        currBoard: state.board.currBoard\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    loadUsers\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddMember);","import React from 'react'\r\n\r\nexport default function BoardBackground(props) {\r\n\r\n    const bgColors = ['#fd9644', '#fc5c65', '#fed330', '#26de81', '#2bcbba', '#45aaf2', '#4b7bec', '#a55eea', '#122961']\r\n    const bgImgs = ['/assets/img/bg-beach.jpg', '/assets/img/bg-flowers.jpg',\r\n        '/assets/img/bg-sunset.jpg', '/assets/img/bg-view.jpg',\r\n        '/assets/img/bg-view2.jpg', '/assets/img/bg-view3.jpg',\r\n        '/assets/img/bg-view4.jpg', '/assets/img/bg-water.jpg', '/assets/img/bg-view5.jpg'];\r\n    const { type, onSetBg } = props\r\n\r\n    if (type === 'image') {\r\n        return (\r\n            <div className=\"backgrounds-container\">\r\n                {bgImgs.map((img, idx) => <div key={idx} className=\"background\" onClick={() => onSetBg(img, 'img')} style={{ backgroundImage: `url(${img})`, backgroundSize: '100%',backgroundPosition:'center' }}></div>)}\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div className=\"backgrounds-container\">\r\n                {bgColors.map((color, idx) => <div key={idx} className=\"background\" onClick={() => onSetBg(color, 'color')} style={{ backgroundColor: color }}></div>)}\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport BoardBackground from '../cmps/BoardBackground'\r\nimport { save, loadBoard } from '../store/actions/boardActions'\r\nimport { connect } from 'react-redux'\r\n\r\nclass BoardStyling extends Component {\r\n\r\n    state = {\r\n        bgChooseShown: ''\r\n    }\r\n\r\n    setBgShown = (bgChooseShown) => {\r\n        this.setState({ bgChooseShown })\r\n    }\r\n\r\n    render() {\r\n        const { bgChooseShown } = this.state\r\n        const { onSetBg } = this.props\r\n        return (\r\n            <div className=\"board-styling-container\">\r\n                <div className=\"board-styling-title flex align-center\">\r\n                    {bgChooseShown && <img src=\"/assets/img/back.png\" onClick={() => this.setBgShown('')} className=\"back small-icon\" alt=\"\" />}Board Styling\r\n                </div>\r\n                {!bgChooseShown && <button onClick={() => this.setBgShown('color')} className=\"background-choose color-choose\"><span>Background Color</span></button>}\r\n                {!bgChooseShown && <button onClick={() => this.setBgShown('image')} className=\"background-choose img-choose\"><span>Background Image</span></button>}\r\n                {bgChooseShown && <BoardBackground onSetBg={onSetBg} type={bgChooseShown} />}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    save,\r\n    loadBoard\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        currBoard: state.board.currBoard\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(BoardStyling);","import React from 'react'\r\nimport moment from 'moment'\r\n\r\nexport default function BoardActivities(props) {\r\n    const { board } = props\r\n    return (\r\n        <div className=\"activities-container\">\r\n            <h2 className=\"activities-title\">Activities</h2>\r\n            <ul className=\"activities clean-list\">\r\n                {board.activities.map((activity, idx) => {\r\n                    return <li key={idx}>\r\n                        <span className=\"bold\">{activity.byMember.username}</span> {activity.txt}\r\n                        <p className=\"activity-at\">{moment(activity.createdAt).fromNow()}</p>\r\n                    </li>\r\n                })}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function ReomveBoard(props) {\r\n    return (\r\n        <div className=\"remove-board-container\">\r\n            <div className=\"remove-board-title flex align-center space-between\">\r\n                Remove board\r\n                <img src=\"/assets/img/close.png\" className=\"close-icon\" onClick={() => props.onToggleRemoveBoard()} alt=\"\" />\r\n            </div>\r\n            <p>Are you sure you want to remove the board?</p>\r\n            <button className=\"btn btn-danger\" onClick={() => props.onRemoveBoard()}>Yes, remove!</button>\r\n        </div>\r\n    )\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { removeBoard } from '../store/actions/boardActions';\r\nimport { connect } from 'react-redux';\r\nimport OutsideClickHandler from 'react-outside-click-handler';\r\nimport BoardStyling from '../cmps/BoardStyling';\r\nimport BoardActivities from '../cmps/BoardActivities';\r\nimport RemoveBoard from '../cmps/RemoveBoard';\r\n\r\nclass BoardMenu extends Component {\r\n\r\n    state = {\r\n        isStylingShown: false,\r\n        isRemoveBoardShown: false\r\n    }\r\n\r\n    onToggleStyling = () => this.setState(prevState => ({ isStylingShown: !prevState.isStylingShown }))\r\n    onToggleRemoveBoard = () => this.setState(prevState => ({ isRemoveBoardShown: !prevState.isRemoveBoardShown }))\r\n    onRemoveBoard = async () => {\r\n        if (this.props.board.isPublic) return\r\n        await this.props.removeBoard(this.props.board._id)\r\n        this.props.history.push('/boards')\r\n    }\r\n\r\n    onToggleStatistics = () => {\r\n        this.props.onClose();\r\n        this.props.toggleShowStatistics();\r\n    }\r\n\r\n    onCloseMenu = () => {\r\n        this.props.onClose()\r\n        this.setState({ isStylingShown: false, isRemoveBoardShown: false })\r\n    }\r\n\r\n    render() {\r\n        const { onSetBg, board, isOpen, isShowingStatistics } = this.props\r\n        const { isStylingShown, isRemoveBoardShown } = this.state\r\n\r\n        return (\r\n            <div className={`board-menu-container ${isOpen ? 'board-menu-open' : ''}`}>\r\n\r\n                <div className=\"board-menu-title flex space-between align-center\">\r\n                    Board Managment\r\n                    <img src=\"/assets/img/close-white.png\" className=\"close-icon\" onClick={this.onCloseMenu} alt=\"\" />\r\n                </div>\r\n\r\n                <div className=\"board-menu-content\">\r\n                    {!isStylingShown && <ul className=\"board-menu-list clean-list\">\r\n                        <Link to=\"#\" onClick={this.onToggleStyling}><li><img src=\"/assets/img/style.png\" className=\"small-icon\" alt=\"\" />Board Styling</li></Link>\r\n                        <div onClick={() => this.onToggleStatistics()} ><li className={`${(isShowingStatistics) ? 'active-stats' : ''}`}><img src=\"/assets/img/stats.png\" className=\"small-icon\" alt=\"\" />Show Board Statistics</li></div>\r\n                        <Link to=\"#\" onClick={this.onToggleRemoveBoard}><li className=\"remove-board\"><img src=\"/assets/img/trash.png\" className=\"small-icon\" alt=\"\" />Remove Board</li></Link>\r\n                    </ul>}\r\n\r\n                    {isRemoveBoardShown && <RemoveBoard onToggleRemoveBoard={this.onToggleRemoveBoard} onRemoveBoard={this.onRemoveBoard} />}\r\n                    {!isStylingShown && <BoardActivities board={board} />}\r\n                    {isStylingShown && <BoardStyling onSetBg={onSetBg} onToggleStyling={this.onToggleStyling} />}\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    removeBoard\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(BoardMenu)","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport default function FilterCardsList(props) {\r\n    const { boardId } = props\r\n\r\n    function onClickCard(cardId) {\r\n        props.history.push(`/boards/${boardId}/card/${cardId}`)\r\n    }\r\n\r\n    return (\r\n        <div className=\"filter-cards-container\">\r\n            <div className=\"filter-scroll-cards\">\r\n                {props.cards.map((card, idx) => {\r\n                    return <div className=\"filter-card\" onClick={() => onClickCard(card.id)} key={idx}>\r\n                        {card.title}\r\n                    </div>\r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport FilterCardList from './FilterCardsList'\r\n\r\nclass BoardFilter extends Component {\r\n\r\n    state = {\r\n        filterBy: '',\r\n        cards: []\r\n    }\r\n\r\n    onSetFilterBy = ({ target }) => {\r\n        if (!target.value) return this.clearFilter()\r\n        this.setState({ filterBy: target.value }, () => this.filterBy(this.state.filterBy))\r\n    }\r\n\r\n    filterBy = () => {\r\n        const { filterBy } = this.state\r\n        const { currBoard } = this.props\r\n        const filterCards = currBoard.stacks.map(stack => {\r\n            return stack.cards.filter(card => {\r\n                return card.title.toLowerCase().includes(filterBy.toLowerCase())\r\n                    || card.description.toLowerCase().includes(filterBy.toLowerCase())\r\n            })\r\n        })\r\n        this.setState({ cards: [].concat(...filterCards) })\r\n    }\r\n\r\n    clearFilter = () => {\r\n        setTimeout(() => {\r\n            this.setState({ cards: [], filterBy: '' })\r\n        }, 100);\r\n    }\r\n\r\n    render() {\r\n        const { currBoard, history } = this.props\r\n        const { cards, filterBy } = this.state\r\n\r\n        return (\r\n            <>\r\n                <input className={`search-container flex align-center`} autoComplete=\"off\" name=\"filterBy\" value={filterBy} onBlur={this.clearFilter} onChange={this.onSetFilterBy} />\r\n                {cards.length > 0 && <FilterCardList cards={cards} history={history} boardId={currBoard._id} />}\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        currBoard: state.board.currBoard\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(BoardFilter);","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { save } from '../store/actions/boardActions'\r\nimport AddMember from './AddMember'\r\nimport BoardMenu from './BoardMenu'\r\nimport BoardFilter from './BoardFilter'\r\nimport { makeId } from '../services/utilService'\r\n\r\n\r\nclass BoardOptions extends Component {\r\n\r\n    state = {\r\n        isAddMemberShown: false,\r\n        isBoardMenuShown: false,\r\n        currBoard: null\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({ currBoard: this.props.currBoard })\r\n    }\r\n\r\n    getTwoChars(str) {\r\n        let twoChars;\r\n        if (str.split(' ').length !== 2) twoChars = str?.charAt(0)\r\n        else twoChars = str?.charAt(0) + str.split(' ')[1].charAt(0)\r\n        if (!twoChars) twoChars = ''\r\n        return twoChars\r\n    }\r\n\r\n    onToggleAddMember = () => this.setState(prevState => ({ isAddMemberShown: !prevState.isAddMemberShown }))\r\n    onToggleBoardMenu = () => this.setState(prevState => ({ isBoardMenuShown: !prevState.isBoardMenuShown }))\r\n\r\n    onAddMember = member => {\r\n        const { loggedInUser, currBoard } = this.props\r\n\r\n        currBoard.members.unshift(member)\r\n        currBoard.activities.unshift({ id: makeId(), txt: `added ${member.username} to the board`, createdAt: Date.now(), byMember: loggedInUser })\r\n        this.props.save(currBoard)\r\n        this.onToggleAddMember()\r\n    }\r\n\r\n    onRemoveMember = currMember => {\r\n        const { loggedInUser, currBoard } = this.props\r\n\r\n        const memberIdx = currBoard.members.findIndex(member => currMember._id === member._id);\r\n        currBoard.members.splice(memberIdx, 1)\r\n        currBoard.activities.unshift({ id: makeId(), txt: `removed ${currMember.username} from the board`, createdAt: Date.now(), byMember: loggedInUser })\r\n        this.props.save(currBoard)\r\n        this.setState({ currBoard })\r\n    }\r\n\r\n    render() {\r\n        const { board, onSetBg, history, toggleShowStatistics, isShowingStatistics } = this.props;\r\n        const { isAddMemberShown, isBoardMenuShown } = this.state;\r\n\r\n        return (\r\n            <div className={`board-options-container ${(isShowingStatistics) ? 'stats-margin' : ''}`}>\r\n                <div className=\"board-title\">{board.title}</div>\r\n\r\n                <div className=\"board-members flex\">\r\n                    {board.members.map((member, idx) => <div key={idx} className=\"member flex justify-center align-center\" style={{ backgroundImage: `url(${member.imgUrl})`, backgroundColor: member.bgColor }}><img onClick={() => this.onRemoveMember(member)} src=\"/assets/img/close.png\" className=\"remove-member\" alt=\"\" />{this.getTwoChars(member.fullname)}</div>)}\r\n                </div>\r\n\r\n                <div className=\"board-options flex\">\r\n                    <BoardFilter history={history} />\r\n\r\n                    <button className=\"option flex align-center\" onClick={() => this.onToggleAddMember()}>\r\n                        <img src=\"/assets/img/add-user.png\" alt=\"\" />\r\n                    </button>\r\n                    <button className=\"option flex align-center\" onClick={() => this.onToggleBoardMenu()}>\r\n                        <img src=\"/assets/img/menu.png\" alt=\"\" />\r\n                    </button>\r\n                </div>\r\n                {isAddMemberShown && <AddMember onClose={this.onToggleAddMember} onAddMember={this.onAddMember} />}\r\n                {<BoardMenu toggleShowStatistics={toggleShowStatistics} isOpen={isBoardMenuShown} history={history}\r\n                    onSetBg={onSetBg} board={board} onClose={this.onToggleBoardMenu} isShowingStatistics={isShowingStatistics} />}\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    save\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        currBoard: state.board.currBoard,\r\n        loggedInUser: state.user.loggedInUser\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(BoardOptions);","import React from 'react'\r\nimport { ResponsivePie } from '@nivo/pie';\r\n\r\nexport class StatisticsPie extends React.Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.statsTimeOut = null;\r\n    }\r\n\r\n    state = {\r\n        data: [{ id: '', label: '', value: 0, color: '#fff' }]\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.statsTimeOut = setTimeout(() => {\r\n\r\n            this.setState({ data: this.props.data });\r\n\r\n        }, 250)\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.data !== prevProps.data) {\r\n            this.setState({ data: this.props.data });\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.statsTimeOut) clearTimeout(this.statsTimeOut);\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        const getSliceColor = slice => slice.color;\r\n        const { data } = this.state;\r\n        return (\r\n            // <span className=\"pie-content\">\r\n            <ResponsivePie\r\n                data={data}\r\n                margin={{ top: 10, right: 80, bottom: 80, left: 80 }}\r\n                innerRadius={0.7}\r\n                padAngle={0}\r\n                cornerRadius={5}\r\n                colors={getSliceColor}\r\n                borderWidth={2}\r\n                borderColor={{ from: 'color', modifiers: [['darker', 0.2]] }}\r\n                radialLabelsSkipAngle={10}\r\n                radialLabelsTextXOffset={6}\r\n                radialLabelsTextColor={getSliceColor}\r\n                radialLabelsLinkOffset={-20}\r\n                radialLabelsLinkDiagonalLength={16}\r\n                radialLabelsLinkHorizontalLength={24}\r\n                radialLabelsLinkStrokeWidth={1}\r\n                radialLabelsLinkColor={{ from: 'color' }}\r\n                slicesLabelsSkipAngle={10}\r\n                slicesLabelsTextColor=\"#333333\"\r\n                animate={true}\r\n                motionStiffness={90}\r\n                motionDamping={15}\r\n                theme={{\r\n\r\n                    fontFamily: 'openSansBold',\r\n                    fontSize: 14,\r\n                }}\r\n                legends={[\r\n                    // {\r\n                    //     anchor: 'bottom',\r\n                    //     direction: 'row',\r\n                    //     translateY: 56,\r\n                    //     itemWidth: 50,\r\n                    //     itemHeight: 18,\r\n                    //     itemTextColor: '#999',\r\n                    //     symbolSize: 18,\r\n                    //     symbolShape: 'circle',\r\n                    //     effects: [\r\n                    //         {\r\n                    //             on: 'hover',\r\n                    //             style: {\r\n                    //                 itemTextColor: '#000'\r\n                    //             }\r\n                    //         }\r\n                    //     ]\r\n                    // }\r\n                ]}\r\n\r\n            />\r\n            /* </span> */\r\n        )\r\n\r\n    }\r\n\r\n};","import React from 'react'\r\nimport { ResponsiveBar } from '@nivo/bar'\r\nimport { getRandomColor } from '../services/utilService';\r\n\r\nexport class StatisticsBar extends React.Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.statsTimeOut = null;\r\n    }\r\n\r\n    state = {\r\n        data: [{ member: '', Tasks: 0, 'Done Tasks': 0 }]\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.statsTimeOut = setTimeout(() => {\r\n\r\n            this.setState({ data: this.props.data });\r\n\r\n        }, 250)\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.data !== prevProps.data) {\r\n            this.setState({ data: this.props.data });\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.statsTimeOut) clearTimeout(this.statsTimeOut);\r\n    }\r\n\r\n    render() {\r\n\r\n        const getUserColor = user => {\r\n            // console.log(user);\r\n            return (user.id === 'Done Tasks') ? '#525252' : (user.color) ? user.color : '#fed330';\r\n        }\r\n\r\n        const { data } = this.state;\r\n        return (\r\n\r\n            <ResponsiveBar\r\n                data={data}\r\n                keys={['Tasks', 'Done Tasks']}\r\n                indexBy=\"member\"\r\n                margin={{ top: 10, right: 130, bottom: 50, left: 60 }}\r\n                padding={0.3}\r\n                colors={getUserColor}\r\n                borderColor={{ from: 'color', modifiers: [['darker', 1.6]] }}\r\n                axisTop={null}\r\n                axisRight={null}\r\n                axisBottom={{\r\n                    tickSize: 5,\r\n                    tickPadding: 5,\r\n                    tickRotation: 0,\r\n                    legend: 'Users',\r\n                    legendPosition: 'middle',\r\n                    legendOffset: 40\r\n                }}\r\n                axisLeft={{\r\n                    tickSize: 5,\r\n                    tickPadding: 5,\r\n                    tickRotation: 0,\r\n                    legend: 'Tasks',\r\n                    legendPosition: 'middle',\r\n                    legendOffset: -40\r\n                }}\r\n                labelSkipWidth={12}\r\n                labelSkipHeight={12}\r\n                labelTextColor={{ from: 'color', modifiers: [['darker', 1.6]] }}\r\n                legends={[\r\n                    {\r\n                        dataFrom: \"keys\",\r\n                        anchor: 'bottom-right',\r\n                        direction: 'column',\r\n                        justify: false,\r\n                        translateX: 120,\r\n                        translateY: 0,\r\n                        itemsSpacing: 2,\r\n                        itemWidth: 100,\r\n                        itemHeight: 20,\r\n                        itemDirection: 'left-to-right',\r\n                        itemOpacity: 0.85,\r\n                        symbolSize: 20,\r\n                        effects: [\r\n                            {\r\n                                on: 'hover',\r\n                                style: {\r\n                                    itemOpacity: 1\r\n                                }\r\n                            }\r\n                        ]\r\n                    }\r\n                ]}\r\n                animate={true}\r\n                motionStiffness={90}\r\n                motionDamping={15}\r\n                theme={{\r\n                    axis: {\r\n                        legend: {\r\n                            text: {\r\n                                fontFamily: 'openSansBold',\r\n                                fontSize: 14\r\n                            }\r\n                        },\r\n                        ticks: {\r\n                            text: {\r\n                                fontFamily: 'openSans',\r\n                                fontSize: 14\r\n                            }\r\n                        }\r\n                    },\r\n                    labels: {\r\n                        text: {\r\n                            fontFamily: 'openSansBold',\r\n                            fontSize: 14,\r\n                            color: '#fff'\r\n                        },\r\n                        \r\n                    },\r\n                    legends: {\r\n                        text: {\r\n                            fontFamily: 'openSans',\r\n                            fontSize: 14\r\n                        }\r\n\r\n                    }\r\n\r\n                }}\r\n            />\r\n\r\n\r\n        )\r\n    }\r\n};","import React from 'react'\r\n\r\nexport function StatisticsInfoBlock(props) {\r\n\r\n    const { info, type } = props;\r\n    return (\r\n        <span className=\"stat-info-block flex align-center justify-center\">\r\n            <div className=\"stat-info-img flex align-center justify-center\">\r\n                <img className={`stat-img ${type}`} src={`/assets/img/${type}.png`} alt=\"\" />\r\n            </div>\r\n            <div className=\"stat-info-details flex column align-center justify-content\">\r\n\r\n                <p className={`stats-info-p ${(type === 'createdBy') ? 'first-stat-info' : '' }`}>{info}</p>\r\n                <p className=\"secondary\">{(type === 'createdBy') ? 'created by' : type}</p>\r\n            </div>\r\n        </span>\r\n    );\r\n};","import React from 'react'\r\n\r\nimport { save, loadBoard } from '../store/actions/boardActions'\r\nimport { connect } from 'react-redux'\r\nimport { StatisticsPie } from '../cmps/StatisticsPie';\r\nimport { StatisticsBar } from '../cmps/StatisticsBar';\r\nimport { StatisticsInfoBlock } from '../cmps/StatisticsInfoBlock';\r\nimport moment from 'moment'\r\n\r\nclass BoardStatistics extends React.Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.elStats = React.createRef();\r\n        this.statsTimeOut = null;\r\n        this.boardStats = null;\r\n    }\r\n\r\n    state = {\r\n        board: {},\r\n        currView: 'byUsers',\r\n        cardCount: -1,\r\n        boardStats: null\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        if (this.props.currBoard) {\r\n            this.statsTimeOut = setTimeout(() => {\r\n                const boardStats = this.getBoardStats(this.props.currBoard);\r\n                this.setState({ board: this.props.currBoard, boardStats }, () => {\r\n                });\r\n            }, 250)\r\n        }\r\n\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.currBoard !== prevProps.currBoard) {\r\n            const boardStats = this.getBoardStats(this.props.currBoard);\r\n            this.setState({ board: this.props.currBoard, boardStats });\r\n        }\r\n\r\n\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.statsTimeOut) clearTimeout(this.statsTimeOut);\r\n    }\r\n\r\n\r\n    handleChange = ({ target }) => {\r\n        const field = target.name\r\n        const value = target.value\r\n\r\n        this.setState(prevState => ({ card: { ...prevState.card, [field]: value } }))\r\n    }\r\n\r\n    getStatsByLabels = (board) => {\r\n\r\n        let labels = {};\r\n\r\n        board.stacks.forEach((stack) => {\r\n            stack.cards.forEach((card) => {\r\n                card.labels.forEach((label) => {\r\n                    if (labels[label.title]) {\r\n                        labels[label.title].count += 1;\r\n                    } else {\r\n                        labels[label.title] = { count: 1, color: label.color };\r\n                    }\r\n                })\r\n\r\n            })\r\n        })\r\n        let labelStatsData = Object.keys(labels).map((labelTitle) => {\r\n            const labelInfo = labels[labelTitle];\r\n            return ({\r\n                id: labelTitle,\r\n                label: labelTitle,\r\n                value: labelInfo.count,\r\n                color: labelInfo.color\r\n            });\r\n        })\r\n\r\n        return labelStatsData;\r\n    }\r\n\r\n    getStatsByUsers = (board) => {\r\n\r\n        let users = {};\r\n\r\n        board.stacks.forEach((stack) => {\r\n            stack.cards.forEach((card) => {\r\n\r\n                if (card.members.length) {\r\n                    card.members.forEach(member => {\r\n\r\n                        if (!users[member.username]) users[member.username] = { tasks: 0, doneTasks: 0, color: member.bgColor };\r\n\r\n                        let isDone = card.labels.some((label) => {\r\n                            return label.title === 'done';\r\n                        })\r\n\r\n                        users[member.username][(isDone) ? 'doneTasks' : 'tasks'] += 1;\r\n                    })\r\n\r\n                }\r\n            })\r\n        })\r\n        let userStatsData = Object.keys(users).map((username) => {\r\n            const userInfo = users[username];\r\n            return ({\r\n                member: username,\r\n                Tasks: userInfo.tasks - userInfo.doneTasks,\r\n                'Done Tasks': userInfo.doneTasks,\r\n                color: userInfo.color\r\n            });\r\n        })\r\n        return userStatsData;\r\n    }\r\n\r\n    getStatsByDueDates = (board) => {\r\n\r\n        let workload = { 'On Schedule': 0, Delayed: 0 };\r\n        let cardCount = 0;\r\n        board.stacks.forEach((stack) => {\r\n            cardCount += stack.cards.length;\r\n\r\n            stack.cards.forEach((card) => {\r\n                if (card.dueDate !== '') {\r\n                    if (+moment(card.dueDate).format('x') > Date.now()) workload['On Schedule'] += 1;\r\n                    else workload.Delayed += 1;\r\n                }\r\n\r\n            })\r\n        })\r\n\r\n        if (!cardCount) return null;\r\n\r\n        if (this.state.cardCount !== cardCount) {\r\n            this.setState({ cardCount });\r\n        }\r\n\r\n\r\n        let dueDatesStatsData = Object.keys(workload).map((type) => {\r\n\r\n            return ({\r\n                id: type,\r\n                label: type,\r\n                value: workload[type],\r\n                color: (type === 'Delayed') ? 'tomato' : 'lightgreen'\r\n            });\r\n        })\r\n\r\n        return dueDatesStatsData;\r\n    }\r\n\r\n    getBoardStats = (board) => {\r\n\r\n        if (!board.stacks) return null;\r\n\r\n        let stats;\r\n\r\n        let byLabels = this.getStatsByLabels(board);\r\n        let byUsers = this.getStatsByUsers(board);\r\n        let byDueDate = this.getStatsByDueDates(board);\r\n\r\n        if (byDueDate === null) this.setState({ isNoCardsBoard: true })\r\n        else {\r\n            if (this.state.isNoCardsBoard) this.setState({ isNoCardsBoard: false })\r\n        }\r\n        stats = { byLabels, byUsers, byDueDate };\r\n\r\n        console.log(stats);\r\n        return stats;\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        const { board, cardCount, boardStats } = this.state;\r\n        const { isShowingStatistics, toggleShowStatistics } = this.props;\r\n\r\n        return ((!board) ? '' :\r\n\r\n            <>\r\n                <div className=\"stats flex align-center justify-center\">\r\n\r\n                    <section className={`board-statistics modal-container flex column ${(isShowingStatistics) ? '' : 'board-statistics-closed'}`} onMouseDown={(ev) => ev.stopPropagation()}\r\n                        ref={this.elStats}>\r\n                        <header className=\"board-statistics-header-span flex align-baseline justify-center\">\r\n                            <div className=\"board-statistics-header-text flex align-baseline justify-center\">\r\n                                <p className=\"board-statistics-header\">{board.title}</p>\r\n                                <p className=\"secondary\">statistics</p>\r\n                            </div>\r\n                            <img className=\"stats-back-btn\" src=\"/assets/img/back.png\" alt=\"\" onClick={toggleShowStatistics} />\r\n                        </header>\r\n                        <small className=\"board-statistics-info flex align-center space-evenly wrap\">\r\n                            {(board.createdBy) ?\r\n                                <StatisticsInfoBlock info={moment(board.createdAt).format('MMM Do YYYY') + ` [${board.createdBy.username}]`} type='createdBy' />\r\n                                : null\r\n                            }\r\n                            {(board.members) ?\r\n                                <StatisticsInfoBlock info={board.members.length} type='members' />\r\n                                : null\r\n                            }\r\n                            {(board.stacks) ?\r\n                                <StatisticsInfoBlock info={board.stacks.length} type='stacks' />\r\n                                : null\r\n                            }\r\n                            {(board.stacks && cardCount) ?\r\n                                <StatisticsInfoBlock info={cardCount} type='cards' />\r\n                                : null\r\n                            }\r\n                            {(board.activities) ?\r\n                                <StatisticsInfoBlock info={board.activities.length} type='activities' />\r\n                                : null\r\n                            }\r\n\r\n\r\n                        </small>\r\n                        {(boardStats) ?\r\n                            <section className=\"board-statistics-content grid\">\r\n\r\n                                {(boardStats.byUsers) ?\r\n                                    < div className=\"stat-item by-users flex column justify-center align-center\">\r\n                                        <p className=\"board-stats-title\">Weekly Members Workload</p>\r\n                                        <StatisticsBar data={boardStats.byUsers} />\r\n\r\n                                    </div>\r\n                                    : null\r\n                                }\r\n                                {(boardStats.byLabels) ?\r\n                                    < div className=\"stat-item by-labels flex column justify-center align-center\">\r\n                                        <p className=\"board-stats-title\">Most Popular Labels</p>\r\n                                        <StatisticsPie data={boardStats.byLabels} type=\"labels\" />\r\n\r\n                                    </div>\r\n                                    : null\r\n                                }\r\n                                {(boardStats.byDueDate) ?\r\n                                    < div className=\"stat-item by-due-date flex column justify-center align-center\">\r\n                                        <p className=\"board-stats-title\">On-Time/Delayed Work</p>\r\n                                        <StatisticsPie data={boardStats.byDueDate} type=\"dueDate\" />\r\n\r\n                                    </div>\r\n                                    : null\r\n                                }\r\n\r\n                            </section>\r\n                            : null\r\n\r\n                        }\r\n\r\n                    </section>\r\n\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nconst mapDispatchToProps = {\r\n    save,\r\n    loadBoard\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        currBoard: state.board.currBoard,\r\n        loggedInUser: state.user.loggedInUser\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(BoardStatistics);","\r\n// a little function to help us with reordering the result\r\n\r\nexport function reorder (list, startIndex, endIndex) {\r\n    const result = Array.from(list);\r\n    const [removed] = result.splice(startIndex, 1);\r\n    result.splice(endIndex, 0, removed);\r\n    return result;\r\n};\r\n\r\n// a little function to help us with moving an item between droppables\r\n\r\nexport function move (source, destination, droppableSource, droppableDestination) {\r\n    const sourceClone = Array.from(source);\r\n    const destClone = Array.from(destination);\r\n    const [removed] = sourceClone.splice(droppableSource.index, 1);\r\n    destClone.splice(droppableDestination.index, 0, removed);\r\n\r\n    const result = {};\r\n    result[droppableSource.droppableId] = sourceClone;\r\n    result[droppableDestination.droppableId] = destClone;\r\n    return result;\r\n};","import React from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\nimport { loadBoard, save, setBoard, updateStackTitle } from '../store/actions/boardActions';\r\nimport AddContent from '../cmps/AddContent';\r\nimport { Route, Link } from 'react-router-dom';\r\nimport { CardPreview } from '../cmps/CardPreview.jsx';\r\nimport { Stack } from '../cmps/Stack.jsx';\r\nimport CardDetails from '../pages/CardDetails.jsx';\r\nimport BoardOptions from '../cmps/BoardOptions'\r\nimport socketService from '../services/socketService'\r\nimport BoardStatistics from '../pages/BoardStatistics'\r\nimport { makeId } from '../services/utilService';\r\nimport { reorder, move } from '../services/boardDetailsUtils';\r\nimport ActionContainer from '../cmps/ActionContainer';\r\n// import ScrollContainer from 'react-indiana-drag-scroll'\r\n\r\nclass BoardDetails extends React.Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.stackTitleFocus = [];\r\n    }\r\n\r\n    state = {\r\n        areLabelsOpen: false,\r\n        isShowingStatistics: false,\r\n        stackTitles: {},\r\n        stackMenus: {}\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (!this.props.loggedInUser) return this.props.history.push('/boards')\r\n        const { boardId } = this.props.match.params;\r\n\r\n        socketService.setup();\r\n        socketService.emit('setBoard', boardId);\r\n        socketService.on('loadBoard', this.setBoard)\r\n\r\n        this.props.loadBoard(boardId);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        const { stackTitles } = this.state;\r\n\r\n        if (prevProps.currBoard !== this.props.currBoard) {\r\n            // this.setState({ currBoard: this.props.currBoard });\r\n            document.body.style.backgroundImage = `url(/${this.props.currBoard.bg})`;\r\n            document.body.style.backgroundColor = this.props.currBoard.bg;\r\n        }\r\n\r\n        if (this.props.currBoard && this.props.currBoard.stacks.length &&\r\n            !Object.keys(stackTitles).length && stackTitles.constructor === Object) {\r\n            this.populateStacksInfo(this.props.currBoard);\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (!this.props.loggedInUser) return;\r\n        document.body.style = '';\r\n        socketService.off('loadBoard', this.setBoard);\r\n        socketService.terminate();\r\n    }\r\n\r\n    populateStacksInfo = (board) => {\r\n        let stackTitles = {};\r\n        let stackMenus = {};\r\n        board.stacks.forEach((stack) => {\r\n            stackTitles[stack.id] = stack.title;\r\n            stackMenus[stack.id] = false;\r\n        });\r\n        this.setState({ stackTitles, stackMenus });\r\n    }\r\n\r\n    setBoard = (currBoard) => this.props.setBoard(currBoard)\r\n\r\n    onToggleLabels = () => {\r\n\r\n        this.setState(({ areLabelsOpen }) => ({ areLabelsOpen: !areLabelsOpen }));\r\n    }\r\n\r\n    onEditStackTitle = ({ target }) => {\r\n        let currBoard = { ...this.props.currBoard };\r\n        this.setState({ stackTitles: { [currBoard.stacks[target.dataset.idx].id]: target.value } });\r\n    }\r\n\r\n    onNewStackTitle = ({ target }) => {\r\n        let currBoard = { ...this.props.currBoard };\r\n        const { stackTitles } = this.state;\r\n\r\n        currBoard.stacks[target.dataset.idx].title = stackTitles[currBoard.stacks[target.dataset.idx].id];\r\n        this.props.save(currBoard);\r\n    }\r\n\r\n    getItemStyle = (isDragging, draggableStyle) => {\r\n\r\n        return ({\r\n            // some basic styles to make the items look a bit nicer\r\n            ...draggableStyle,\r\n            // change background colour if dragging\r\n            background: isDragging ? 'rgb(219, 219, 219)' : '#ebecf0'\r\n        });\r\n    }\r\n\r\n    onStackRemove = (stackId) => {\r\n\r\n        // console.log(stackId);\r\n        let currBoard = { ...this.props.currBoard };\r\n        if (currBoard.isPublic) return;\r\n        let stackIdx = currBoard.stacks.findIndex(stack => {\r\n            return stack.id === stackId;\r\n        })\r\n\r\n        currBoard.stacks.splice(stackIdx, 1);\r\n        this.props.save(currBoard);\r\n    }\r\n\r\n    onStackAdd = (newStackTitle) => {\r\n\r\n        let currBoard = { ...this.props.currBoard };\r\n        let id = makeId();\r\n\r\n        currBoard.stacks.push({\r\n            bgColor: \"#fefefe\",\r\n            cards: [],\r\n            id,\r\n            title: newStackTitle,\r\n        });\r\n\r\n        let stackTitles = { ...this.state.stackTitles };\r\n        let stackMenus = { ...this.state.stackMenus };\r\n\r\n        stackTitles[id] = newStackTitle;\r\n        stackMenus[id] = false;\r\n        this.setState({ stackTitles, stackMenus })\r\n        this.props.save(currBoard);\r\n    }\r\n\r\n    onCardAdd = (newCardTitle, stackId) => {\r\n\r\n        let currBoard = { ...this.props.currBoard };\r\n        let stackIdx = currBoard.stacks.findIndex((stack) => {\r\n            return stackId === stack.id;\r\n        });\r\n        currBoard.stacks[stackIdx].cards.push({\r\n            id: makeId(),\r\n            title: newCardTitle,\r\n            description: \"\",\r\n            comments: [],\r\n            checklists: [],\r\n            members: [],\r\n            labels: [],\r\n            activities: [],\r\n            byMember: this.props.loggedInUser,\r\n            createdAt: Date.now(),\r\n            dueDate: '',\r\n            bgColor: 'white',\r\n            timeEstimation: ''\r\n        });\r\n\r\n        this.props.save(this.props.currBoard);\r\n    }\r\n\r\n    onDragEnd = (result) => {\r\n\r\n        const { loggedInUser, currBoard } = this.props\r\n        const { source, destination } = result;\r\n\r\n        // Dropped outside the list\r\n        if (!destination) {\r\n            return;\r\n        }\r\n\r\n        let stacks = [...currBoard.stacks];\r\n        const newState = { ...currBoard };\r\n\r\n        // Changed Stacks order\r\n        if ((source.droppableId === destination.droppableId) && source.droppableId === 'board') {\r\n            const items = reorder(stacks, source.index, destination.index);\r\n            newState.stacks = items;\r\n\r\n            const stackSourceTitle = currBoard.stacks[source.index].title;\r\n            const stackPlace = destination.index + 1\r\n            currBoard.activities.unshift({ id: makeId(), txt: `moved stack ${stackSourceTitle} to place number ${stackPlace}`, createdAt: Date.now(), byMember: loggedInUser })\r\n\r\n\r\n            // Changed Cards order\r\n        } else {\r\n            const sIndex = +source.droppableId;\r\n            const dIndex = +destination.droppableId;\r\n\r\n            // Changed Card index in current Stack\r\n            if (sIndex === dIndex) {\r\n                const items = reorder(stacks[sIndex].cards, source.index, destination.index);\r\n                newState.stacks[sIndex].cards = items;\r\n\r\n                // Changed Card between Stacks\r\n            } else {\r\n                const sourceTitle = currBoard.stacks[+source.droppableId].title\r\n                const destTitle = currBoard.stacks[+destination.droppableId].title\r\n                const cardMovedTitle = currBoard.stacks[+source.droppableId].cards[source.index].title\r\n                currBoard.activities.unshift({ id: makeId(), txt: `moved card ${cardMovedTitle} from ${sourceTitle} to ${destTitle}`, createdAt: Date.now(), byMember: loggedInUser })\r\n\r\n                const result = move(stacks[sIndex].cards, stacks[dIndex].cards, source, destination);\r\n                newState.stacks[sIndex].cards = result[sIndex];\r\n                newState.stacks[dIndex].cards = result[dIndex];\r\n            }\r\n        }\r\n        this.props.save(newState)\r\n    }\r\n\r\n    // onWheel = (e) => {\r\n    //     e.preventDefault()\r\n    //     var container = document.querySelector('.board-content')\r\n    //     var containerScrollPosition = document.querySelector('.board-content').scrollLeft\r\n    //     container.scrollTo({\r\n    //         top: 0,\r\n    //         left: containerScrollPosition + e.deltaY,\r\n    //         behaviour: 'smooth' //if you want smooth scrolling\r\n    //     })\r\n    // }\r\n\r\n    onStackTitleFocus = (index) => this.stackTitleFocus[index].focus();\r\n\r\n    onToggleAction = (action) => {\r\n\r\n        let actions = this.state.stackMenus;\r\n        for (const key in actions) {\r\n            if (key !== action) {\r\n                actions[key] = false;\r\n            }\r\n        }\r\n        actions[action] = !actions[action];\r\n        this.setState({ isShown: actions });\r\n    }\r\n\r\n    onSetBg = (bg, type) => {\r\n        if (type === 'img') {\r\n            const bgUrl = bg.slice(1, bg.length + 1)\r\n            document.body.style.backgroundImage = `url(/${bgUrl})`\r\n            document.body.style.backgroundColor = ''\r\n            this.props.currBoard.bg = bgUrl\r\n        } else {\r\n            document.body.style.backgroundImage = ''\r\n            document.body.style.backgroundColor = bg\r\n            this.props.currBoard.bg = bg\r\n        }\r\n        const { loggedInUser } = this.props\r\n        // @TODO: ACTIONS - ADD ACTIVITY!\r\n        this.props.currBoard.activities.unshift({ id: makeId(), txt: `has changed the board background`, createdAt: Date.now(), byMember: loggedInUser })\r\n        this.props.save(this.props.currBoard)\r\n    }\r\n\r\n    toggleShowStatistics = () => {\r\n        this.setState(prevState => ({ isShowingStatistics: !prevState.isShowingStatistics }));\r\n    }\r\n\r\n    render() {\r\n        const { history, currBoard } = this.props;\r\n        const { areLabelsOpen, stackTitles, isShowingStatistics, isShown } = this.state;\r\n\r\n        if (!currBoard) return 'Loading...'\r\n        // console.log(currBoard);\r\n        return (\r\n            <>\r\n                {/* Board Options bar */}\r\n                <BoardOptions isShowingStatistics={isShowingStatistics} history={history} board={currBoard} onSetBg={this.onSetBg} toggleShowStatistics={this.toggleShowStatistics} />\r\n                {/* Route to Card details */}\r\n                <Route component={CardDetails} path=\"/boards/:boardId/card/:cardId\" />\r\n\r\n                {/* Board content: showing stacks OR statistics */}\r\n                <section className=\"board-content flex column align-start space-between\">\r\n\r\n                    {(isShowingStatistics)\r\n                        ?\r\n                        <BoardStatistics isShowingStatistics={isShowingStatistics} toggleShowStatistics={this.toggleShowStatistics} />\r\n                        : (currBoard && stackTitles)\r\n                            ?\r\n                            // this.stacks(areLabelsOpen, stackTitles) \r\n                            <span className=\"stacks-section flex\">\r\n                                <DragDropContext\r\n                                    onDragEnd={this.onDragEnd}\r\n                                >\r\n                                    <Droppable droppableId=\"board\" isCombineEnabled={false} type=\"STACK\" direction='horizontal'>\r\n                                        {(provided, snapshot) => (\r\n                                            <div\r\n                                                ref={provided.innerRef}\r\n                                                {...provided.droppableProps}\r\n                                                className=\"stacks-content flex\"\r\n                                            >\r\n\r\n                                                {(currBoard.stacks.length) ? currBoard.stacks.map((stack, index) => (\r\n                                                    <Draggable key={stack.id}\r\n                                                        draggableId={stack.id} index={index} type=\"STACK\" >\r\n\r\n                                                        {(provided, snapshot) => {\r\n                                                            return (\r\n                                                                <div\r\n                                                                    ref={provided.innerRef}\r\n                                                                    {...provided.draggableProps}\r\n                                                                    style={{\r\n                                                                        ...this.getItemStyle(\r\n                                                                            snapshot.isDragging,\r\n                                                                            provided.draggableProps.style,\r\n                                                                        ),\r\n                                                                        width: 250,\r\n\r\n                                                                    }}\r\n                                                                    className=\"stack-content flex column\"\r\n                                                                >\r\n                                                                    <div className=\"stack-header flex space-between\" {...provided.dragHandleProps}>\r\n                                                                        <input autoComplete=\"off\" type=\"text\" name=\"title\" className=\"stack-title-input\" data-idx={index} onChange={this.onEditStackTitle}\r\n                                                                            value={stackTitles[stack.id]} onClick={() => this.onStackTitleFocus(index)} ref={input => this.stackTitleFocus[index] = input}\r\n                                                                            onBlur={this.onNewStackTitle} />\r\n                                                                        <Link title=\"Options\" to=\"#\" onClick={() => this.onToggleAction(stack.id)}><button className=\"stack-header-menu\">. . .</button></Link>\r\n                                                                        {(isShown && isShown[stack.id]) && <ActionContainer onStackRemove={this.onStackRemove} stackInfo={{ id: stack.id, title: stack.title }} isShown={{ stack: true }}\r\n                                                                            onToggleAction={this.onToggleAction} />}\r\n                                                                    </div>\r\n\r\n                                                                    {/* <p className=\"stack-title flex align-center\"  ></p> */}\r\n\r\n                                                                    <Droppable key={index}\r\n                                                                        droppableId={`${index}`} isCombineEnabled={false}\r\n                                                                        type=\"CARD\">\r\n                                                                        {(provided, snapshot) => (\r\n                                                                            <Stack\r\n                                                                                innerRef={provided.innerRef}\r\n                                                                                provided={provided}\r\n                                                                            >\r\n\r\n                                                                                {stack.cards.map((card, index) => (\r\n                                                                                    <Draggable\r\n                                                                                        key={card.id}\r\n                                                                                        draggableId={card.id}\r\n                                                                                        index={index}\r\n                                                                                        type=\"CARD\"\r\n                                                                                    >\r\n                                                                                        {(provided, snapshot) => (\r\n\r\n                                                                                            <span>\r\n                                                                                                <CardPreview\r\n                                                                                                    title={card.title}\r\n                                                                                                    innerRef={provided.innerRef}\r\n                                                                                                    provided={provided}\r\n                                                                                                    card={card}\r\n                                                                                                    labelsOpen={areLabelsOpen}\r\n                                                                                                    onToggleLabels={this.onToggleLabels}\r\n                                                                                                    link={`/boards/${currBoard._id}/card/${card.id}`}\r\n                                                                                                    style={{\r\n                                                                                                        ...this.getItemStyle(\r\n                                                                                                            snapshot.isDragging,\r\n                                                                                                            provided.draggableProps.style,\r\n                                                                                                        ),\r\n                                                                                                        background: card.bgColor,\r\n\r\n                                                                                                    }}\r\n                                                                                                    history={this.props.history}\r\n                                                                                                >\r\n                                                                                                </CardPreview>\r\n                                                                                            </span>\r\n\r\n                                                                                        )}\r\n                                                                                    </Draggable>\r\n                                                                                ))}\r\n                                                                                {provided.placeholder}\r\n                                                                            </Stack>\r\n                                                                        )}\r\n                                                                    </Droppable>\r\n                                                                    <AddContent type=\"card\" onCardAdd={this.onCardAdd} itemId={stack.id} />\r\n                                                                </div>\r\n                                                            )\r\n                                                        }}\r\n                                                    </Draggable>\r\n                                                )) : null}\r\n                                                {provided.placeholder}\r\n                                            </div>\r\n                                        )}\r\n                                    </Droppable>\r\n                                    <div className=\"add-stack-container\">\r\n                                        <AddContent type=\"stack\" onStackAdd={this.onStackAdd} />\r\n                                    </div>\r\n                                </DragDropContext>\r\n                            </span>\r\n                            : null\r\n                    }\r\n\r\n                </section>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        currBoard: state.board.currBoard,\r\n        loggedInUser: state.user.loggedInUser\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    loadBoard,\r\n    save,\r\n    setBoard,\r\n    updateStackTitle\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(BoardDetails)\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { update, login } from '../store/actions/userActions';\r\nimport { uploadImg } from '../services/cloudinaryService'\r\n\r\nclass UserProfile extends Component {\r\n\r\n    state = {\r\n        user: null,\r\n        msg: '',\r\n        isUploadImg: false,\r\n        isFinishUpload: false,\r\n        isErrorMsg: false\r\n    }\r\n\r\n    componentDidMount() {\r\n        const { loggedInUser, history } = this.props\r\n        if (!loggedInUser) history.push('/login')\r\n        this.setState({ user: loggedInUser })\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearTimeout(this.timeoutFinishUpload)\r\n    }\r\n\r\n    onUploadImg = async ev => {\r\n        this.setState({ isUploadImg: true })\r\n        const imgUrl = await uploadImg(ev)\r\n        this.setState({ isUploadImg: false, isFinishUpload: true })\r\n        this.timeoutFinishUpload = setTimeout(() => {\r\n            this.setState({ isFinishUpload: false })\r\n        }, 2500);\r\n        this.setState(prevState => ({ user: { ...prevState.user, imgUrl } }))\r\n    }\r\n\r\n    handleChange = ({ target }) => {\r\n        const field = target.name\r\n        const value = target.value\r\n\r\n        this.setState(prevState => ({ user: { ...prevState.user, [field]: value } }))\r\n    }\r\n\r\n    onUpdateUser = async ev => {\r\n        ev.preventDefault();\r\n        const { username, password, fullname, imgUrl, confirmPassword } = this.state.user\r\n\r\n        if (!username || !password || !fullname) return this.setState({ msg: 'Please enter username, password and full name', isErrorMsg: true });\r\n        if (!password && !confirmPassword) return this.setState({ msg: 'Please enter username and password', isErrorMsg: true })\r\n        if (password !== confirmPassword) return this.setState({ msg: 'Passwords don\\'t match!', isErrorMsg: true })\r\n\r\n        const user = { _id: this.props.loggedInUser._id, username, password, fullname, imgUrl }\r\n        try {\r\n            await this.props.update(user)\r\n            user._id = this.props.loggedInUser._id\r\n            await this.props.login(user)\r\n        } catch (err) {\r\n            return this.setState({ isErrorMsg: true, msg: err })\r\n        }\r\n\r\n        return this.setState({ isErrorMsg: false, msg: 'User Updated Successfully' }, () => {\r\n            setTimeout(() => {\r\n                this.props.history.go(0)\r\n                this.setState({ msg: '' })\r\n            }, 2000);\r\n        })\r\n    }\r\n\r\n    onOpenUpload = () => {\r\n        this.inputElement.click();\r\n    }\r\n\r\n    render() {\r\n        const { user, msg, isErrorMsg, isUploadImg } = this.state\r\n\r\n        const msgStyle = (isErrorMsg) ? { backgroundColor: '#dd1739' } : { backgroundColor: '#17d965' }\r\n\r\n        if (!user) return 'Loading...'\r\n        return (\r\n            <div className=\"container flex justify-center\">\r\n                <div className=\"form-container\">\r\n                    <div className=\"user-profile-container flex align-start\">\r\n                        <div className=\"user-content\">\r\n                            <h2 className=\"user-profile-title flex align-center\">\r\n                                <img src=\"assets/img/user-icon.png\" className=\"user-icon\" alt=\"\" /> {this.props.loggedInUser.fullname}\r\n                            </h2>\r\n                            <form onSubmit={this.onUpdateUser} className=\"user-profile-form flex column align-start\">\r\n                                <input type=\"text\" placeholder=\"User name\" autoComplete=\"off\" onChange={this.handleChange} className=\"profile-input input\" name=\"username\" value={user.username} />\r\n                                <input type=\"text\" placeholder=\"Full name\" autoComplete=\"off\" onChange={this.handleChange} className=\"profile-input input\" name=\"fullname\" value={user.fullname} />\r\n                                <input type=\"password\" placeholder=\"Password\" autoComplete=\"off\" onChange={this.handleChange} className=\"profile-input input\" name=\"password\" />\r\n                                <input type=\"password\" placeholder=\"Confirm Password\" autoComplete=\"off\" onChange={this.handleChange} className=\"profile-input input\" name=\"confirmPassword\" />\r\n                                <input type=\"file\" name=\"imgUrl\" ref={input => this.inputElement = input} onChange={this.onUploadImg} hidden />\r\n                                <div className=\"img-submit-container flex space-between align-start\">\r\n                                    <span className=\"upload-img\" onClick={() => this.onOpenUpload()}>Upload Profile Image</span>\r\n                                    <button className={`btn btn-success ${isUploadImg ? 'disable' : ''}`} disabled={isUploadImg}>Save Changes</button>\r\n                                </div>\r\n\r\n                            </form>\r\n                            {msg && <div style={msgStyle} className=\"user-msg flex align-center space-between\">{msg}<img src=\"assets/img/error-white.png\" className=\"small-icon\" alt=\"\" /></div>}\r\n                        </div>\r\n                        <div className=\"user-img\">\r\n                            <img src={user.imgUrl} alt=\"\" />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        loggedInUser: state.user.loggedInUser\r\n    };\r\n};\r\nconst mapDispatchToProps = {\r\n    update,\r\n    login\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UserProfile);","import React, { Component } from 'react'\r\nimport { Link, NavLink } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\nimport { logout, signup } from '../store/actions/userActions';\r\nimport { getRandomColor, makeId } from '../services/utilService'\r\n\r\n\r\nclass NavBar extends Component {\r\n\r\n    state = {\r\n        isScroll: false,\r\n        isMenuOpen: false\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.scrollEvent()\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.document.removeEventListener('scroll', this.handleScroll)\r\n    }\r\n\r\n    scrollEvent() {\r\n        window.document.addEventListener('scroll', this.handleScroll)\r\n    }\r\n\r\n    get isHomepage() {\r\n        return this.props.location.pathname === '/'\r\n    }\r\n\r\n    handleScroll = () => {\r\n        let body = document.body\r\n        let theDocument;\r\n        theDocument = document.documentElement\r\n        theDocument = (theDocument.clientHeight) ? theDocument : body;\r\n\r\n        if (theDocument.scrollTop === 0) this.setState({ isScroll: false })\r\n        else this.setState({ isScroll: true })\r\n    }\r\n\r\n    onLogout = async () => {\r\n        this.toggleMenu()\r\n        await this.props.logout()\r\n\r\n        const userCred = {\r\n            username: `Guest-${makeId(4)}`,\r\n            password: '123456',\r\n            fullname: `Guesty McGuest-${makeId(4)}`,\r\n            imgUrl: 'https://res.cloudinary.com/shaishar9/image/upload/v1590398852/tgfntq8ghkaxjpo9seqa.jpg',\r\n            isGuest: true,\r\n            bgColor: getRandomColor()\r\n        }\r\n        this.props.signup(userCred)\r\n    }\r\n\r\n    toggleMenu = () => {\r\n        this.setState(prevState => ({ isMenuOpen: !prevState.isMenuOpen }))\r\n    }\r\n\r\n    render() {\r\n        const user = this.props.loggedInUser\r\n        const { isMenuOpen, isScroll } = this.state\r\n\r\n        return (\r\n            <>\r\n                {isMenuOpen && <div className=\"screen main-nav-screen\" onClick={this.toggleMenu}></div>}\r\n                <div className={`nav-container ${(isScroll || !this.isHomepage) ? 'scrolled' : ''} ${(isMenuOpen) ? 'menu-open' : ''}`} style={(this.isHomepage) ? { marginTop: '10px' } : {}}>\r\n                    <div className={`${(this.isHomepage) ? 'container' : ''}`}>\r\n                        <div className=\"nav-content flex space-between align-center\">\r\n                            <Link to=\"/\"><h1 className=\"logo\"><span className=\"logo-we\">we</span>task</h1></Link>\r\n                            <ul className=\"main-nav clean-list flex\">\r\n                                <li className=\"quit-menu\"><button onClick={() => this.toggleMenu()}></button></li>\r\n                                <li><NavLink onClick={this.toggleMenu} exact to=\"/\">Home</NavLink></li>\r\n                                {user && <li><NavLink onClick={this.toggleMenu} to=\"/boards\">Boards</NavLink></li>}\r\n                                {user && <li><NavLink onClick={this.toggleMenu} to=\"/profile\">Profile</NavLink></li>}\r\n                                {user?.isGuest && <li><NavLink onClick={this.toggleMenu} to=\"/signup\">Signup</NavLink></li>}\r\n                                {user?.isGuest && <li><NavLink onClick={this.toggleMenu} to=\"/login\">Login</NavLink></li>}\r\n                                {!user?.isGuest && <li><Link to=\"/\" onClick={this.onLogout}>Logout</Link></li>}\r\n                            </ul>\r\n                            <button onClick={this.toggleMenu} className=\"btn-menu\"></button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        loggedInUser: state.user.loggedInUser\r\n    };\r\n};\r\nconst mapDispatchToProps = {\r\n    logout,\r\n    signup\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NavBar);","import React, { Component } from 'react'\r\nimport { Switch, Route } from 'react-router-dom'\r\nimport './style/global.scss';\r\nimport HomePage from './pages/HomePage'\r\nimport LoginSignup from './pages/LoginSignup'\r\nimport Boards from './pages/Boards'\r\nimport BoardDetails from './pages/BoardDetails'\r\nimport UserProfile from './pages/UserProfile'\r\nimport NavBar from './cmps/NavBar'\r\nimport { signup } from './store/actions/userActions';\r\nimport { connect } from 'react-redux'\r\nimport { makeId, getRandomColor } from './services/utilService'\r\n\r\n\r\nclass App extends Component {\r\n\r\n  componentDidMount() {\r\n    if (this.props.loggedInUser) return;\r\n    this.guestSignup()\r\n  }\r\n\r\n  guestSignup() {\r\n    const userCred = {\r\n      username: `Guest-${makeId(4)}`,\r\n      password: '123456',\r\n      fullname: `Guesty McGuest-${makeId(4)}`,\r\n      imgUrl: 'https://res.cloudinary.com/shaishar9/image/upload/v1590398852/tgfntq8ghkaxjpo9seqa.jpg',\r\n      isGuest: true,\r\n      bgColor: getRandomColor()\r\n    }\r\n    this.props.signup(userCred)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"app\">\r\n        <Route component={NavBar} path=\"/\" />\r\n        <main className=\"main-content top-p\">\r\n          <Switch>\r\n            <Route component={UserProfile} path=\"/user/:userId\" />\r\n            <Route component={BoardDetails} path=\"/boards/:boardId\" />\r\n            <Route component={Boards} path=\"/boards\" />\r\n            <Route component={UserProfile} path=\"/profile\" />\r\n            <Route component={LoginSignup} path=\"/login\" />\r\n            <Route component={LoginSignup} path=\"/signup\" />\r\n            <Route component={HomePage} path=\"/\" />\r\n          </Switch>\r\n        </main>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    loggedInUser: state.user.loggedInUser\r\n  };\r\n};\r\nconst mapDispatchToProps = {\r\n  signup\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","let localLoggedinUser = null;\r\nif (sessionStorage.user) localLoggedinUser = JSON.parse(sessionStorage.user);\r\n\r\nconst initialState = {\r\n    loggedInUser: localLoggedinUser,\r\n    users: []\r\n};\r\n\r\nexport default function (state = initialState, action = {}) {\r\n    switch (action.type) {\r\n        case 'SET_USER':\r\n            return {\r\n                ...state,\r\n                loggedInUser: action.user\r\n            }\r\n        case 'LOAD_USERS':\r\n            return {\r\n                ...state,\r\n                users: action.users\r\n            }\r\n        case 'UPDATE_USER':\r\n            return {\r\n                ...state,\r\n                users: state.users.map(user => {\r\n                    if (user._id === action.user._id) return action.user;\r\n                    return user;\r\n                })\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","const initialState = {\r\n    boards: [],\r\n    currBoard: null\r\n}\r\n\r\nexport default function boardReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case 'SET_BOARDS':\r\n            return {\r\n                ...state,\r\n                boards: action.boards\r\n            }\r\n        case 'SET_BOARD':\r\n            return {\r\n                ...state,\r\n                currBoard: action.board\r\n            }\r\n        case 'UPDATE_STACK_TITLE':\r\n\r\n            return {\r\n                ...state,\r\n                currBoard: {\r\n                    ...state.currBoard,\r\n                    stacks: state.currBoard.stacks.map(stack => {\r\n                        if (stack.id === action.stack.id) stack.title = action.stack.title\r\n                        return stack\r\n                    })\r\n                }\r\n            }\r\n        case 'SET_CARD':\r\n            return {\r\n                ...state,\r\n                currBoard: {\r\n                    ...state.currBoard, stacks: state.currBoard.stacks.map(stack => {\r\n                        stack.cards = stack.cards.map(card => {\r\n                            if (card.id === action.card.id) return action.card;\r\n                            return card;\r\n                        })\r\n                        return stack\r\n                    })\r\n                }\r\n            }\r\n        case 'ADD_BOARD':\r\n            return {\r\n                ...state,\r\n                boards: [action.board, ...state.boards]\r\n            }\r\n        case 'UPDATE_BOARD':\r\n            return {\r\n                ...state,\r\n                boards: state.boards.map(board => {\r\n                    if (board._id === action.board._id) return action.board;\r\n                    return board;\r\n                })\r\n            }\r\n        case 'REMOVE_BOARD':\r\n            return {\r\n                ...state,\r\n                boards: state.boards.filter(board => board._id !== action.boardId)\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","\r\nimport { createStore, combineReducers, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport userReducer from './reducers/userReducer.js';\r\nimport boardReducer from './reducers/boardReducers.js';\r\n\r\nconst rootReducer = combineReducers({\r\n    user: userReducer,\r\n    board: boardReducer\r\n});\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nexport const store = createStore(rootReducer,\r\n    composeEnhancers(applyMiddleware(thunk))\r\n)","import { createBrowserHistory } from \"history\";\r\nconst history = createBrowserHistory();\r\n\r\nexport default history;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { store } from './store/store.js';\r\nimport { Provider } from 'react-redux'\r\nimport { Router } from \"react-router-dom\";\r\nimport history from './history'\r\n\r\n\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <Router history={history}>\r\n      <App />\r\n    </Router>\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}