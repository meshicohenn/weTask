{"version":3,"sources":["pages/HomePage.jsx","history.js","services/httpService.js","services/userService.js","store/actions/userActions.js","services/utilService.js","services/cloudinaryService.js","pages/LoginSignup.jsx","cmps/BoardPreview.jsx","services/boardService.js","services/socketService.js","store/actions/boardActions.js","cmps/BoardBg.jsx","cmps/BoardAdd.jsx","cmps/BoardList.jsx","pages/Boards.jsx","cmps/AddContent.jsx","cmps/CardPreview.jsx","cmps/Stack.jsx","cmps/CardDescription.jsx","cmps/CardComments.jsx","cmps/DueDate.jsx","cmps/LabelsPicker.jsx","cmps/CardMembers.jsx","cmps/CardMove.jsx","cmps/ActionContainer.jsx","cmps/CardChecklist.jsx","cmps/CardPreviewActions.jsx","cmps/CardImg.jsx","cmps/RemoveCard.jsx","pages/CardDetails.jsx","cmps/AddMember.jsx","cmps/BoardBackground.jsx","cmps/BoardStyling.jsx","cmps/BoardActivities.jsx","cmps/RemoveBoard.jsx","cmps/BoardMenu.jsx","cmps/BoardOptions.jsx","cmps/StatisticsPie.jsx","cmps/StatisticsBar.jsx","pages/BoardStatistics.jsx","pages/BoardDetails.jsx","pages/UserProfile.jsx","cmps/NavBar.jsx","App.js","serviceWorker.js","store/reducers/userReducer.js","store/reducers/boardReducers.js","store/store.js","index.js"],"names":["HomePage","className","to","src","alt","history","createBrowserHistory","axios","Axios","create","withCredentials","endpoint","data","ajax","a","method","url","res","console","log","dir","response","error","login","logout","signup","getById","userId","httpService","query","filterBy","q","board","_id","update","user","userCred","_handleLogin","sessionStorage","clear","setItem","JSON","stringify","userCreds","dispatch","userService","setUser","err","type","makeId","length","id","possible","i","charAt","Math","floor","random","getRandomColor","letters","split","color","uploadImg","ev","UPLOAD_URL","formData","FormData","append","target","files","post","then","catch","LoginSignup","state","username","password","fullname","imgUrl","confirmPassword","isLogin","msg","isUploadImg","isFinishUpload","setCurrPage","props","match","path","setState","onUploadImg","timeoutFinishUpload","setTimeout","prevState","handleChange","field","name","value","handleUserSubmit","preventDefault","bgColor","push","onOpenUpload","inputElement","click","this","prevProps","params","clearTimeout","onSubmit","onChange","autoComplete","placeholder","ref","input","hidden","onClick","disabled","Component","mapDispatchToProps","connect","loggedInUser","BoardPreview","style","backgroundColor","bg","backgroundImage","title","save","remove","get","queryStr","prm","socket","setup","io","terminate","on","eventName","cb","off","emit","loadBoard","boardService","socketService","BoardBg","bgs","changeBgColor","map","idx","key","backgroundSize","React","BoardAdd","bgColors","bgImgs","bgBy","onHandleSubmit","members","stacks","createdAt","Date","now","createdBy","activities","addBoard","onClose","stopPropagation","width","onChangeBgBy","savedBoard","BoardList","isAddOpen","toggleAddShown","boards","Boards","loadBoards","AddContent","isOpen","addItem","event","undefined","itemTitle","currBoard","unshift","txt","byMember","onStackAdd","parentId","itemId","onCardAdd","toggleOpen","padding","fontSize","minWidth","maxWidth","borderTopLeftRadius","borderTopRightRadius","autoFocus","CardPreview","card","innerRef","provided","labelsOpen","todosStatus","todosCount","checklists","doneTodosCount","forEach","checklist","todos","todo","isDone","getTodosInfo","dueDateClass","dueDate","parse","getDueDateType","showInfo","comments","description","link","draggableProps","dragHandleProps","labels","onToggleLabels","label","background","moment","format","Stack","children","droppableProps","CardDescription","htmlFor","onSaveDesc","onFocus","isShown","isSubmitShown","CardComments","onAddComment","comment","getTwoChars","fromNow","removeComment","DueDate","date","calendarType","locale","onToggleAction","removeDueDate","LabelsPicker","isLabelChecked","labelName","currCard","getCurrCard","find","addLabel","toUpperCase","slice","CardMembers","isMemberChecked","memberId","member","getMembers","searchBy","filter","includes","str","twoChars","addMember","CardMove","selectIsShown","onToggleSelect","stack","cards","moveCardToStack","ActionContainer","action","checkAction","actions","onOutsideClick","display","titleToReturn","move","CardChecklist","newTodo","onEditChecklistTitle","onAddTodo","addTodo","onUpdateTodo","calculateProgBarWidth","countIsDone","toFixed","calculateProgBarBgc","bgc","onRemoveChecklist","onRemoveTodo","CardPreviewActions","CardImg","onRemoveImg","ReomveCard","onToggleRemoveCard","onRemoveCard","CardDetails","prevCardDesc","isOpenModalRemove","loadCard","cardId","some","onDescShown","isPrevDesc","isDescShown","setPrevDesc","onBackBoard","boardId","onChangeDate","saveCard","handleCommentChange","commentId","onEditTitle","onAddLabel","currLabel","labelIdx","findIndex","splice","onAddMember","currMember","memberIdx","onAddChecklist","newChecklist","checklistId","todoId","stackDest","cardIdx","onMouseDown","getState","AddMember","loadUsers","users","BoardBackground","onSetBg","img","BoardStyling","bgChooseShown","setBgShown","BoardActivities","activity","ReomveBoard","onToggleRemoveBoard","onRemoveBoard","BoardMenu","isStylingShown","isRemoveBoardShown","onToggleStyling","removeBoard","BoardOptions","isAddMemberShown","isBoardMenuShown","onToggleAddMember","onToggleBoardMenu","onRemoveMember","StatisticsPie","statsTimeOut","margin","top","right","bottom","left","innerRadius","padAngle","cornerRadius","colors","borderWidth","borderColor","from","modifiers","radialLabelsSkipAngle","radialLabelsTextXOffset","radialLabelsTextColor","radialLabelsLinkOffset","radialLabelsLinkDiagonalLength","radialLabelsLinkHorizontalLength","radialLabelsLinkStrokeWidth","radialLabelsLinkColor","slicesLabelsSkipAngle","slicesLabelsTextColor","animate","motionStiffness","motionDamping","defs","rotation","lineWidth","spacing","fill","legends","StatisticsBar","Tasks","getUserColor","keys","indexBy","size","stagger","axisTop","axisRight","axisBottom","tickSize","tickPadding","tickRotation","legend","legendPosition","legendOffset","axisLeft","labelSkipWidth","labelSkipHeight","labelTextColor","dataFrom","anchor","direction","justify","translateX","translateY","itemsSpacing","itemWidth","itemHeight","itemDirection","itemOpacity","symbolSize","effects","BoardStatistics","currView","getStatsByLabels","count","Object","labelTitle","labelInfo","getStatsByUsers","tasks","userStatsData","userInfo","doneTasks","getStatsByDueDates","workload","Delayed","cardCount","getBoardStats","byLabels","byUsers","byDueDate","toggleStatView","byType","elStats","createRef","boardStats","reorder","list","startIndex","endIndex","result","Array","removed","source","destination","droppableSource","droppableDestination","sourceClone","destClone","index","droppableId","BoardDetails","areLabelsOpen","setBoard","getItemStyle","isDragging","draggableStyle","newStackTitle","newCardTitle","stackId","stackIdx","onDragEnd","newState","items","stackSourceTitle","stackPlace","sIndex","dIndex","sourceTitle","destTitle","cardMovedTitle","isCombineEnabled","snapshot","draggableId","bgUrl","document","body","component","UserProfile","isErrorMsg","onUpdateUser","go","msgStyle","updatedUser","NavBar","isScroll","isMenuOpen","handleScroll","theDocument","documentElement","clientHeight","scrollTop","onLogout","isGuest","toggleMenu","scrollEvent","window","removeEventListener","addEventListener","isHomepage","marginTop","exact","location","pathname","App","guestSignup","Boolean","hostname","localLoggedinUser","initialState","rootReducer","combineReducers","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.256461a8.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport default function HomePage() {\r\n    return (\r\n        <>\r\n            <section className=\"home-container hero-container\">\r\n                <div className=\"hero-cta flex space-between align-center\">\r\n                    <div className=\"hero-content\">\r\n                        <div className=\"hero-txt\">With wetask - You Can Start Working - With Confidence!</div>\r\n                        <Link to=\"/boards/EXAMPLE_BOARD_ID\" className=\"hero-btn\">Try now</Link>\r\n                    </div>\r\n                    <img src=\"assets/img/hero-img.svg\" alt=\"\" className=\"hero-img\" />\r\n                </div>\r\n            </section>\r\n        </>\r\n    )\r\n}\r\n","import { createBrowserHistory } from \"history\";\r\nconst history = createBrowserHistory();\r\n\r\nexport default history;","import history from '../history';\r\nimport Axios from 'axios';\r\n\r\nconst BASE_URL = process.env.NODE_ENV === 'production'\r\n    ? '/api/'\r\n    : '//localhost:3030/api/'\r\n\r\n\r\nvar axios = Axios.create({\r\n    withCredentials: true\r\n});\r\n\r\nexport default {\r\n    get(endpoint, data) {\r\n        return ajax(endpoint, 'GET', data)\r\n    },\r\n    post(endpoint, data) {\r\n        return ajax(endpoint, 'POST', data)\r\n    },\r\n    put(endpoint, data) {\r\n        return ajax(endpoint, 'PUT', data)\r\n    },\r\n    delete(endpoint, data) {\r\n        return ajax(endpoint, 'DELETE', data)\r\n    }\r\n}\r\n\r\n\r\nasync function ajax(endpoint, method = 'get', data = null) {\r\n    try {\r\n        const res = await axios({\r\n            url: `${BASE_URL}${endpoint}`,\r\n            method,\r\n            data\r\n        })\r\n        return res.data;\r\n    } catch (err) {\r\n        console.log(`Had Issues ${method}ing to the backend, endpoint: ${endpoint}, with data: ${data}`);\r\n        console.dir(err);\r\n        throw err.response.data.error;\r\n    }\r\n}","import httpService from './httpService'\r\n\r\nexport default {\r\n    login,\r\n    logout,\r\n    signup,\r\n    getById,\r\n    query,\r\n    update\r\n}\r\n\r\nfunction query(filterBy) {\r\n    if (!filterBy) return httpService.get('users')\r\n    return httpService.get(`users?q=${filterBy.q}&boardId=${filterBy.board._id}`)\r\n}\r\n\r\nasync function login(userCred) {\r\n    try {\r\n        const user = await httpService.post('auth/login', userCred)\r\n        return _handleLogin(user)\r\n    } catch (err) {\r\n        throw err\r\n    }\r\n}\r\n\r\nasync function signup(userCred) {\r\n    const user = await httpService.post('auth/signup', userCred)\r\n    return _handleLogin(user)\r\n}\r\n\r\nasync function logout() {\r\n    await httpService.post('auth/logout');\r\n    sessionStorage.clear();\r\n}\r\n\r\nfunction _handleLogin(user) {\r\n    sessionStorage.setItem('user', JSON.stringify(user))\r\n    return user;\r\n}\r\n\r\nfunction getById(userId) {\r\n    return httpService.get(`user/${userId}`)\r\n}\r\n\r\nfunction update(user) {\r\n    return httpService.put(`users/${user._id}`, user)\r\n}","import userService from '../../services/userService';\r\n\r\nexport function login(userCreds) {\r\n    try {\r\n        return async dispatch => {\r\n            const user = await userService.login(userCreds);\r\n            dispatch(setUser(user));\r\n        };\r\n    } catch (err) {\r\n        throw err\r\n    }\r\n}\r\n\r\nexport function update(user) {\r\n    return async dispatch => {\r\n        const updatedUser = await userService.update(user)\r\n        dispatch({ type: 'UPDATE_USER', updatedUser })\r\n    }\r\n}\r\n\r\nexport function loadUsers(filterBy = null) {\r\n    return async dispatch => {\r\n        try {\r\n            const users = await userService.query(filterBy)\r\n            dispatch({ type: 'LOAD_USERS', users })\r\n        } catch (err) {\r\n            console.log('userActions: cannot load users!', err);\r\n        }\r\n    }\r\n}\r\n\r\nexport function signup(userCreds) {\r\n    return async dispatch => {\r\n        const user = await userService.signup(userCreds);\r\n        dispatch(setUser(user));\r\n    };\r\n}\r\n\r\nexport function logout() {\r\n    return async dispatch => {\r\n        await userService.logout();\r\n        dispatch(setUser(null));\r\n    };\r\n}\r\n\r\nexport function setUser(user) {\r\n    return {\r\n        type: 'SET_USER',\r\n        user\r\n    };\r\n}","export function makeId(length = 5) {\r\n    let id = '';\r\n    let possible = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n\r\n    for (let i = 0; i < length; i++) {\r\n        id += possible.charAt(Math.floor(Math.random() * possible.length));\r\n    }\r\n\r\n    return id;\r\n}\r\n\r\nexport function getRandomColor() {\r\n    const letters = '0123456789ABCDEF'.split('');\r\n    let color = '#';\r\n    for (let i = 0; i < 6; i++) {\r\n        color += letters[Math.floor(Math.random() * 16)];\r\n    }\r\n    return color;\r\n}","import axios from 'axios'\r\n\r\nexport function uploadImg(ev) {\r\n    const CLOUD_NAME = 'shaishar9'; // find it in your cloudinary account (main page)\r\n    const UPLOAD_URL = `https://api.cloudinary.com/v1_1/${CLOUD_NAME}/image/upload`;\r\n\r\n    const formData = new FormData();\r\n    formData.append('file', ev.target.files[0]);\r\n    formData.append('upload_preset', 'cgwfirgu'); // second parameter is the upload preset (you can find it in cloudinary settings)\r\n\r\n    return axios.post(UPLOAD_URL, formData)\r\n        .then(res => res.data.url)\r\n        .catch(err => console.error(err))\r\n}","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { login, signup } from '../store/actions/userActions';\r\nimport { getRandomColor } from '../services/utilService'\r\nimport { uploadImg } from '../services/cloudinaryService'\r\nimport { Link } from 'react-router-dom'\r\n\r\nclass LoginSignup extends Component {\r\n\r\n    state = {\r\n        user: {\r\n            username: '',\r\n            password: '',\r\n            fullname: '',\r\n            imgUrl: '',\r\n            confirmPassword: ''\r\n        },\r\n        isLogin: false,\r\n        msg: '',\r\n        isUploadImg: false,\r\n        isFinishUpload: false\r\n    }\r\n\r\n    componentDidMount() {\r\n        // if (!this.props.loggedInUser?.isGuest) this.props.history.push('/boards')\r\n        this.setCurrPage()\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.match.params !== this.props.match.params) {\r\n            this.setState({\r\n                msg: '', isUploadImg: false, isFinishUpload: false,\r\n                user: { username: '', password: '', confirmPassword: '', fullname: '', imgUrl: '' }\r\n            })\r\n            this.setCurrPage()\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearTimeout(this.timeoutFinishUpload)\r\n    }\r\n\r\n    setCurrPage = () => {\r\n        const isLogin = (this.props.match.path === '/login') ? true : false\r\n        this.setState({ isLogin })\r\n    }\r\n\r\n    onUploadImg = async ev => {\r\n        this.setState({ isUploadImg: true })\r\n        const imgUrl = await uploadImg(ev)\r\n        this.setState({ isUploadImg: false, isFinishUpload: true })\r\n        this.timeoutFinishUpload = setTimeout(() => {\r\n            this.setState({ isFinishUpload: false })\r\n        }, 2500);\r\n        this.setState(prevState => ({ user: { ...prevState.user, imgUrl } }))\r\n    }\r\n\r\n    handleChange = ({ target }) => {\r\n        const field = target.name\r\n        const value = target.value\r\n\r\n        this.setState(prevState => ({ user: { ...prevState.user, [field]: value } }))\r\n    }\r\n\r\n    handleUserSubmit = async ev => {\r\n        ev.preventDefault();\r\n        const { username, password, fullname, imgUrl, confirmPassword } = this.state.user\r\n        const { isLogin } = this.state\r\n\r\n        if (!username || !password && !confirmPassword && isLogin) return this.setState({ msg: 'Please enter username and password' })\r\n        if (!isLogin && password !== confirmPassword) return this.setState({ msg: 'Passwords don\\'t match!' })\r\n        if (!isLogin && !username && !password && !fullname) return this.setState({ msg: 'Please enter username, password and full name' });\r\n\r\n        const userCred = { username, password, fullname, imgUrl }\r\n        try {\r\n            if (this.state.isLogin) await this.props.login(userCred)\r\n            else {\r\n                userCred.bgColor = getRandomColor()\r\n                await this.props.signup(userCred)\r\n            }\r\n        } catch (err) {\r\n            return this.setState({ msg: err })\r\n        }\r\n\r\n        this.props.history.push('/boards')\r\n    }\r\n\r\n    onOpenUpload = () => {\r\n        this.inputElement.click();\r\n    }\r\n\r\n    render() {\r\n        const { isLogin, msg, user, isUploadImg, isFinishUpload } = this.state\r\n        return (\r\n            <div className=\"container flex column align-center\">\r\n                <div className=\"form-container\">\r\n                    <h2 className=\"form-title\">{isLogin ? 'Login' : 'Signup'}</h2>\r\n\r\n                    {isLogin && <div className=\"signup-login-link\"><Link to=\"/signup\">Sign up for an account</Link></div>}\r\n                    {!isLogin && <div className=\"signup-login-link\"><Link to=\"/login\">Already have an account? Sign in</Link></div>}\r\n                    {isFinishUpload && <div className=\"img-uploaded-msg flex align-center space-between\">Your image was uploaded successfully! <img src=\"assets/img/success.png\" className=\"small-icon\" alt=\"\" /></div>}\r\n\r\n                    <form className=\"login-signup-form flex column align-start\" onSubmit={this.handleUserSubmit}>\r\n                        <input type=\"text\" onChange={this.handleChange} value={user.username} name=\"username\" autoComplete=\"off\" placeholder=\"Username\" />\r\n                        {!isLogin && <input type=\"text\" onChange={this.handleChange} value={user.fullname} name=\"fullname\" autoComplete=\"off\" placeholder=\"Full name\" />}\r\n                        <input type=\"password\" onChange={this.handleChange} value={user.password} name=\"password\" placeholder=\"Password\" />\r\n                        {!isLogin && <input type=\"password\" onChange={this.handleChange} value={user.confirmPassword} name=\"confirmPassword\" placeholder=\"Confirm password\" />}\r\n                        {!isLogin && <input type=\"file\" ref={input => this.inputElement = input} name=\"imgUrl\" onChange={this.onUploadImg} hidden />}\r\n                        <div className=\"img-submit-container flex align-start space-between\">\r\n                            {!isLogin && <span className=\"upload-img\" onClick={() => this.onOpenUpload()}>Upload Profile Image</span>}\r\n                            <button className={`btn btn-success ${isUploadImg ? 'disable' : ''}`} disabled={isUploadImg}>{isLogin ? 'Login' : 'Signup'}</button>\r\n                        </div>\r\n                    </form>\r\n\r\n                    {msg && <div className=\"user-msg flex align-center space-between\">{msg}<img src=\"assets/img/error-white.png\" className=\"small-icon\" alt=\"\" /></div>}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        loggedInUser: state.user.loggedInUser\r\n    };\r\n};\r\nconst mapDispatchToProps = {\r\n    signup,\r\n    login\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginSignup);\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\nexport default function BoardPreview({ board }) {\r\n\r\n    return (\r\n        <Link to={`/boards/${board._id}`}>\r\n            <section style={{ backgroundColor: board.bg, backgroundImage: `url(${board.bg})`} } className=\"board-item\" >\r\n                <h3>{board.title}</h3>\r\n            </section>\r\n        </Link>\r\n    )\r\n}","import httpService from './httpService'\r\nconst BASE_URL = 'boards'\r\n\r\nexport default {\r\n    query,\r\n    save,\r\n    remove,\r\n    get\r\n}\r\n\r\nasync function query(userId) {\r\n    const queryStr = `?userId=${userId}`;\r\n    return await httpService.get(`${BASE_URL}${queryStr}`);\r\n}\r\n\r\nasync function get(id) {\r\n    return await httpService.get(`${BASE_URL}/${id}`)\r\n}\r\n\r\n\r\nasync function remove(id) {\r\n    return await httpService.delete(`${BASE_URL}/${id}`)\r\n}\r\n\r\nasync function save(board) {\r\n    var prm;\r\n    if (board._id) {\r\n        prm = await httpService.put(`${BASE_URL}/${board._id}`, board)\r\n    } else {\r\n        prm = await httpService.post(`${BASE_URL}`, board)\r\n    }\r\n    return prm\r\n}\r\n\r\n","import io from 'socket.io-client';\r\n\r\nconst BASE_URL =\r\n    process.env.NODE_ENV === 'production' ? '/' : '//localhost:3030';\r\n\r\nlet socket;\r\n\r\nexport default {\r\n    setup,\r\n    terminate,\r\n    on,\r\n    off,\r\n    emit\r\n};\r\n\r\nfunction setup() {\r\n    socket = io(BASE_URL);\r\n}\r\n\r\nfunction terminate() {\r\n    socket = null;\r\n}\r\n\r\nfunction on(eventName, cb) {\r\n    socket.on(eventName, cb);\r\n}\r\n\r\nfunction off(eventName, cb) {\r\n    socket.off(eventName, cb);\r\n}\r\n\r\nfunction emit(eventName, data) {\r\n    socket.emit(eventName, data);\r\n}\r\n","import boardService from '../../services/boardService'\r\nimport socketService from '../../services/socketService'\r\n\r\nexport function loadBoards(userId) {\r\n  return dispatch => {\r\n    boardService.query(userId)\r\n      .then(boards => dispatch({ type: 'SET_BOARDS', boards }))\r\n  }\r\n}\r\nexport function loadBoard(id) {\r\n  return dispatch => {\r\n    boardService.get(id)\r\n      .then(board => {\r\n        dispatch({ type: 'SET_BOARD', board });\r\n      })\r\n  }\r\n}\r\nexport function saveCard(card) {\r\n  return (dispatch, getState) => {\r\n    dispatch({ type: 'SET_CARD', card });\r\n    socketService.emit('updateBoard', getState().board.currBoard);\r\n    boardService.save(getState().board.currBoard)\r\n  }\r\n}\r\nexport function removeBoard(boardId) {\r\n  return dispatch => {\r\n    return boardService.remove(boardId)\r\n      .then(() => {\r\n        dispatch({ type: 'REMOVE_BOARD', boardId })\r\n        // return Promise.resolve()\r\n      })\r\n  }\r\n}\r\nexport function addBoard(board) {\r\n  return dispatch => {\r\n    boardService.save(board)\r\n      .then(savedBoard => dispatch({ type: 'ADD_BOARD', board: savedBoard }))\r\n  }\r\n}\r\n\r\nexport function save(board) {\r\n  return dispatch => {\r\n    dispatch({ type: 'SET_BOARD', board })\r\n    socketService.emit('updateBoard', board);\r\n    boardService.save(board)\r\n  }\r\n}\r\nexport function setBoard(board) {\r\n  return dispatch => dispatch({ type: 'SET_BOARD', board })\r\n}","import React from 'react'\r\n\r\n\r\nexport default class BoardBg extends React.Component {\r\n\r\n    render() {\r\n        const { bgs, type, changeBgColor  } = this.props\r\n        \r\n        return <ul className=\"bg-color-list clean-list flex wrap\">{\r\n            bgs.map((bg,idx )=> {\r\n                return <li key={idx} className=\"bg-color-li\" onClick={() => changeBgColor(bg)} \r\n                style={type === 'color' ? { backgroundColor: bg } : { backgroundImage: `url(${bg})`,backgroundSize:\"cover\" }}></li>\r\n            })\r\n        }\r\n      </ul >\r\n    }\r\n}\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { addBoard } from '../store/actions/boardActions'\r\nimport { Link } from 'react-router-dom'\r\nimport BoardBg from './BoardBg'\r\n\r\n\r\n\r\nclass BoardAdd extends React.Component {\r\n    state = {\r\n        board: {\r\n            title: '',\r\n            bg: '#122961'\r\n        },\r\n        bgColors: ['blue', 'red', 'pink', 'black', 'yellow', '#122961', '#3867d6', '#fed330', '#eb3b5a'],\r\n        bgImgs: ['assets/img/bg-beach.jpg', 'assets/img/bg-flowers.jpg',\r\n            'assets/img/bg-sunset.jpg', 'assets/img/bg-view.jpg',\r\n            'assets/img/bg-view2.jpg', 'assets/img/bg-view3.jpg',\r\n            'assets/img/bg-view4.jpg', 'assets/img/bg-water.jpg', 'assets/img/bg-view5.jpg'],\r\n        bgBy: 'color'\r\n    }\r\n\r\n    handleChange = (ev) => {\r\n        let { name, value } = ev.target;\r\n        this.setState(prevState => ({ board: { ...prevState.board, [name]: value } }))\r\n    };\r\n\r\n    onHandleSubmit = (ev) => {\r\n        ev.preventDefault()\r\n        const { board } = this.state\r\n        board.members = [this.props.loggedInUser];\r\n        board.stacks = [];\r\n        board.createdAt = Date.now();\r\n        board.createdBy = this.props.loggedInUser;\r\n        board.activities = [];\r\n        this.props.addBoard(board)\r\n        this.setState({ board: '' })\r\n        this.props.onClose()\r\n    };\r\n\r\n    changeBgColor = (bg) => {\r\n        this.setState(prevState => ({ board: { ...prevState.board, bg } }))\r\n    }\r\n\r\n    onChangeBgBy(bgBy) {\r\n        this.setState({ bgBy });\r\n    }\r\n\r\n    render() {\r\n        const { board, bgColors, bgImgs, bgBy } = this.state\r\n        const { onClose } = this.props\r\n        return <>\r\n            <div className=\"screen\" onClick={onClose}>\r\n                <div className=\"add-board-container modal-container\" onClick={(ev) => ev.stopPropagation()} style={{ backgroundColor: \"unset\", width: 'fit-content' }}>\r\n                    <img src=\"assets/img/close.png\" onClick={onClose} className=\"close-btn\" alt=\"\" />\r\n                    <form onSubmit={this.onHandleSubmit}>\r\n                        <div className=\"main-form-container flex wrap\">\r\n                            <div className=\"main-form\"\r\n                                style={{ width: 'unset', backgroundColor: board.bg, backgroundImage: `url(${board.bg})`, backgroundSize: \"cover\" }}>\r\n                                <div className=\"main-form-header flex space-between\">\r\n                                    <h3>Create Board</h3>\r\n                                </div>\r\n\r\n                                <input name=\"title\" className=\"board-title\" value={board.title}\r\n                                    placeholder=\"Add board title\" onChange={this.handleChange} autoComplete=\"off\" />\r\n                                <div className=\"bg-btns-container\">\r\n                                    <Link className=\"clean-link bg-btn\" to=\"#\" onClick={() => this.onChangeBgBy('color')}>Background Color</Link>\r\n                                    <Link className=\"clean-link bg-btn\" to=\"#\" onClick={() => this.onChangeBgBy('image')}>Background Image</Link>\r\n                                </div>\r\n\r\n                            </div>\r\n                            <div className=\"bg-color-container flex \">\r\n                                <BoardBg bgs={bgBy === 'color' ? bgColors : bgImgs} type={bgBy} changeBgColor={this.changeBgColor} />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"modal-footer flex justify-end\">\r\n                            <button className=\"create-board-btn btn btn-success\">Create Board</button>\r\n                        </div>\r\n                    </form>\r\n\r\n                </div>\r\n            </div>\r\n        </>\r\n    }\r\n}\r\n\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        loggedInUser: state.user.loggedInUser\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    addBoard\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(BoardAdd)","import React from 'react'\r\nimport BoardPreview from './BoardPreview'\r\nimport BoardAdd from './BoardAdd'\r\n\r\nexport default class BoardList extends React.Component {\r\n    \r\n    state = {\r\n        isAddOpen: false\r\n    }\r\n\r\n\r\n    toggleAddShown = () => {\r\n        this.setState(prevState => ({ isAddOpen: !prevState.isAddOpen }))\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                {this.state.isAddOpen && <BoardAdd onClose={this.toggleAddShown} />}\r\n                <div className=\"boards-list justify-center flex wrap\">\r\n                    {this.props.boards.map(board => <BoardPreview key={board._id} board={board} />)}\r\n                    <button className=\"add-new-board board-item\" onClick={this.toggleAddShown}>Create new board</button>\r\n                </div>\r\n            </>)\r\n    }\r\n}\r\n\r\n\r\n\r\n","import React from 'react'\r\nimport BoardList from '../cmps/BoardList'\r\nimport { loadBoards } from '../store/actions/boardActions'\r\nimport { connect } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\nclass Boards extends React.Component {\r\n\r\n    componentDidMount() {\r\n        if (!this.props.loggedInUser) return this.props.history.push('/boards')\r\n        this.props.loadBoards(this.props.loggedInUser._id)\r\n    }\r\n\r\n    render() {\r\n        const { loggedInUser, boards } = this.props\r\n        return ((!loggedInUser) ? 'Loading...' :\r\n            <div className=\"container flex justify-center\">\r\n                <div className=\"form-container boards-page  align-center column\">\r\n                    <header className=\"boards-header wrap flex space-between\">\r\n                        <h2 className=\"boards-title\">My Boards</h2>\r\n                        <Link to=\"/profile\" className=\"hello-btn\">Hello {loggedInUser.username}</Link>\r\n                    </header>\r\n                    <BoardList boards={boards} />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        boards: state.board.boards,\r\n        loggedInUser: state.user.loggedInUser\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    loadBoards\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Boards)","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { makeId } from '../services/utilService'\r\nimport { connect } from 'react-redux'\r\n\r\nclass AddContent extends React.Component {\r\n\r\n    state = {\r\n        isOpen: false,\r\n        title: ''\r\n    };\r\n\r\n    addItem = (event) => {\r\n        event.preventDefault();\r\n\r\n        if (!event.target) return;\r\n        if (event.target.name.value === '' || event.target.name.value === undefined) return;\r\n\r\n        const itemTitle = event.target.name.value;\r\n        const { loggedInUser } = this.props\r\n\r\n        switch (this.props.type) {\r\n            case 'stack':\r\n                this.props.currBoard.activities.unshift({ id: makeId(), txt: `added new stack: ${itemTitle}`, createdAt: Date.now(), byMember: loggedInUser })\r\n                this.props.onStackAdd(itemTitle);\r\n                break;\r\n            case 'card':\r\n                this.props.currBoard.activities.unshift({ id: makeId(), txt: `added new card: ${itemTitle}`, createdAt: Date.now(), byMember: loggedInUser })\r\n                const parentId = this.props.itemId;\r\n                this.props.onCardAdd(itemTitle, parentId);\r\n                break;\r\n        }\r\n\r\n        this.setState({ isOpen: false, title: '' });\r\n    }\r\n\r\n    handleChange = ({ target }) => {\r\n\r\n        let title = target.value;\r\n\r\n        this.setState({ title });\r\n    }\r\n\r\n    toggleOpen = (event) => {\r\n        event.preventDefault();\r\n\r\n        this.setState(({ isOpen }) => ({ isOpen: !isOpen }));\r\n    }\r\n\r\n    render() {\r\n        const { title, isOpen } = this.state;\r\n        const { type } = this.props;\r\n\r\n        return (\r\n\r\n            <div className={`add-content-container flex align-start add-${type}`} style={{\r\n\r\n                // marginRight: (type === 'stack') ? '16px' : '0',\r\n                padding: (type === 'stack') ? '10px 20px' : '7.5px 15px',\r\n                fontSize: (type === 'stack') ? 16 : 14,\r\n                color: (type === 'stack') ? '#ffffff' : '#888888',\r\n                // background: (type === 'stack') ? 'lightgreen' : 'cornflowerblue',\r\n                minWidth: (type === 'stack') ? 250 : '100%',\r\n                maxWidth: (type === 'stack') ? 250 : '100%',\r\n                borderTopLeftRadius: (type === 'stack') ? 3 : 0,\r\n                borderTopRightRadius: (type === 'stack') ? 3 : 0\r\n\r\n            }}>\r\n                {(isOpen)\r\n                    ?\r\n                    <>\r\n                        <form onSubmit={this.addItem} className=\"add-content flex column align-start\">\r\n                            <input name=\"name\" autoComplete=\"off\" onChange={this.handleChange}\r\n                                value={title} placeholder={`Enter ${type} title...`}\r\n                                className={`input ${(type === 'stack') ? 'stack-input' : 'card-input'}`} style={{ padding: '8px 12px' }} autoFocus={true} />\r\n                            <span className=\"add-content-buttons flex space-between\">\r\n                                <button className={`btn btn-${(type === 'stack') ? 'primary' : 'success'} btn-small`}>{`Add ${type}`}</button>\r\n                                <img src={`/assets/img/close${(type === 'stack') ? '-stack' : ''}.png`} onClick={this.toggleOpen} className=\"close-add-icon\" />\r\n                            </span>\r\n                        </form>\r\n                    </>\r\n                    :\r\n                    <>\r\n                        <Link to=\"#\" onClick={this.toggleOpen} className=\"add-content-title\">{`Add ${type}`}</Link>\r\n                    </>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        currBoard: state.board.currBoard,\r\n        loggedInUser: state.user.loggedInUser\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(AddContent)\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport moment from 'moment'\r\n\r\n\r\nexport function CardPreview(props) {\r\n\r\n    function onLabelsPress(ev) {\r\n        ev.stopPropagation()\r\n        props.onToggleLabels();\r\n    }\r\n\r\n    function getTodosInfo() {\r\n\r\n        let doneTodosCount = 0;\r\n\r\n        card.checklists.forEach(checklist => {\r\n            todosCount += checklist.todos.length;\r\n\r\n            checklist.todos.forEach(todo => {\r\n\r\n                if (todo.isDone) doneTodosCount += 1;\r\n            })\r\n        })\r\n\r\n        return `${doneTodosCount}/${todosCount}`;\r\n    }\r\n\r\n    function getDueDateType() {\r\n        const now = Date.now();\r\n        return (Date.parse(card.dueDate) > now) ? 'future' : 'past'\r\n    }\r\n\r\n    const { card, innerRef, provided, style, labelsOpen } = props;\r\n\r\n    let todosStatus = '';\r\n    let todosCount = 0;\r\n    if (card.checklists && card.checklists.length) {\r\n        todosStatus = getTodosInfo();\r\n    }\r\n\r\n    let dueDateClass = '';\r\n    if (card.dueDate && card.dueDate != '') {\r\n        dueDateClass = 'due-date-' + getDueDateType();\r\n    }\r\n\r\n    const showInfo = (card.comments.length || card.description !== '' || todosCount || card.dueDate !== '');\r\n\r\n    function onCardClick() {\r\n\r\n        props.history.push(props.link)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {/* <Link to={link}> */}\r\n            <div className=\"card-preview flex column align-center justify-center\" onClick={onCardClick} ref={innerRef} style={style}\r\n                {...provided.draggableProps} {...provided.dragHandleProps} >\r\n                {(card.labels.length)\r\n                    ?\r\n                    <div className={`card-labels flex wrap align-center`} onClick={(event) => onLabelsPress(event)}>\r\n                        {\r\n                            card.labels.map(label => {\r\n                                return (\r\n                                    <div className={`card-label flex align-center justify-center ${(labelsOpen) ? 'label-expand' : ''}`}\r\n                                        key={label.title + card.id} style={{\r\n                                            background: label.color,\r\n\r\n                                        }}>{(labelsOpen) ? label.title : ''}</div>\r\n                                )\r\n                            })\r\n                        }\r\n                    </div>\r\n                    : null\r\n\r\n                }\r\n                {card.imgUrl && <img src={card.imgUrl} className=\"card-img\" alt=\"\" />}\r\n                <p className={`card-preview-title ${(card.labels.length) ? 'top-margin' : ''}`}>{props.title}</p>\r\n\r\n                {(showInfo)\r\n                    ?\r\n                    <div className=\"card-preview-info flex align-center space-start\">\r\n\r\n                        {(card.dueDate && card.dueDate != '')\r\n                            ?\r\n                            <span className={`preview-info-span flex align-center due-date ${dueDateClass}`}>\r\n                                <img className=\"preview-info-img\" src=\"/assets/img/clock.png\" />\r\n                                <p className=\"preview-info-count\">{moment(card.dueDate).format(\"MMM DD\")}</p>\r\n                            </span>\r\n                            :\r\n                            null\r\n                        }\r\n                        {(card.description !== '')\r\n                            ?\r\n                            <span className=\"preview-info-span flex align-center\">\r\n                                <img className=\"preview-info-img\" src=\"/assets/img/description.png\" />\r\n                            </span>\r\n                            :\r\n                            null\r\n                        }\r\n                        {(card.comments.length)\r\n                            ?\r\n                            <span className=\"preview-info-span flex align-center\">\r\n                                <img className=\"preview-info-img\" src=\"/assets/img/comment.png\" />\r\n                                <p className=\"preview-info-count\">{card.comments.length}</p>\r\n                            </span>\r\n                            :\r\n                            null\r\n                        }\r\n                        {(card.checklists && todosCount)\r\n                            ?\r\n                            <span className=\"preview-info-span flex align-center\">\r\n                                <img className=\"preview-info-img\" src=\"/assets/img/todos.png\" />\r\n                                <p className=\"preview-info-count\">{todosStatus}</p>\r\n                            </span>\r\n                            :\r\n                            null\r\n                        }\r\n\r\n                    </div>\r\n                    : null}\r\n            </div>\r\n            {/* </Link> */}\r\n\r\n        </>\r\n    )\r\n\r\n}","import React from 'react'\r\n\r\nexport class Stack extends React.Component {\r\n\r\n\r\n    state = {\r\n\r\n    };\r\n\r\n    componentDidMount() {\r\n\r\n    }\r\n    componentDidUpdate() {\r\n\r\n    }\r\n\r\n    render() {\r\n        const { innerRef, provided, style, children } = this.props;\r\n        return (\r\n            <div className=\"stack flex column space-start\" ref={innerRef} style={style}\r\n                {...provided.droppableProps} >\r\n                {children}\r\n            </div>\r\n\r\n        )\r\n    }\r\n};","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport default function CardDescription(props) {\r\n    return (\r\n        <div className=\"card-desc-container\">\r\n\r\n\r\n            <div className=\"card-mini-title flex align-center\">\r\n                <img src=\"/assets/img/description.png\"></img>\r\n                <label className=\"card-txt-title\" htmlFor=\"cardDesc\">Description:</label>\r\n            </div>\r\n\r\n            <form className=\"main-content-card-action\" onSubmit={props.onSaveDesc}>\r\n                <textarea name=\"description\" value={props.description} onChange={props.handleChange} \r\n                onFocus={() => props.isShown(true)} className=\"card-desc\" id=\"cardDesc\" placeholder=\"Add your card descriptaion...\">\r\n                </textarea>\r\n                {props.isSubmitShown && <div className=\"desc-btns-container flex align-center\">\r\n                    <button className=\"btn btn-primary btn-save-desc\">Save Changes</button>\r\n                    <Link to=\"#\" className=\"cancel-changes\" onClick={() => props.isShown(false, true)}>\r\n                            <img className=\"close-btn-desc\" src=\"/assets/img/close.png\"/>\r\n                        </Link>\r\n                </div>}\r\n            </form>\r\n        </div>\r\n    )\r\n}","import React, { Component } from 'react'\r\nimport moment from 'moment'\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\nexport default class CardComments extends Component {\r\n    render() {\r\n        return (\r\n            <>\r\n                <div className=\"card-mini-title flex align-center\">\r\n                    <img src=\"/assets/img/comment.png\" />\r\n                    <label className=\"card-txt-title\" htmlFor=\"cardComment\">Comments:</label>\r\n                </div>\r\n                <div className=\"main-content-card-action\">\r\n                    <form onSubmit={this.props.onAddComment}>\r\n                        <input name=\"comment\" className=\"comment-input input\" autoComplete=\"off\" onChange={this.props.handleChange} id=\"cardComment\" placeholder=\"Your comment...\" value={this.props.comment} />\r\n                        <button className=\"btn-primary comment-btn\">Add Comment</button>\r\n                    </form>\r\n                    <div className=\"comments-container\">\r\n                        {this.props.comments && this.props.comments.map((comment, idx) => <div className=\"comment flex align-start column\" key={idx}>\r\n                            <div className=\"flex align-center\">\r\n                                <div className=\"member flex justify-center align-center\"\r\n                                    style={{ backgroundImage: `url(${comment.byMember.imgUrl})`, backgroundColor: comment.byMember.bgColor }}>\r\n                                    {this.props.getTwoChars(comment.byMember.fullname)}\r\n                                </div>\r\n                                <div>\r\n                                    <span className=\"comment-title-fullname\">{comment.byMember.fullname}</span>\r\n                                    <span className=\"comment-title-time\">{moment(comment.createdAt).fromNow()}</span>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"comment-txt\">{comment.txt}</div>\r\n                            <Link className=\"delete-comment\" to=\"#\" onClick={()=>this.props.removeComment(comment.id)}>Delete</Link>\r\n                        </div>)}\r\n                    </div>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n","import React from 'react'\r\n\r\nimport Calendar from 'react-calendar';\r\nimport 'react-calendar/dist/Calendar.css';\r\n\r\nexport default function DueDate(props) {\r\n    const date = (props.value) ? new Date(props.value) : new Date()\r\n    return <div>\r\n        <Calendar onChange={props.onChange} calendarType=\"US\" value={date} locale=\"en-GB\" name=\"dueDate\" />\r\n        <div className=\"btns-container flex space-between\">\r\n            <button className=\"btn btn-primary\" onClick={()=>props.onToggleAction('dueDate')}>Save</button>\r\n            <button className=\"btn btn-danger\" onClick={()=>props.removeDueDate()}>Remove</button>\r\n        </div>\r\n    </div>\r\n}\r\n","import React, { Component } from 'react'\r\n\r\n\r\nexport default class LabelsPicker extends Component {\r\n    state = {\r\n        labels: [{ title: 'small', color: '#61bd4f' }, { title: 'error', color: '#f2d600' },\r\n        { title: 'design', color: '#ff9f1a' }, { title: 'feature', color: '#eb5a46' },\r\n        { title: 'bug', color: '#c377e0' }, { title: 'warning', color: '#0079bf' }]\r\n    }\r\n\r\n    isLabelChecked = (labelName) => {\r\n        const currCard = this.props.getCurrCard();\r\n        if (!currCard.labels) currCard.labels = [];\r\n        if (currCard.labels.find(label => labelName === label.title)) return true\r\n        return false\r\n    }\r\n\r\n    render() {\r\n        const { addLabel } = this.props\r\n        const { isLabelChecked } = this\r\n        return <>\r\n            {this.state.labels.map((label, idx) => {\r\n                return <div key={idx} className=\"label-item flex space-between\" style={{ backgroundColor: label.color }}\r\n                    onClick={() => addLabel({ title: label.title, color: label.color })}>\r\n                    {label.title.charAt(0).toUpperCase() + label.title.slice(1)} {isLabelChecked(label.title) ? <img src=\"/assets/img/icon-checked-white.png\" /> : ''}\r\n                </div>\r\n            })}\r\n        </>\r\n    }\r\n}","import React from 'react'\r\n\r\nexport default class CardMembers extends React.Component {\r\n    state = {\r\n        byMember: ''\r\n    }\r\n\r\n    handleChange = (ev) => {\r\n        let { value } = ev.target;\r\n        this.setState(({ byMember: value }))\r\n    };\r\n\r\n    isMemberChecked = (memberId) => {\r\n        const currCard = this.props.getCurrCard();\r\n\r\n        if (currCard.members.find(member => memberId === member._id)) return true\r\n        return false\r\n    }\r\n\r\n    getMembers = () => {\r\n        let searchBy = this.state.byMember;\r\n        if (searchBy) return this.props.board.members.filter(member => member.username.includes(searchBy))\r\n\r\n        return this.props.board.members;\r\n    }\r\n\r\n    getTwoChars(str) {\r\n        let twoChars;\r\n        if (str.split(' ').length !== 2) twoChars = str?.charAt(0)\r\n        else twoChars = str?.charAt(0) + str.split(' ')[1].charAt(0)\r\n        if (!twoChars) twoChars = ''\r\n        return twoChars\r\n    }\r\n\r\n    render() {\r\n        const { addMember } = this.props\r\n        const { getMembers } = this\r\n        return (\r\n            <div className=\"card-members-container\">\r\n                <div className=\"search-input\">\r\n                    <input type=\"text\" className=\"input search-members\" value={this.state.byMember} autoComplete=\"off\"\r\n                        placeholder=\"Search member\" onChange={this.handleChange} />\r\n                </div>\r\n                <div className=\"members-list-container\">\r\n                    <h4>BOARD MEMBERS</h4>\r\n                    <div className=\"members-list\">\r\n                        {getMembers().map(member => {\r\n                            return <div key={member._id}\r\n                                className=\"member-item flex space-between align-center\" onClick={() => addMember(member)}>\r\n                                <div className=\"flex align-center\">\r\n                                    <div className=\"member flex justify-center align-center\" style={{\r\n                                        backgroundImage: `url(${member.imgUrl})`,\r\n                                        backgroundColor: member.bgColor\r\n                                    }}>\r\n                                        {this.getTwoChars(member.fullname)}\r\n                                    </div>\r\n                                    <span className=\"members-card-title\">{member.username}</span>\r\n                                </div>\r\n                                {this.isMemberChecked(member._id) ? <img src=\"/assets/img/icon-checked.png\" /> : ''}\r\n                            </div>\r\n                        })}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\n","import React from 'react'\r\n\r\nexport default class CardMove extends React.Component {\r\n\r\n    state = {\r\n        selectIsShown: false\r\n    }\r\n\r\n    onToggleSelect = () => {\r\n        this.setState(prevState => ({ selectIsShown: !prevState.selectIsShown }))\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    render() {\r\n        const { card, board } = this.props\r\n        const { selectIsShown } = this.state\r\n        return (\r\n            <div className=\"card-move-container\">\r\n                <h4>SELECT DESTINATION</h4>\r\n                <div className=\"select-stack\" onClick={this.onToggleSelect}>Select stack</div>\r\n                {selectIsShown && <div className=\"selection-container\">\r\n                    {board.stacks.map((stack, idx) => {\r\n                        if(stack.cards.find(currCard => currCard.id === card.id)) return;\r\n                        return <div key={idx} className=\"option-stack-name\" onClick={() => this.props.moveCardToStack(stack)}>{stack.title}</div>\r\n                    })}\r\n                </div>}\r\n            </div>\r\n\r\n        )\r\n    }\r\n\r\n}\r\n\r\n","import React, { Component } from 'react'\r\nimport DueDate from './DueDate'\r\nimport LabelsPicker from './LabelsPicker'\r\nimport CardMembers from './CardMembers'\r\nimport CardMove from './CardMove'\r\nimport OutsideClickHandler from 'react-outside-click-handler';\r\n\r\n\r\n\r\nexport default class ActionContainer extends Component {\r\n    state = {\r\n        action: null\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.checkAction();\r\n    }\r\n\r\n    checkAction() {\r\n        const actions = this.props.isShown\r\n        for (const key in actions) {\r\n            if (actions[key]) {\r\n                this.setState({ action: key });\r\n            }\r\n        }\r\n    }\r\n\r\n    titleToReturn(key) {\r\n        switch (key) {\r\n            case 'dueDate':\r\n                return 'Change Due Date'\r\n            case 'label':\r\n                return 'Labels'\r\n            case 'members':\r\n                return 'Members'\r\n            case 'move':\r\n                return 'Move'\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { isShown, card, onToggleAction, board, onChange, value, getCurrCard, addLabel, addMember, removeDueDate, moveCardToStack } = this.props;\r\n\r\n        const { action } = this.state;\r\n        return (\r\n            <OutsideClickHandler onOutsideClick={() => onToggleAction(action)} display={'contents'}>\r\n                < div className=\"labels-container\" >\r\n                    <div className=\"labels-header flex space-between\">\r\n                        <h3>{this.titleToReturn(action)}</h3>\r\n                        <button className=\"close-label\" onClick={() => onToggleAction(action)}>X</button>\r\n                    </div>\r\n                    {isShown.dueDate && <DueDate onChange={onChange} value={value} onToggleAction={onToggleAction} removeDueDate={removeDueDate} />}\r\n                    {isShown.label && <LabelsPicker addLabel={addLabel} getCurrCard={getCurrCard} />}\r\n                    {isShown.members && <CardMembers board={board} getCurrCard={getCurrCard} card={card} addMember={addMember} />}\r\n                    {isShown.move && <CardMove board={board} card={card} moveCardToStack={moveCardToStack} />}\r\n                </div >\r\n            </OutsideClickHandler>\r\n        )\r\n    }\r\n}\r\n","import React from 'react'\r\nimport { makeId } from '../services/utilService'\r\n\r\nexport default class CardChecklist extends React.Component {\r\n    state = {\r\n        newTodo: {\r\n            title: '',\r\n            isDone: false\r\n        }\r\n    }\r\n\r\n    onEditChecklistTitle = (ev) => {\r\n        let { value } = ev.target;\r\n        this.props.onEditChecklistTitle(this.props.checklist.id, value)\r\n    }\r\n\r\n    handleChange = (ev) => {\r\n        let { name, value } = ev.target;\r\n        this.setState(prevState => ({ newTodo: { ...prevState.newTodo, [name]: value } }))\r\n    }\r\n\r\n    onAddTodo = (ev) => {\r\n        ev.preventDefault();\r\n        this.props.addTodo(this.props.checklist.id, this.state.newTodo)\r\n        this.setState({ newTodo: { title: '', isDone: false } })\r\n    }\r\n\r\n    onUpdateTodo = (ev, todo, click = false) => {\r\n        let { name, value } = ev.target;\r\n        if (click) todo.isDone = !todo.isDone;\r\n\r\n        const newTodo = { ...todo, [name]: value }\r\n        this.props.addTodo(this.props.checklist.id, newTodo)\r\n    }\r\n\r\n    calculateProgBarWidth = () => {\r\n        let countIsDone = 0;\r\n        this.props.checklist.todos.forEach(todo => {\r\n            if (todo.isDone) countIsDone++;\r\n        })\r\n        if (!this.props.checklist.todos.length) return 0;\r\n        return ((countIsDone / this.props.checklist.todos.length) * 100).toFixed(0);\r\n    }\r\n\r\n    calculateProgBarBgc = () => {\r\n        const width = this.calculateProgBarWidth();\r\n        if (width === 100) return '#61bd4f'\r\n        return '#0079bf'\r\n    }\r\n\r\n    render() {\r\n        const { title, todos, id, } = this.props.checklist\r\n        const width = this.calculateProgBarWidth();\r\n        const bgc = this.calculateProgBarBgc();\r\n        return (\r\n            <div className=\"card-checklist-container\">\r\n                <div className=\"card-checklist-title flex align-center\">\r\n                    <img src=\"/assets/img/todos.png\" />\r\n                    <input type=\"text\" name=\"title\" className=\"checklist-title\" autoComplete=\"off\" onChange={this.onEditChecklistTitle} value={title} />\r\n                    <button className=\"btn btn-delete\" onClick={() => this.props.onRemoveChecklist(id)}>Delete</button>\r\n                </div>\r\n                <div className=\"checklist-main\">\r\n                    <div className=\"checklist-progress-bar-container\"><span>{`${width}%`}</span>\r\n                        <div className=\"checklist-progress-bar\">\r\n                            <div className=\"progress-bar\" style={{ width: `${width}%`, backgroundColor: `${bgc}` }}>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"checklist-todos-container\">\r\n                        {todos.map((todo) => <div className=\"flex align-center todo-item space-between\" key={todo.id}>\r\n                            <div className=\"flex align-center\">\r\n                                <div className={todo.isDone ? \"checkbox done\" : \"checkbox\"} onClick={(event) => this.onUpdateTodo(event, todo, true)}>\r\n                                </div>\r\n                                <input name=\"title\" className={`checklist-title todo-title ${todo.isDone ? 'done-decoration' : 'd'}`}\r\n                                    value={todo.title} onChange={(event) => this.onUpdateTodo(event, todo)} />\r\n                            </div>\r\n                            <div className=\"todo-delete-btn-container\"><img className=\"todo-delete-btn\" src=\"/assets/img/close.png\" onClick={() => this.props.onRemoveTodo(id, todo.id)} /></div>\r\n                        </div>\r\n                        )}\r\n                        <form onSubmit={this.onAddTodo}>\r\n                            <input type=\"text\" name=\"title\" className=\"checklist-title todo-title add-todo\" onChange={this.handleChange} placeholder=\"Add New Todo\" autoComplete=\"off\" value={this.state.newTodo.title} />\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div >\r\n        )\r\n    }\r\n}","import React from 'react'\r\nimport moment from 'moment'\r\n\r\nexport default function CardPreviewActions(props) {\r\n    const { card, getTwoChars } = props\r\n    return (\r\n        <>\r\n            {(card.members.length !== 0 || card.labels.length !== 0 || card.dueDate) && <div className=\"members-labels-container flex wrap\">\r\n                {card.members.length !== 0 &&\r\n                    <div className=\"member-card-container\" >\r\n                        <h3>Members</h3>\r\n                        <div className=\"flex wrap\">\r\n                            {card.members.map((member, idx) => <div key={idx} className=\"member flex justify-center align-center\"\r\n                                style={{ backgroundImage: `url(${member.imgUrl})`, backgroundColor: member.bgColor }}>\r\n                                {getTwoChars(member.fullname)}\r\n                            </div>)}\r\n                        </div>\r\n\r\n                    </div>}\r\n                {card.labels.length !== 0 &&\r\n                    <div className=\"labels-card-container\">\r\n                        <h3>Labels</h3>\r\n                        <div className=\" flex wrap\">\r\n                            {card.labels.map((label,idx) => <div key={idx} className=\"card-label-item\" style={{ backgroundColor: `${label.color}` }}>\r\n                                {label.title}\r\n                            </div>)}\r\n                        </div>\r\n\r\n                    </div>}\r\n                {card.dueDate &&\r\n                    <div className=\"due-date-container\">\r\n                        <h3>Due date</h3>\r\n                        <div className=\"flex time-container\">\r\n                            {moment(card.dueDate).format(\"MMM DD\")} at {moment(card.dueDate).format(\"hh:mm\")}\r\n                        </div>\r\n                    </div>\r\n                }\r\n            </div>}\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function CardImg(props) {\r\n    return (\r\n        <div className=\"card-img-container\">\r\n            <div className=\"card-mini-title flex align-center space-between\">\r\n                <div>\r\n                    <img src=\"/assets/img/style.png\"></img>\r\n                    <label className=\"card-txt-title\">Image:</label>\r\n                </div>\r\n                <button className=\"btn btn-delete\" onClick={() => props.onRemoveImg()}>Delete</button>\r\n            </div>\r\n            <div className=\"card-img\">\r\n                {props.isUploadImg? <div className=\"loading\">\r\n                    <div className=\"dot\"></div>\r\n                    <div className=\"dot\"></div>\r\n                    <div className=\"dot\"></div>\r\n                    <div className=\"dot\"></div>\r\n                    <div className=\"dot\"></div>\r\n                </div> : <img src={`${props.card.imgUrl}`} />}\r\n\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\n\r\nexport default function ReomveCard(props) {\r\n    return (\r\n        <div className=\"remove-board-container remove-card\">\r\n            <div className=\"remove-board-title flex align-center space-between\">\r\n                Remove card\r\n                <img src=\"/assets/img/close.png\" className=\"close-icon\" onClick={() => props.onToggleRemoveCard()} alt=\"\" />\r\n            </div>\r\n            <p>Are you sure?</p>\r\n            <button className=\"btn btn-danger btn-remove-card\" onClick={() => props.onRemoveCard()}>Yes, remove!</button>\r\n        </div>\r\n    )\r\n}\r\n","import React, { Component } from 'react'\r\nimport CardDescription from '../cmps/CardDescription'\r\nimport CardComments from '../cmps/CardComments'\r\nimport { save, loadBoard, saveCard } from '../store/actions/boardActions'\r\nimport { Link } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\nimport { makeId } from '../services/utilService'\r\nimport ActionContainer from '../cmps/ActionContainer'\r\nimport CardChecklist from '../cmps/CardChecklist'\r\nimport CardPreviewActions from '../cmps/CardPreviewActions'\r\nimport { uploadImg } from '../services/cloudinaryService'\r\nimport CardImg from '../cmps/CardImg'\r\nimport ReomveCard from '../cmps/RemoveCard'\r\nimport moment from 'moment'\r\n\r\nclass CardDetails extends Component {\r\n\r\n    state = {\r\n        card: null,\r\n        prevCardDesc: '',\r\n        isShown: {\r\n            label: false,\r\n            dueDate: false,\r\n            members: false,\r\n            move: false\r\n        },\r\n        comment: {\r\n            txt: ''\r\n        },\r\n        isUploadImg: false,\r\n        isFinishUpload: false,\r\n        isOpenModalRemove: false\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.props.currBoard) this.loadCard()\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.currBoard !== prevProps.currBoard) {\r\n            this.loadCard()\r\n        }\r\n    }\r\n\r\n    loadCard = () => {\r\n        const currCard = this.getCurrCard();\r\n        this.setState({ card: currCard }, () => this.setState({ prevCardDesc: this.state.card.description }))\r\n    }\r\n\r\n    getCurrCard = () => {\r\n        const cardId = this.props.match.params.cardId\r\n        let card;\r\n        this.props.currBoard.stacks.some(stack => {\r\n            card = stack.cards.find(card => card.id === cardId)\r\n            return card\r\n        })\r\n        if (!card) return this.props.history.push('/boards')\r\n        return card\r\n    }\r\n\r\n    onDescShown = (isShown, isPrevDesc) => {\r\n        this.setState({ isDescShown: isShown })\r\n        if (!isShown && isPrevDesc) this.setPrevDesc()\r\n    }\r\n\r\n    setPrevDesc = () => {\r\n        this.setState(prevState => ({ card: { ...prevState.card, description: this.state.prevCardDesc } }))\r\n    }\r\n\r\n    onBackBoard = (ev) => {\r\n        const { boardId } = this.props.match.params\r\n        this.props.history.push(`/boards/${boardId}`)\r\n    }\r\n\r\n    // @TODO: due date start from the DB, if got\r\n    onChangeDate = (dueDate) => {\r\n        const { currBoard, loggedInUser } = this.props\r\n        currBoard.activities.unshift({ id: makeId(), txt: `set card due date to ${moment(dueDate).format(\"MMM DD\")}`, createdAt: Date.now(), byMember: loggedInUser })\r\n        this.setState(prevState => ({ card: { ...prevState.card, dueDate } }), () => this.props.saveCard(this.state.card))\r\n    }\r\n\r\n    removeDueDate = () => {\r\n        const dueDate = '';\r\n        this.setState(prevState => ({ card: { ...prevState.card, dueDate } }), () => this.props.saveCard(this.state.card))\r\n    }\r\n\r\n    handleChange = ({ target }) => {\r\n        const field = target.name\r\n        const value = target.value\r\n\r\n        this.setState(prevState => ({ card: { ...prevState.card, [field]: value } }))\r\n    }\r\n\r\n    handleCommentChange = ({ target }) => {\r\n        this.setState(prevState => ({ comment: { ...prevState.comment, txt: target.value } }))\r\n    }\r\n\r\n    onAddComment = (ev) => {\r\n        ev.preventDefault();\r\n        const { comment } = this.state\r\n        if (!comment.txt) return;\r\n        comment.id = makeId();\r\n        comment.createdAt = Date.now();\r\n        comment.byMember = this.props.loggedInUser;\r\n        const currCard = this.getCurrCard()\r\n        currCard.comments.unshift(comment)\r\n        this.setState({ comment: { txt: '' } }, () => {\r\n            this.props.saveCard(this.state.card)\r\n        })\r\n    }\r\n\r\n    removeComment = (commentId) => {\r\n        this.setState(prevState => ({\r\n            card: {\r\n                ...prevState.card,\r\n                comments: prevState.card.comments.filter(comment => comment.id !== commentId)\r\n            }\r\n        }), () => {\r\n            this.props.saveCard(this.state.card)\r\n        })\r\n    }\r\n\r\n    onEditTitle = ({ target }) => {\r\n        this.setState(prevState => ({ card: { ...prevState.card, title: target.value } }), () => {\r\n            this.props.saveCard(this.state.card)\r\n        })\r\n    }\r\n\r\n    onSaveDesc = (ev) => {\r\n        ev.preventDefault()\r\n        this.setState({ prevCardDesc: this.state.card.description }, () => {\r\n            this.props.saveCard(this.state.card)\r\n            this.onDescShown(false)\r\n        })\r\n    }\r\n\r\n    onAddLabel = (currLabel) => {\r\n        let currCard = this.getCurrCard();\r\n        const labelIdx = currCard.labels.findIndex(label => label.title === currLabel.title);\r\n\r\n        if (labelIdx === -1) currCard.labels.push(currLabel)\r\n        else currCard.labels.splice(labelIdx, 1)\r\n\r\n        this.setState({ card: currCard }, () => this.props.saveCard(this.state.card))\r\n    }\r\n\r\n    onAddMember = (currMember) => {\r\n        let currCard = this.getCurrCard();\r\n        const memberIdx = currCard.members.findIndex(member => member._id === currMember._id);\r\n\r\n        if (memberIdx === -1) currCard.members.push(currMember)\r\n        else currCard.members.splice(memberIdx, 1)\r\n        console.log('members', this.state.card.members);\r\n        this.setState({ card: currCard }, () => this.props.saveCard(this.state.card))\r\n    }\r\n\r\n    getTwoChars(str) {\r\n        let twoChars;\r\n        if (str.split(' ').length !== 2) twoChars = str?.charAt(0)\r\n        else twoChars = str?.charAt(0) + str.split(' ')[1].charAt(0)\r\n        if (!twoChars) twoChars = ''\r\n        return twoChars\r\n    }\r\n\r\n    onAddChecklist = () => {\r\n        let newChecklist = {\r\n            id: makeId(),\r\n            title: 'Checklist',\r\n            todos: []\r\n        }\r\n        this.setState(prevState => ({\r\n            card: {\r\n                ...prevState.card,\r\n                checklists: [...prevState.card.checklists, newChecklist]\r\n            }\r\n        }), () => {\r\n            this.props.saveCard(this.state.card)\r\n        })\r\n    }\r\n\r\n    onEditChecklistTitle = (checklistId, title) => {\r\n        this.setState(prevState => ({\r\n            card: {\r\n                ...prevState.card,\r\n                checklists: prevState.card.checklists.map(checklist => {\r\n                    if (checklist.id === checklistId) checklist.title = title\r\n                    return checklist\r\n                })\r\n            }\r\n        }), () => {\r\n            this.props.saveCard(this.state.card)\r\n        })\r\n    }\r\n\r\n    onAddTodo = (checklistId, newTodo) => {\r\n        this.setState(prevState => ({\r\n            card: {\r\n                ...prevState.card,\r\n                checklists: prevState.card.checklists.map(checklist => {\r\n                    if (checklist.id === checklistId) {\r\n                        if (!newTodo.id) {\r\n                            checklist.todos.push(newTodo)\r\n                            newTodo.id = makeId();\r\n                        } else {\r\n                            checklist.todos = checklist.todos.map(todo => {\r\n                                if (todo.id === newTodo.id) return newTodo\r\n                                return todo\r\n                            })\r\n                        }\r\n                    }\r\n                    return checklist\r\n                })\r\n            }\r\n        }), () => {\r\n            this.props.saveCard(this.state.card)\r\n        })\r\n    }\r\n\r\n    onRemoveTodo = (checklistId, todoId) => {\r\n        this.setState(prevState => ({\r\n            card: {\r\n                ...prevState.card,\r\n                checklists: prevState.card.checklists.map(checklist => {\r\n                    if (checklist.id === checklistId) {\r\n                        checklist.todos = checklist.todos.filter(todo => todo.id !== todoId)\r\n                    }\r\n                    return checklist\r\n                })\r\n            }\r\n        }), () => {\r\n            this.props.saveCard(this.state.card)\r\n        })\r\n    }\r\n\r\n    onRemoveChecklist = (checklistId) => {\r\n        this.setState(prevState => ({\r\n            card: {\r\n                ...prevState.card,\r\n                checklists: prevState.card.checklists.filter(checklist => checklist.id !== checklistId)\r\n            }\r\n        }), () => {\r\n            this.props.saveCard(this.state.card)\r\n        })\r\n    }\r\n\r\n\r\n    onToggleAction = (action) => {\r\n        let actions = this.state.isShown;\r\n        for (const key in actions) {\r\n            if (key !== action) {\r\n                actions[key] = false;\r\n            }\r\n        }\r\n        actions[action] = !actions[action];\r\n        this.setState({ isShown: actions });\r\n    }\r\n\r\n    onOpenUpload = () => {\r\n        this.inputElement.click();\r\n    }\r\n\r\n    onUploadImg = async ev => {\r\n        this.setState({ isUploadImg: true })\r\n        const imgUrl = await uploadImg(ev)\r\n        this.setState({ isUploadImg: false, isFinishUpload: true })\r\n        this.setState(prevState => ({ card: { ...prevState.card, imgUrl } }), () => this.props.saveCard(this.state.card))\r\n    }\r\n\r\n    onRemoveImg = () => {\r\n        this.setState(prevState => ({ card: { ...prevState.card, imgUrl: null } }), () => this.props.saveCard(this.state.card))\r\n    }\r\n\r\n    moveCardToStack = (stackDest) => {\r\n        this.props.currBoard.stacks.forEach(stack => {\r\n            let cardIdx = stack.cards.findIndex(card => card.id === this.state.card.id)\r\n            if (cardIdx !== -1) {\r\n                stack.cards.splice(cardIdx, 1);\r\n            }\r\n            if (stack.title === stackDest.title) {\r\n                stack.cards.push(this.state.card)\r\n            }\r\n        })\r\n        this.props.save(this.props.currBoard)\r\n    }\r\n\r\n    onToggleRemoveCard = () => {\r\n        this.setState(prevState => ({ isOpenModalRemove: !prevState.isOpenModalRemove }))\r\n    }\r\n\r\n    onRemoveCard = () => {\r\n        const { currBoard, save, history, loggedInUser } = this.props\r\n        currBoard.stacks.forEach(stack => {\r\n            let cardIdx = stack.cards.findIndex(card => {\r\n                return card.id === this.state.card.id\r\n            })\r\n            if (cardIdx !== -1) {\r\n                stack.cards.splice(cardIdx, 1);\r\n            }\r\n        })\r\n        currBoard.activities.unshift({ id: makeId(), txt: `has removed a card`, createdAt: Date.now(), byMember: loggedInUser })\r\n        save(this.props.currBoard);\r\n        history.push(`/boards/${this.props.currBoard._id}`);\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        const { card, isDescShown, comment, isShown, isUploadImg, isOpenModalRemove } = this.state\r\n        const { onToggleAction } = this;\r\n\r\n        return ((!card) ? 'Loading...' :\r\n            <>\r\n                <div className=\"screen\" onMouseDown={this.onBackBoard} >\r\n                    <div className=\"modal-container shadow-drop-2-center\" onMouseDown={(ev) => ev.stopPropagation()}>\r\n                        <div className=\"modal-header flex space-between\">\r\n                            <input type=\"text\" name=\"title\" className=\"card-title\" onChange={this.onEditTitle} value={card.title} />\r\n                            <button className=\"close-modal\" onClick={this.onBackBoard}></button>\r\n                        </div>\r\n\r\n                        <div className=\"card-container flex\">\r\n                            <aside className=\"card-content\">\r\n                                <CardPreviewActions card={card} getTwoChars={this.getTwoChars} />\r\n                                <CardDescription description={card.description} onSaveDesc={this.onSaveDesc} handleChange={this.handleChange} isShown={this.onDescShown} isSubmitShown={isDescShown} />\r\n\r\n                                {(isUploadImg || card.imgUrl) && <CardImg card={card} isUploadImg={isUploadImg} onRemoveImg={this.onRemoveImg} />}\r\n                                {card.checklists && card.checklists.map(checklist => <CardChecklist key={checklist.id} checklist={checklist} addTodo={this.onAddTodo} onEditChecklistTitle={this.onEditChecklistTitle} onRemoveTodo={this.onRemoveTodo} onRemoveChecklist={this.onRemoveChecklist} />)}\r\n                                <CardComments comments={card.comments} onAddComment={this.onAddComment} handleChange={this.handleCommentChange} comment={comment.txt} getTwoChars={this.getTwoChars} removeComment={this.removeComment} />\r\n                            </aside>\r\n                            <aside className=\"card-actions\">\r\n                                <ul className=\"clean-list\">\r\n                                    <Link title=\"Edit Card Members\" to=\"#\" onClick={() => onToggleAction('members')}><li><img src=\"/assets/img/user-icon.png\" alt=\"\" />Members</li></Link>\r\n                                    <Link title=\"Edit Card Labels\" to=\"#\" onClick={() => onToggleAction('label')}><li><img src=\"/assets/img/label-icon.png\" alt=\"\" />Labels</li></Link>\r\n                                    <Link title=\"Add Checklist\" to=\"#\" onClick={this.onAddChecklist}><li><img src=\"/assets/img/checklist-icon.png\" alt=\"\" />Checklist</li></Link>\r\n                                    <Link title=\"Set Due Date\" to=\"#\" onClick={() => onToggleAction('dueDate')}><li><img src=\"/assets/img/clock-icon.png\" alt=\"\" />Due Date</li></Link>\r\n                                    <Link title=\"Add Image\" to=\"#\" onClick={() => this.onOpenUpload()}><li><img src=\"/assets/img/style.png\" alt=\"\" />Add Image</li></Link>\r\n                                    <input type=\"file\" ref={input => this.inputElement = input} name=\"imgUrl\" onChange={this.onUploadImg} hidden />\r\n                                    <Link title=\"Move Card\" to=\"#\" onClick={() => this.onToggleAction('move')}><li><img src=\"/assets/img/back.png\" className=\"img-rotate\" alt=\"\" />Move Card</li></Link>\r\n                                    <Link title=\"Remove Card\" to=\"#\" onClick={this.onToggleRemoveCard}><li className=\"li-last-child\"><img src=\"/assets/img/trash.png\" alt=\"\" />Remove Card</li></Link>\r\n\r\n                                    {isShown.dueDate && <ActionContainer isShown={isShown} onChange={this.onChangeDate} onToggleAction={onToggleAction} value={card.dueDate} removeDueDate={this.removeDueDate} />}\r\n                                    {isShown.label && <ActionContainer isShown={isShown} addLabel={this.onAddLabel} onToggleAction={onToggleAction} getCurrCard={this.getCurrCard} />}\r\n                                    {isShown.members && <ActionContainer board={this.props.currBoard} isShown={isShown} card={card} addMember={this.onAddMember} onToggleAction={onToggleAction} getCurrCard={this.getCurrCard} />}\r\n                                    {isShown.move && <ActionContainer board={this.props.currBoard} isShown={isShown} card={card} onToggleAction={onToggleAction} moveCardToStack={this.moveCardToStack} />}\r\n\r\n                                </ul>\r\n                                {isOpenModalRemove && <ReomveCard onToggleRemoveCard={this.onToggleRemoveCard} onRemoveCard={this.onRemoveCard} />}\r\n\r\n\r\n                            </aside>\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    save,\r\n    loadBoard,\r\n    saveCard\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        currBoard: state.board.currBoard,\r\n        loggedInUser: state.user.loggedInUser\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CardDetails);","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport { loadUsers } from '../store/actions/userActions'\r\nimport OutsideClickHandler from 'react-outside-click-handler';\r\n\r\nclass AddMember extends Component {\r\n\r\n    state = {\r\n        filterBy: {\r\n            board: null,\r\n            q: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({ filterBy: { board: this.props.currBoard, q: '' } }, () => this.props.loadUsers(this.state.filterBy))\r\n    }\r\n\r\n    handleChange = ({ target }) => {\r\n        const field = target.name\r\n        const value = target.value\r\n\r\n        this.setState(prevState => ({ filterBy: { ...prevState.filterBy, [field]: value } }), () => {\r\n            this.props.loadUsers(this.state.filterBy)\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { users, onClose, onAddMember } = this.props\r\n        const { filterBy } = this.state\r\n\r\n        return ((!users) ? 'Loading...' :\r\n            <OutsideClickHandler onOutsideClick={() => onClose()} display={'contents'}>\r\n                <div className=\"add-member-container slide-bottom\">\r\n                    <div className=\"add-member-title flex space-between align-center\">\r\n                        Add Members\r\n                    <img src=\"/assets/img/close-white.png\" className=\"close-icon\" onClick={() => onClose()} alt=\"\" />\r\n                    </div>\r\n                    <input type=\"text\" placeholder=\"Enter user name\" autoComplete=\"off\" name=\"q\" value={filterBy.q} onChange={this.handleChange} className=\"add-member-input\" />\r\n                    <div className=\"members-list flex column\">\r\n                        {users.map((user, idx) => <Link to=\"#\" key={idx} onClick={() => onAddMember(user)} className=\"single-member\">{user.username}</Link>)}\r\n                    </div>\r\n                </div>\r\n            </OutsideClickHandler>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        users: state.user.users,\r\n        currBoard: state.board.currBoard\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    loadUsers\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddMember);","import React from 'react'\r\n\r\nexport default function BoardBackground(props) {\r\n\r\n    const bgColors = ['blue', 'red', 'pink', 'black', 'yellow', '#122961', '#3867d6', '#fed330', '#eb3b5a']\r\n    const bgImgs = ['/assets/img/bg-beach.jpg', '/assets/img/bg-flowers.jpg',\r\n        '/assets/img/bg-sunset.jpg', '/assets/img/bg-view.jpg',\r\n        '/assets/img/bg-view2.jpg', '/assets/img/bg-view3.jpg',\r\n        '/assets/img/bg-view4.jpg', '/assets/img/bg-water.jpg', '/assets/img/bg-view5.jpg'];\r\n    const { type, onSetBg } = props\r\n\r\n    if (type === 'image') {\r\n        return (\r\n            <div className=\"backgrounds-container flex even wrap\">\r\n                {bgImgs.map((img, idx) => <div key={idx} className=\"background\" onClick={() => onSetBg(img, 'img')} style={{ backgroundImage: `url(${img})`, backgroundSize: '100%' }}></div>)}\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div className=\"backgrounds-container flex even wrap\">\r\n                {bgColors.map((color, idx) => <div key={idx} className=\"background\" onClick={() => onSetBg(color, 'color')} style={{ backgroundColor: color }}></div>)}\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport BoardBackground from '../cmps/BoardBackground'\r\nimport { save, loadBoard } from '../store/actions/boardActions'\r\nimport { connect } from 'react-redux'\r\n\r\nclass BoardStyling extends Component {\r\n\r\n    state = {\r\n        bgChooseShown: ''\r\n    }\r\n\r\n    setBgShown = (bgChooseShown) => {\r\n        this.setState({ bgChooseShown })\r\n    }\r\n\r\n    render() {\r\n        const { bgChooseShown } = this.state\r\n        const { onSetBg } = this.props\r\n        return (\r\n            <div className=\"board-styling-container\">\r\n                <div className=\"board-styling-title flex align-center\">\r\n                    {bgChooseShown && <img src=\"/assets/img/back.png\" onClick={() => this.setBgShown('')} className=\"back small-icon\" alt=\"\" />}Board Styling\r\n                </div>\r\n                {!bgChooseShown && <button onClick={() => this.setBgShown('color')} className=\"background-choose color-choose\"><span>Background Color</span></button>}\r\n                {!bgChooseShown && <button onClick={() => this.setBgShown('image')} className=\"background-choose img-choose\"><span>Background Image</span></button>}\r\n                {bgChooseShown && <BoardBackground onSetBg={onSetBg} type={bgChooseShown} />}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    save,\r\n    loadBoard\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        currBoard: state.board.currBoard\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(BoardStyling);","import React from 'react'\r\nimport moment from 'moment'\r\n\r\nexport default function BoardActivities(props) {\r\n    const { board } = props\r\n    return (\r\n        <div className=\"activities-container\">\r\n            <h2 className=\"activities-title\">Activities</h2>\r\n            <ul className=\"activities clean-list\">\r\n                {board.activities.map((activity, idx) => {\r\n                    return <li key={idx}>\r\n                        <span className=\"bold\">{activity.byMember.username}</span> {activity.txt}\r\n                        <p className=\"activity-at\">{moment(activity.createdAt).fromNow()}</p>\r\n                    </li>\r\n                })}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function ReomveBoard(props) {\r\n    return (\r\n        <div className=\"remove-board-container\">\r\n            <div className=\"remove-board-title flex align-center space-between\">\r\n                Remove board\r\n                <img src=\"/assets/img/close.png\" className=\"close-icon\" onClick={() => props.onToggleRemoveBoard()} alt=\"\" />\r\n            </div>\r\n            <p>Are you sure you want to remove the board?</p>\r\n            <button className=\"btn btn-danger\" onClick={() => props.onRemoveBoard()}>Yes, remove!</button>\r\n        </div>\r\n    )\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { removeBoard } from '../store/actions/boardActions';\r\nimport { connect } from 'react-redux';\r\nimport OutsideClickHandler from 'react-outside-click-handler';\r\nimport BoardStyling from '../cmps/BoardStyling';\r\nimport BoardActivities from '../cmps/BoardActivities';\r\nimport RemoveBoard from '../cmps/RemoveBoard';\r\n\r\nclass BoardMenu extends Component {\r\n\r\n    state = {\r\n        isStylingShown: false,\r\n        isRemoveBoardShown: false\r\n    }\r\n\r\n    onToggleStyling = () => this.setState(prevState => ({ isStylingShown: !prevState.isStylingShown }))\r\n    onToggleRemoveBoard = () => this.setState(prevState => ({ isRemoveBoardShown: !prevState.isRemoveBoardShown }))\r\n    onRemoveBoard = async () => {\r\n        await this.props.removeBoard(this.props.board._id)\r\n        this.props.history.push('/boards')\r\n    }\r\n\r\n    render() {\r\n        const { onClose, onSetBg, board } = this.props\r\n        const { isStylingShown, isRemoveBoardShown } = this.state\r\n        return (\r\n            <OutsideClickHandler onOutsideClick={() => onClose()} display={'contents'}>\r\n                <div className=\"board-menu-container\">\r\n                    \r\n                        <div className=\"board-menu-title flex space-between align-center\">\r\n                            Board Managment\r\n                    <img src=\"/assets/img/close-white.png\" className=\"close-icon\" onClick={() => onClose()} alt=\"\" />\r\n                        </div>\r\n\r\n                        <div className=\"board-menu-content\">\r\n                            {!isStylingShown && <ul className=\"board-menu-list clean-list\">\r\n                                <Link to=\"#\" onClick={this.onToggleStyling}><li><img src=\"/assets/img/style.png\" className=\"small-icon\" alt=\"\" />Board Styling</li></Link>\r\n                                <Link to={`/boards/${board._id}/statistics`} onClick={() => onClose()} ><li><img src=\"/assets/img/stats.png\" className=\"small-icon\" alt=\"\" />Show Board Statistics</li></Link>\r\n                                <Link to=\"#\" onClick={this.onToggleRemoveBoard}><li className=\"remove-board\"><img src=\"/assets/img/trash.png\" className=\"small-icon\" alt=\"\" />Remove Board</li></Link>\r\n                            </ul>}\r\n\r\n                            {isRemoveBoardShown && <RemoveBoard onToggleRemoveBoard={this.onToggleRemoveBoard} onRemoveBoard={this.onRemoveBoard} />}\r\n                            {!isStylingShown && <BoardActivities board={board} />}\r\n                            {isStylingShown && <BoardStyling onSetBg={onSetBg} onToggleStyling={this.onToggleStyling} />}\r\n                        </div>\r\n                    \r\n                </div>\r\n            </OutsideClickHandler>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    removeBoard\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(BoardMenu)","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { save, loadBoard } from '../store/actions/boardActions'\r\nimport AddMember from '../cmps/AddMember'\r\nimport BoardMenu from '../cmps/BoardMenu'\r\nimport { makeId } from '../services/utilService'\r\n\r\n\r\nclass BoardOptions extends Component {\r\n\r\n    state = {\r\n        isAddMemberShown: false,\r\n        isBoardMenuShown: false,\r\n        currBoard: null\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({ currBoard: this.props.currBoard })\r\n    }\r\n\r\n    getTwoChars(str) {\r\n        let twoChars;\r\n        if (str.split(' ').length !== 2) twoChars = str?.charAt(0)\r\n        else twoChars = str?.charAt(0) + str.split(' ')[1].charAt(0)\r\n        if (!twoChars) twoChars = ''\r\n        return twoChars\r\n    }\r\n\r\n\r\n    // @TODO: MAKE IT ONE FUNCTION!!!\r\n    onToggleAddMember = () => this.setState(prevState => ({ isAddMemberShown: !prevState.isAddMemberShown }))\r\n    onToggleBoardMenu = () => this.setState(prevState => ({ isBoardMenuShown: !prevState.isBoardMenuShown }))\r\n    // ***********\r\n\r\n    onAddMember = member => {\r\n        const { loggedInUser, currBoard } = this.props\r\n\r\n        currBoard.members.unshift(member)\r\n        currBoard.activities.unshift({ id: makeId(), txt: `added ${member.username} to the board`, createdAt: Date.now(), byMember: loggedInUser })\r\n        this.props.save(currBoard)\r\n        this.onToggleAddMember()\r\n    }\r\n\r\n    onRemoveMember = member => {\r\n        const { loggedInUser, currBoard } = this.props\r\n\r\n        const memberIdx = currBoard.members.findIndex(member => member._id === member._id);\r\n        currBoard.members.splice(memberIdx, 1)\r\n        currBoard.activities.unshift({ id: makeId(), txt: `removed ${member.username} from the board`, createdAt: Date.now(), byMember: loggedInUser })\r\n        this.props.save(currBoard)\r\n        this.setState({ currBoard })\r\n    }\r\n\r\n    render() {\r\n        const { board, onSetBg, history } = this.props\r\n        const { isAddMemberShown, isBoardMenuShown } = this.state\r\n        return (\r\n            <div className=\"board-options-container flex align-center space-between\">\r\n                <div className=\"board-title\">{board.title}</div>\r\n\r\n                <div className=\"board-members flex\">\r\n                    {board.members.map((member, idx) => <div key={idx} className=\"member flex justify-center align-center\" style={{ backgroundImage: `url(${member.imgUrl})`, backgroundColor: member.bgColor }}><img onClick={() => this.onRemoveMember(member)} src=\"/assets/img/close.png\" className=\"remove-member\" alt=\"\" />{this.getTwoChars(member.fullname)}</div>)}\r\n                </div>\r\n\r\n                <div className=\"board-options flex\">\r\n                    <button className=\"option flex align-center\" onClick={() => this.onToggleAddMember()}>\r\n                        <img src=\"/assets/img/add-user.png\" alt=\"\" />\r\n                    </button>\r\n                    <button className=\"option flex align-center\" onClick={() => this.onToggleBoardMenu()}>\r\n                        <img src=\"/assets/img/menu.png\" alt=\"\" />\r\n                    </button>\r\n                </div>\r\n                {isAddMemberShown && <AddMember onClose={this.onToggleAddMember} onAddMember={this.onAddMember} />}\r\n                {isBoardMenuShown && <BoardMenu history={history} onSetBg={onSetBg} board={board} onClose={this.onToggleBoardMenu} />}\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    save,\r\n    loadBoard\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        currBoard: state.board.currBoard,\r\n        loggedInUser: state.user.loggedInUser\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(BoardOptions);","import React from 'react'\r\nimport { ResponsivePie } from '@nivo/pie';\r\n\r\n\r\nexport class StatisticsPie extends React.Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.statsTimeOut = null;\r\n    }\r\n\r\n    state = {\r\n        data: [{ id: '', label: '', value: 0, color: '#fff' }]\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.statsTimeOut = setTimeout(() => {\r\n\r\n            this.setState({ data: this.props.data });\r\n\r\n        }, 250)\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.data !== prevProps.data) {\r\n            this.setState({ data: this.props.data });\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.statsTimeOut) clearTimeout(this.statsTimeOut);\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        const getSliceColor = slice => slice.color;\r\n        const { data } = this.state;\r\n        return (\r\n            // <span className=\"pie-content\">\r\n                <ResponsivePie\r\n                    data={this.props.data}\r\n                    className=\"pie-content\"\r\n                    margin={{ top: 10, right: 80, bottom: 80, left: 80 }}\r\n                    innerRadius={Math.random() * 0.75}\r\n                    padAngle={Math.floor(Math.random() * (10 - 1)) + 1}\r\n                    cornerRadius={5}\r\n                    colors={getSliceColor}\r\n                    borderWidth={2}\r\n                    borderColor={{ from: 'color', modifiers: [['darker', 0.2]] }}\r\n                    radialLabelsSkipAngle={10}\r\n                    radialLabelsTextXOffset={6}\r\n                    radialLabelsTextColor=\"#333333\"\r\n                    radialLabelsLinkOffset={0}\r\n                    radialLabelsLinkDiagonalLength={16}\r\n                    radialLabelsLinkHorizontalLength={24}\r\n                    radialLabelsLinkStrokeWidth={1}\r\n                    radialLabelsLinkColor={{ from: 'color' }}\r\n                    slicesLabelsSkipAngle={10}\r\n                    slicesLabelsTextColor=\"#333333\"\r\n                    animate={true}\r\n                    motionStiffness={90}\r\n                    motionDamping={15}\r\n                    defs={[\r\n                        {\r\n                            id: 'error',\r\n                            type: 'patternError',\r\n                            background: '#f2d600',\r\n                            color: 'rgba(255, 255, 255, 0.3)',\r\n                            rotation: -45,\r\n                            lineWidth: 6,\r\n                            spacing: 10\r\n                            // stagger: true\r\n                        },\r\n                        {\r\n                            id: 'lines',\r\n                            type: 'patternLines',\r\n                            background: 'inherit',\r\n                            color: 'rgba(255, 255, 255, 0.3)',\r\n                            rotation: -45,\r\n                            lineWidth: 6,\r\n                            spacing: 10\r\n                        }\r\n                    ]}\r\n                    fill={[\r\n                        {\r\n                            match: {\r\n                                id: 'error'\r\n                            },\r\n                            id: 'error'\r\n                        },\r\n                        {\r\n                            match: {\r\n                                id: 'c'\r\n                            },\r\n                            id: 'dots'\r\n                        },\r\n                        {\r\n                            match: {\r\n                                id: 'go'\r\n                            },\r\n                            id: 'dots'\r\n                        },\r\n                        {\r\n                            match: {\r\n                                id: 'python'\r\n                            },\r\n                            id: 'dots'\r\n                        },\r\n                        {\r\n                            match: {\r\n                                id: 'scala'\r\n                            },\r\n                            id: 'lines'\r\n                        },\r\n                        {\r\n                            match: {\r\n                                id: 'lisp'\r\n                            },\r\n                            id: 'lines'\r\n                        },\r\n                        {\r\n                            match: {\r\n                                id: 'elixir'\r\n                            },\r\n                            id: 'lines'\r\n                        },\r\n                        {\r\n                            match: {\r\n                                id: 'javascript'\r\n                            },\r\n                            id: 'lines'\r\n                        }\r\n                    ]}\r\n                    legends={[\r\n                        // {\r\n                        //     anchor: 'bottom',\r\n                        //     direction: 'row',\r\n                        //     translateY: 56,\r\n                        //     itemWidth: 50,\r\n                        //     itemHeight: 18,\r\n                        //     itemTextColor: '#999',\r\n                        //     symbolSize: 18,\r\n                        //     symbolShape: 'circle',\r\n                        //     effects: [\r\n                        //         {\r\n                        //             on: 'hover',\r\n                        //             style: {\r\n                        //                 itemTextColor: '#000'\r\n                        //             }\r\n                        //         }\r\n                        //     ]\r\n                        // }\r\n                    ]}\r\n                />\r\n            /* </span> */\r\n        )\r\n\r\n    }\r\n\r\n};","import React from 'react'\r\nimport { ResponsiveBar } from '@nivo/bar'\r\nimport { getRandomColor } from '../services/utilService';\r\n\r\nexport class StatisticsBar extends React.Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.statsTimeOut = null;\r\n    }\r\n\r\n    state = {\r\n        data: [{ member: '', Tasks: 0, 'Done Tasks': 0 }]\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.statsTimeOut = setTimeout(() => {\r\n\r\n            this.setState({ data: this.props.data });\r\n\r\n        },250)\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.data !== prevProps.data) {\r\n            this.setState({ data: this.props.data });\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if(this.statsTimeOut) clearTimeout(this.statsTimeOut);\r\n    }\r\n\r\n    render() {\r\n\r\n        const colors = { 'Tasks': getRandomColor(), 'Done Tasks': '#3f3f3f' };\r\n        const getUserColor = user => colors[user.id];\r\n        \r\n    \r\n        const keys = ['Tasks', 'Done Tasks'];\r\n        const { data } = this.state;\r\n        console.log(data);\r\n        console.log(this.props.data);\r\n        return (\r\n    \r\n            <ResponsiveBar\r\n                data={data}\r\n                keys={['Tasks', 'Done Tasks']}\r\n                indexBy=\"member\"\r\n                margin={{ top: 10, right: 130, bottom: 50, left: 60 }}\r\n                padding={0.3}\r\n                colors={getUserColor}\r\n                defs={[\r\n                    {\r\n                        id: 'admin',\r\n                        type: 'patternDots',\r\n                        background: 'inherit',\r\n                        color: '#38bcb2',\r\n                        size: 4,\r\n                        padding: 1,\r\n                        stagger: true\r\n                    },\r\n                    {\r\n                        id: 'lines',\r\n                        type: 'patternLines',\r\n                        background: 'inherit',\r\n                        color: '#eed312',\r\n                        rotation: -45,\r\n                        lineWidth: 6,\r\n                        spacing: 10\r\n                    }\r\n                ]}\r\n                fill={[\r\n                    {\r\n                        match: {\r\n                            id: 'admin'\r\n                        },\r\n                        id: 'dots'\r\n                    },\r\n                    {\r\n                        match: {\r\n                            id: 'sandwich'\r\n                        },\r\n                        id: 'lines'\r\n                    }\r\n                ]}\r\n                borderColor={{ from: 'color', modifiers: [['darker', 1.6]] }}\r\n                axisTop={null}\r\n                axisRight={null}\r\n                axisBottom={{\r\n                    tickSize: 5,\r\n                    tickPadding: 5,\r\n                    tickRotation: 0,\r\n                    legend: 'Users',\r\n                    legendPosition: 'middle',\r\n                    legendOffset: 32\r\n                }}\r\n                axisLeft={{\r\n                    tickSize: 5,\r\n                    tickPadding: 5,\r\n                    tickRotation: 0,\r\n                    legend: 'Tasks',\r\n                    legendPosition: 'middle',\r\n                    legendOffset: -35\r\n                }}\r\n                labelSkipWidth={12}\r\n                labelSkipHeight={12}\r\n                labelTextColor={{ from: { getUserColor }, modifiers: [['darker', 1.6]] }}\r\n                legends={[\r\n                    {\r\n                        dataFrom: \"keys\",\r\n                        anchor: 'bottom-right',\r\n                        direction: 'column',\r\n                        justify: false,\r\n                        translateX: 120,\r\n                        translateY: 0,\r\n                        itemsSpacing: 2,\r\n                        itemWidth: 100,\r\n                        itemHeight: 20,\r\n                        itemDirection: 'left-to-right',\r\n                        itemOpacity: 0.85,\r\n                        symbolSize: 20,\r\n                        effects: [\r\n                            {\r\n                                on: 'hover',\r\n                                style: {\r\n                                    itemOpacity: 1\r\n                                }\r\n                            }\r\n                        ]\r\n                    }\r\n                ]}\r\n                animate={true}\r\n                motionStiffness={90}\r\n                motionDamping={15}\r\n            />\r\n    \r\n    \r\n        )\r\n    }\r\n};","import React from 'react'\r\n\r\nimport { save, loadBoard } from '../store/actions/boardActions'\r\nimport { connect } from 'react-redux'\r\nimport { StatisticsPie } from '../cmps/StatisticsPie';\r\nimport { StatisticsBar } from '../cmps/StatisticsBar';\r\nimport moment from 'moment'\r\n\r\nclass BoardStatistics extends React.Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.elStats = React.createRef();\r\n        this.statsTimeOut = null;\r\n    }\r\n\r\n    state = {\r\n        board: {},\r\n        currView: 'byUsers'\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        if (this.props.currBoard) {\r\n            this.statsTimeOut = setTimeout(() => {\r\n\r\n                this.setState({ board: this.props.currBoard });\r\n            }, 250)\r\n        }\r\n\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.currBoard !== prevProps.currBoard) {\r\n            this.setState({ board: this.props.currBoard });\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.statsTimeOut) clearTimeout(this.statsTimeOut);\r\n    }\r\n\r\n\r\n    handleChange = ({ target }) => {\r\n        const field = target.name\r\n        const value = target.value\r\n\r\n        this.setState(prevState => ({ card: { ...prevState.card, [field]: value } }))\r\n    }\r\n\r\n    onBackBoard = (ev) => {\r\n        const { boardId } = this.props.match.params\r\n        this.props.history.push(`/boards/${boardId}`)\r\n    }\r\n\r\n    getStatsByLabels = (board) => {\r\n\r\n        let labels = {};\r\n\r\n        board.stacks.forEach((stack) => {\r\n            stack.cards.forEach((card) => {\r\n                card.labels.forEach((label) => {\r\n                    if (labels[label.title]) {\r\n                        labels[label.title].count += 1;\r\n                    } else {\r\n                        labels[label.title] = { count: 1, color: label.color };\r\n                    }\r\n                })\r\n\r\n            })\r\n        })\r\n        console.log(labels);\r\n        let labelStatsData = Object.keys(labels).map((labelTitle) => {\r\n            const labelInfo = labels[labelTitle];\r\n            console.log(labelInfo);\r\n            return ({\r\n                id: labelTitle,\r\n                label: labelTitle,\r\n                value: labelInfo.count,\r\n                color: labelInfo.color\r\n            });\r\n        })\r\n\r\n        return labelStatsData;\r\n    }\r\n\r\n    getStatsByUsers = (board) => {\r\n\r\n        let users = {};\r\n\r\n        board.stacks.forEach((stack) => {\r\n            stack.cards.forEach((card) => {\r\n                if (card.byMember) {\r\n                    console.log(card.byMember);\r\n                    if (users[card.byMember.fullname]) {\r\n                        users[card.byMember.fullname].tasks += 1;\r\n                        // users[card.byMember.fullname].doneTasks += 1;\r\n                    } else {\r\n                        users[card.byMember.fullname] = { tasks: 1 };\r\n                        // users[card.byMember.fullname] = { tasks: 1, doneTasks: label.color };\r\n                    }\r\n                }\r\n            })\r\n        })\r\n        console.log(users);\r\n        let userStatsData = Object.keys(users).map((fullname) => {\r\n            const userInfo = users[fullname];\r\n            userInfo.doneTasks = (Math.floor(Math.random() * userInfo.tasks))\r\n            console.log(userInfo);\r\n            return ({\r\n                member: fullname,\r\n                Tasks: userInfo.tasks - userInfo.doneTasks,\r\n                'Done Tasks': userInfo.doneTasks,\r\n            });\r\n        })\r\n        console.log(userStatsData);\r\n        return userStatsData;\r\n    }\r\n\r\n    getStatsByDueDates = (board) => {\r\n\r\n        let workload = { 'On Schedule': 0, Delayed: 0 };\r\n        let cardCount = 0;\r\n        board.stacks.forEach((stack) => {\r\n            cardCount += stack.cards.length;\r\n\r\n            stack.cards.forEach((card) => {\r\n                if (card.dueDate != '') {\r\n                    if (+moment(card.dueDate).format('x') > Date.now()) workload['On Schedule'] += 1;\r\n                    else workload.Delayed += 1;\r\n                }\r\n\r\n            })\r\n        })\r\n\r\n        if (!cardCount) return null;\r\n\r\n        let dueDatesStatsData = Object.keys(workload).map((type) => {\r\n\r\n            // console.log(dueDatesInfo);\r\n            return ({\r\n                id: type,\r\n                label: type,\r\n                value: workload[type],\r\n                color: (type === 'Delayed') ? 'tomato' : 'lightgreen'\r\n            });\r\n        })\r\n\r\n        return dueDatesStatsData;\r\n    }\r\n\r\n    getBoardStats = (board) => {\r\n\r\n        if (!board.stacks) return null;\r\n\r\n        let stats;\r\n\r\n        let byLabels = this.getStatsByLabels(board);\r\n        let byUsers = this.getStatsByUsers(board);\r\n        let byDueDate = this.getStatsByDueDates(board);\r\n\r\n        stats = { byLabels, byUsers, byDueDate };\r\n\r\n        return stats;\r\n    }\r\n\r\n    toggleStatView = (byType) => {\r\n        if (this.state.currView === byType) return;\r\n        this.setState({ currView: byType });\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        const { board, currView } = this.state;\r\n        const { } = this;\r\n\r\n        console.log(board);\r\n        let boardStats = null;\r\n        if (board) {\r\n            boardStats = this.getBoardStats(board);\r\n            console.log(boardStats);\r\n        }\r\n\r\n        return ((!board) ? 'Loading...' :\r\n\r\n            <>\r\n                <div className=\"screen stats\" onMouseDown={this.onBackBoard} >\r\n\r\n                    <section className=\"board-statistics modal-container flex column\" onMouseDown={(ev) => ev.stopPropagation()}\r\n                        ref={this.elStats}>\r\n                        <header className=\"board-statistics-header-span flex align-center justify-center\">\r\n                            <p className=\"board-statistics-header\">' {board.title} '</p>\r\n                            {/* <p className=\"secondary\">stats</p> */}\r\n                        </header>\r\n                        {(boardStats) ?\r\n                            <section className=\"board-statistics-content flex\">\r\n                                <div className=\"statistics-charts\">\r\n\r\n                                    {(boardStats.byLabels && currView === 'byLabels') ?\r\n                                        < div className=\"stat-item flex column justify-center align-center\">\r\n                                            <p className=\"board-stats-title\">Most Popular Labels</p>\r\n                                            <StatisticsPie data={boardStats.byLabels} type=\"labels\" />\r\n\r\n                                        </div>\r\n                                        : null\r\n                                    }\r\n                                    {(boardStats.byUsers && currView === 'byUsers') ?\r\n                                        < div className=\"stat-item flex column justify-center align-center\">\r\n                                            <p className=\"board-stats-title\">Weekly Members Workload</p>\r\n                                            <StatisticsBar data={boardStats.byUsers} />\r\n\r\n                                        </div>\r\n                                        : null\r\n                                    }\r\n                                    {(boardStats.byDueDate && currView === 'byDueDate') ?\r\n                                        < div className=\"stat-item flex column justify-center align-center\">\r\n                                            <p className=\"board-stats-title\">On-Time/Delayed Work</p>\r\n                                            <StatisticsPie data={boardStats.byDueDate} type=\"dueDate\" />\r\n\r\n                                        </div>\r\n                                        : null\r\n                                    }\r\n\r\n                                </div>\r\n\r\n                                <aside className=\"statistics-controllers flex column align-center space-around\">\r\n                                    <button className={`btn btn-primary stat-button ${(currView === 'byLabels') ? 'active-stat-btn' : ''}`}\r\n                                        onClick={() => this.toggleStatView('byLabels')}>By Labels</button>\r\n                                    <button className={`btn btn-primary stat-button ${(currView === 'byUsers') ? 'active-stat-btn' : ''}`}\r\n                                        onClick={() => this.toggleStatView('byUsers')}>By Members</button>\r\n                                    <button className={`btn btn-primary stat-button ${(currView === 'byDueDate') ? 'active-stat-btn' : ''}`}\r\n                                        onClick={() => this.toggleStatView('byDueDate')}>By Schedule</button>\r\n                                </aside>\r\n                            </section>\r\n                            : null\r\n\r\n                        }\r\n\r\n                    </section>\r\n\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nconst mapDispatchToProps = {\r\n    save,\r\n    loadBoard\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        currBoard: state.board.currBoard,\r\n        loggedInUser: state.user.loggedInUser\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(BoardStatistics);","import React from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\nimport { loadBoard, save, setBoard } from '../store/actions/boardActions';\r\nimport AddContent from '../cmps/AddContent';\r\nimport { Route } from 'react-router-dom';\r\nimport { CardPreview } from '../cmps/CardPreview.jsx';\r\nimport { Stack } from '../cmps/Stack.jsx';\r\nimport CardDetails from '../pages/CardDetails.jsx';\r\nimport BoardOptions from '../cmps/BoardOptions'\r\nimport socketService from '../services/socketService'\r\nimport BoardStatistics from '../pages/BoardStatistics'\r\nimport { makeId } from '../services/utilService';\r\n\r\n\r\n// GO TO FILE -->\r\n\r\n// a little function to help us with reordering the result\r\nconst reorder = (list, startIndex, endIndex) => {\r\n    const result = Array.from(list);\r\n    const [removed] = result.splice(startIndex, 1);\r\n    result.splice(endIndex, 0, removed);\r\n    return result;\r\n};\r\n\r\nconst move = (source, destination, droppableSource, droppableDestination) => {\r\n    const sourceClone = Array.from(source);\r\n    const destClone = Array.from(destination);\r\n    const [removed] = sourceClone.splice(droppableSource.index, 1);\r\n    destClone.splice(droppableDestination.index, 0, removed);\r\n\r\n    const result = {};\r\n    result[droppableSource.droppableId] = sourceClone;\r\n    result[droppableDestination.droppableId] = destClone;\r\n    return result;\r\n};\r\n\r\n\r\nclass BoardDetails extends React.Component {\r\n\r\n    // constructor() {\r\n    //     super();\r\n    // }\r\n\r\n    state = {\r\n        areLabelsOpen: false\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (!this.props.loggedInUser) return this.props.history.push('/boards')\r\n        const { boardId } = this.props.match.params;\r\n\r\n        socketService.setup();\r\n        socketService.emit('setBoard', boardId);\r\n        socketService.on('loadBoard', this.setBoard)\r\n        document.body.style.backgroundSize = 'cover'\r\n\r\n        this.props.loadBoard(boardId);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n\r\n        if (prevProps.currBoard !== this.props.currBoard) {\r\n            // this.setState({ currBoard: this.props.currBoard });\r\n            document.body.style.backgroundImage = `url(/${this.props.currBoard.bg})`;\r\n            document.body.style.backgroundColor = this.props.currBoard.bg;\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (!this.props.loggedInUser) return\r\n        document.body.style = '';\r\n        socketService.off('loadBoard', this.setBoard)\r\n        socketService.terminate()\r\n    }\r\n\r\n    setBoard = (currBoard) => this.props.setBoard(currBoard)\r\n\r\n    onToggleLabels = () => {\r\n\r\n        this.setState(({ areLabelsOpen }) => ({ areLabelsOpen: !areLabelsOpen }));\r\n    }\r\n\r\n    getItemStyle = (isDragging, draggableStyle) => {\r\n\r\n        return ({\r\n            // some basic styles to make the items look a bit nicer\r\n            ...draggableStyle,\r\n            // change background colour if dragging\r\n            background: isDragging ? 'rgb(219, 219, 219)' : '#ebecf0',\r\n        });\r\n    }\r\n\r\n    onStackAdd = (newStackTitle) => {\r\n\r\n        let currBoard = { ...this.props.currBoard };\r\n\r\n        currBoard.stacks.push({\r\n            bgColor: \"#fefefe\",\r\n            cards: [],\r\n            id: makeId(),\r\n            title: newStackTitle,\r\n        });\r\n\r\n        this.props.save(currBoard);\r\n    }\r\n\r\n    onCardAdd = (newCardTitle, stackId) => {\r\n\r\n        let currBoard = { ...this.props.currBoard };\r\n        let stackIdx = currBoard.stacks.findIndex((stack) => {\r\n            return stackId === stack.id;\r\n        });\r\n        currBoard.stacks[stackIdx].cards.push({\r\n            id: makeId(),\r\n            title: newCardTitle,\r\n            description: \"\",\r\n            comments: [],\r\n            checklists: [],\r\n            members: [],\r\n            labels: [],\r\n            activities: [],\r\n            byMember: this.props.loggedInUser,\r\n            createdAt: Date.now(),\r\n            dueDate: ''\r\n        });\r\n\r\n        this.props.save(this.props.currBoard);\r\n    }\r\n\r\n    onDragEnd = (result) => {\r\n\r\n        const { loggedInUser, currBoard } = this.props\r\n        const { source, destination } = result;\r\n\r\n        // Dropped outside the list\r\n        if (!destination) {\r\n            return;\r\n        }\r\n\r\n        let stacks = [...currBoard.stacks];\r\n        const newState = { ...currBoard };\r\n\r\n        // Changed Stacks order\r\n        if ((source.droppableId === destination.droppableId) && source.droppableId === 'board') {\r\n            const items = reorder(stacks, source.index, destination.index);\r\n            newState.stacks = items;\r\n\r\n            const stackSourceTitle = currBoard.stacks[source.index].title;\r\n            const stackPlace = destination.index + 1\r\n            currBoard.activities.unshift({ id: makeId(), txt: `moved stack ${stackSourceTitle} to place number ${stackPlace}`, createdAt: Date.now(), byMember: loggedInUser })\r\n\r\n\r\n            // Changed Cards order\r\n        } else {\r\n            const sIndex = +source.droppableId;\r\n            const dIndex = +destination.droppableId;\r\n\r\n            // Changed Card index in current Stack\r\n            if (sIndex === dIndex) {\r\n                const items = reorder(stacks[sIndex].cards, source.index, destination.index);\r\n                newState.stacks[sIndex].cards = items;\r\n\r\n                // Changed Card between Stacks\r\n            } else {\r\n                const sourceTitle = currBoard.stacks[+source.droppableId].title\r\n                const destTitle = currBoard.stacks[+destination.droppableId].title\r\n                const cardMovedTitle = currBoard.stacks[+source.droppableId].cards[source.index].title\r\n                currBoard.activities.unshift({ id: makeId(), txt: `moved card ${cardMovedTitle} from ${sourceTitle} to ${destTitle}`, createdAt: Date.now(), byMember: loggedInUser })\r\n\r\n                const result = move(stacks[sIndex].cards, stacks[dIndex].cards, source, destination);\r\n                newState.stacks[sIndex].cards = result[sIndex];\r\n                newState.stacks[dIndex].cards = result[dIndex];\r\n            }\r\n        }\r\n        this.props.save(newState)\r\n    }\r\n\r\n    stacks = (areLabelsOpen) => {\r\n        const board = this.props.currBoard;\r\n\r\n        return (\r\n            <span className=\"stacks-section flex\">\r\n                <DragDropContext\r\n                    onDragEnd={this.onDragEnd}\r\n                >\r\n                    <Droppable droppableId=\"board\" isCombineEnabled={false} type=\"STACK\" direction='horizontal'>\r\n                        {(provided, snapshot) => (\r\n                            <div\r\n                                ref={provided.innerRef}\r\n                                {...provided.droppableProps}\r\n                                className=\"stacks-content flex \"\r\n                            >\r\n\r\n                                {(board.stacks.length) ? board.stacks.map((stack, index) => (\r\n                                    <Draggable key={stack.id}\r\n                                        draggableId={stack.id} index={index} type=\"STACK\" >\r\n\r\n                                        {(provided, snapshot) => {\r\n                                            return (\r\n                                                <div\r\n                                                    ref={provided.innerRef}\r\n                                                    {...provided.draggableProps}\r\n                                                    style={{\r\n                                                        ...this.getItemStyle(\r\n                                                            snapshot.isDragging,\r\n                                                            provided.draggableProps.style,\r\n                                                        ),\r\n                                                        width: 250,\r\n\r\n                                                    }}\r\n                                                    className=\"stack-content flex column\"\r\n                                                >\r\n\r\n                                                    <p className=\"stack-title flex align-center\" {...provided.dragHandleProps} >{stack.title}</p>\r\n\r\n                                                    <Droppable key={index}\r\n                                                        droppableId={`${index}`} isCombineEnabled={false}\r\n                                                        type=\"CARD\">\r\n                                                        {(provided, snapshot) => (\r\n                                                            <Stack\r\n                                                                innerRef={provided.innerRef}\r\n                                                                provided={provided}\r\n                                                            >\r\n\r\n                                                                {stack.cards.map((card, index) => (\r\n                                                                    <Draggable\r\n                                                                        key={card.id}\r\n                                                                        draggableId={card.id}\r\n                                                                        index={index}\r\n                                                                        type=\"CARD\"\r\n                                                                    >\r\n                                                                        {(provided, snapshot) => (\r\n\r\n                                                                            <span>\r\n                                                                                <CardPreview\r\n                                                                                    title={card.title}\r\n                                                                                    innerRef={provided.innerRef}\r\n                                                                                    provided={provided}\r\n                                                                                    card={card}\r\n                                                                                    labelsOpen={areLabelsOpen}\r\n                                                                                    onToggleLabels={this.onToggleLabels}\r\n                                                                                    link={`/boards/${board._id}/card/${card.id}`}\r\n                                                                                    style={this.getItemStyle(\r\n                                                                                        snapshot.isDragging,\r\n                                                                                        provided.draggableProps.style,\r\n                                                                                    )}\r\n                                                                                    history={this.props.history}\r\n                                                                                >\r\n                                                                                </CardPreview>\r\n                                                                            </span>\r\n\r\n                                                                        )}\r\n                                                                    </Draggable>\r\n                                                                ))}\r\n                                                                {provided.placeholder}\r\n                                                            </Stack>\r\n                                                        )}\r\n                                                    </Droppable>\r\n                                                    <AddContent type=\"card\" onCardAdd={this.onCardAdd} itemId={stack.id} />\r\n                                                </div>\r\n                                            )\r\n                                        }}\r\n                                    </Draggable>\r\n                                )) : null}\r\n                                {provided.placeholder}\r\n                            </div>\r\n                        )}\r\n                    </Droppable>\r\n                    <div className=\"add-stack-container\">\r\n                        <AddContent type=\"stack\" onStackAdd={this.onStackAdd} />\r\n                    </div>\r\n                </DragDropContext>\r\n            </span>\r\n        )\r\n    }\r\n\r\n    onSetBg = (bg, type) => {\r\n        if (type === 'img') {\r\n            const bgUrl = bg.slice(1, bg.length + 1)\r\n            document.body.style.backgroundImage = `url(/${bgUrl})`\r\n            document.body.style.backgroundColor = ''\r\n            this.props.currBoard.bg = bgUrl\r\n        } else {\r\n            document.body.style.backgroundImage = ''\r\n            document.body.style.backgroundColor = bg\r\n            this.props.currBoard.bg = bg\r\n        }\r\n        const { loggedInUser } = this.props\r\n        // @TODO: ACTIONS - ADD ACTIVITY!\r\n        this.props.currBoard.activities.unshift({ id: makeId(), txt: `has changed the board background`, createdAt: Date.now(), byMember: loggedInUser })\r\n        this.props.save(this.props.currBoard)\r\n    }\r\n\r\n    render() {\r\n        const { history } = this.props\r\n        const { currBoard } = this.props;\r\n        const { areLabelsOpen } = this.state\r\n\r\n        if (!currBoard) return 'Loading...'\r\n\r\n        return (\r\n            <>\r\n                <BoardOptions history={history} board={currBoard} onSetBg={this.onSetBg} />\r\n                <Route component={CardDetails} path=\"/boards/:boardId/card/:cardId\" />\r\n                <Route component={BoardStatistics} path=\"/boards/:boardId/statistics\" />\r\n                <section className=\"board-content flex column align-start space-between\">\r\n\r\n                    {(currBoard) ? this.stacks(areLabelsOpen) : null}\r\n\r\n                </section>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        currBoard: state.board.currBoard,\r\n        loggedInUser: state.user.loggedInUser\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    loadBoard,\r\n    save,\r\n    setBoard\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(BoardDetails)\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { update, login } from '../store/actions/userActions';\r\nimport { uploadImg } from '../services/cloudinaryService'\r\n\r\nclass UserProfile extends Component {\r\n\r\n    state = {\r\n        user: null,\r\n        msg: '',\r\n        isUploadImg: false,\r\n        isFinishUpload: false,\r\n        isErrorMsg: false\r\n    }\r\n\r\n    componentDidMount() {\r\n        const { loggedInUser, history } = this.props\r\n        if (!loggedInUser) history.push('/login')\r\n        this.setState({ user: loggedInUser })\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearTimeout(this.timeoutFinishUpload)\r\n    }\r\n\r\n    onUploadImg = async ev => {\r\n        this.setState({ isUploadImg: true })\r\n        const imgUrl = await uploadImg(ev)\r\n        this.setState({ isUploadImg: false, isFinishUpload: true })\r\n        this.timeoutFinishUpload = setTimeout(() => {\r\n            this.setState({ isFinishUpload: false })\r\n        }, 2500);\r\n        this.setState(prevState => ({ user: { ...prevState.user, imgUrl } }))\r\n    }\r\n\r\n    handleChange = ({ target }) => {\r\n        const field = target.name\r\n        const value = target.value\r\n\r\n        this.setState(prevState => ({ user: { ...prevState.user, [field]: value } }))\r\n    }\r\n\r\n    onUpdateUser = async ev => {\r\n        ev.preventDefault();\r\n        const { username, password, fullname, imgUrl, confirmPassword } = this.state.user\r\n\r\n        if (!username || !password || !fullname) return this.setState({ msg: 'Please enter username, password and full name', isErrorMsg: true });\r\n        if (!password && !confirmPassword) return this.setState({ msg: 'Please enter username and password', isErrorMsg: true })\r\n        if (password !== confirmPassword) return this.setState({ msg: 'Passwords don\\'t match!', isErrorMsg: true })\r\n\r\n        const user = { _id: this.props.loggedInUser._id, username, password, fullname, imgUrl }\r\n        try {\r\n            await this.props.update(user)\r\n            user._id = this.props.loggedInUser._id\r\n            await this.props.login(user)\r\n        } catch (err) {\r\n            return this.setState({ isErrorMsg: true, msg: err })\r\n        }\r\n\r\n        return this.setState({ isErrorMsg: false, msg: 'User Updated Successfully' }, () => {\r\n            setTimeout(() => {\r\n                this.props.history.go(0)\r\n                this.setState({ msg: '' })\r\n            }, 2000);\r\n        })\r\n    }\r\n\r\n    onOpenUpload = () => {\r\n        this.inputElement.click();\r\n    }\r\n\r\n    render() {\r\n        const { user, msg, isErrorMsg, isUploadImg } = this.state\r\n\r\n        const msgStyle = (isErrorMsg) ? { backgroundColor: '#dd1739' } : { backgroundColor: '#17d965' }\r\n\r\n        if (!user) return 'Loading...'\r\n        return (\r\n            <div className=\"container flex justify-center\">\r\n                <div className=\"form-container\">\r\n                    <div className=\"user-profile-container flex align-start\">\r\n                        <div className=\"user-content\">\r\n                            <h2 className=\"user-profile-title flex align-center\">\r\n                                <img src=\"assets/img/user-icon.png\" className=\"user-icon\" alt=\"\" /> {this.props.loggedInUser.fullname}\r\n                            </h2>\r\n                            <form onSubmit={this.onUpdateUser} className=\"user-profile-form flex column align-start\">\r\n                                <input type=\"text\" placeholder=\"User name\" autoComplete=\"off\" onChange={this.handleChange} className=\"profile-input input\" name=\"username\" value={user.username} />\r\n                                <input type=\"text\" placeholder=\"Full name\" autoComplete=\"off\" onChange={this.handleChange} className=\"profile-input input\" name=\"fullname\" value={user.fullname} />\r\n                                <input type=\"password\" placeholder=\"Password\" autoComplete=\"off\" onChange={this.handleChange} className=\"profile-input input\" name=\"password\" />\r\n                                <input type=\"password\" placeholder=\"Confirm Password\" autoComplete=\"off\" onChange={this.handleChange} className=\"profile-input input\" name=\"confirmPassword\" />\r\n                                <input type=\"file\" name=\"imgUrl\" ref={input => this.inputElement = input} onChange={this.onUploadImg} hidden />\r\n                                <div className=\"img-submit-container flex space-between align-start\">\r\n                                    <span className=\"upload-img\" onClick={() => this.onOpenUpload()}>Upload Profile Image</span>\r\n                                    <button className={`btn btn-success ${isUploadImg ? 'disable' : ''}`} disabled={isUploadImg}>Save Changes</button>\r\n                                </div>\r\n\r\n                            </form>\r\n                            {msg && <div style={msgStyle} className=\"user-msg flex align-center space-between\">{msg}<img src=\"assets/img/error-white.png\" className=\"small-icon\" alt=\"\" /></div>}\r\n                        </div>\r\n                        <div className=\"user-img\">\r\n                            <img src={user.imgUrl} alt=\"\" />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        loggedInUser: state.user.loggedInUser\r\n    };\r\n};\r\nconst mapDispatchToProps = {\r\n    update,\r\n    login\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UserProfile);","import React, { Component } from 'react'\r\nimport { Link, NavLink } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\nimport { logout, signup } from '../store/actions/userActions';\r\nimport { getRandomColor, makeId } from '../services/utilService'\r\n\r\n\r\nclass NavBar extends Component {\r\n\r\n    state = {\r\n        isScroll: false,\r\n        isMenuOpen: false\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.scrollEvent()\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.document.removeEventListener('scroll', this.handleScroll)\r\n    }\r\n\r\n    scrollEvent() {\r\n        window.document.addEventListener('scroll', this.handleScroll)\r\n    }\r\n\r\n    get isHomepage() {\r\n        return this.props.location.pathname === '/'\r\n    }\r\n\r\n    handleScroll = () => {\r\n        let body = document.body\r\n        let theDocument;\r\n        theDocument = document.documentElement\r\n        theDocument = (theDocument.clientHeight) ? theDocument : body;\r\n\r\n        if (theDocument.scrollTop === 0) this.setState({ isScroll: false })\r\n        else this.setState({ isScroll: true })\r\n    }\r\n\r\n    onLogout = async () => {\r\n        await this.props.logout()\r\n\r\n        const userCred = {\r\n            username: `Guest-${makeId(4)}`,\r\n            password: '123456',\r\n            fullname: `Guesty McGuest-${makeId(4)}`,\r\n            imgUrl: 'https://res.cloudinary.com/shaishar9/image/upload/v1590398852/tgfntq8ghkaxjpo9seqa.jpg',\r\n            isGuest: true,\r\n            bgColor: getRandomColor()\r\n        }\r\n        this.props.signup(userCred)\r\n    }\r\n\r\n    toggleMenu = () => {\r\n        this.setState(prevState => ({ isMenuOpen: !prevState.isMenuOpen }))\r\n    }\r\n\r\n    render() {\r\n        const user = this.props.loggedInUser\r\n        const { isMenuOpen, isScroll } = this.state\r\n\r\n        return (\r\n            <>\r\n                {isMenuOpen && <div className=\"screen\" onClick={this.toggleMenu}></div>}\r\n                <div className={`nav-container ${(isScroll || !this.isHomepage) ? 'scrolled' : ''} ${(isMenuOpen) ? 'menu-open' : ''}`} style={(this.isHomepage) ? { marginTop: '10px' } : {}}>\r\n                    <div className={`${(this.isHomepage) ? 'container' : ''}`}>\r\n                        <div className=\"nav-content flex space-between align-center\">\r\n                            <Link to=\"/\"><h1 className=\"logo\"><span className=\"logo-we\">we</span>task</h1></Link>\r\n                            <ul className=\"main-nav clean-list flex\">\r\n                                <li className=\"quit-menu\"><button onClick={() => this.toggleMenu()}></button></li>\r\n                                <li><NavLink onClick={this.toggleMenu} exact to=\"/\">Home</NavLink></li>\r\n                                {user && <li><NavLink onClick={this.toggleMenu} to=\"/boards\">Boards</NavLink></li>}\r\n                                {user && <li><NavLink onClick={this.toggleMenu} to=\"/profile\">Profile</NavLink></li>}\r\n                                {user?.isGuest && <li><NavLink onClick={this.toggleMenu} to=\"/signup\">Signup</NavLink></li>}\r\n                                {user?.isGuest && <li><NavLink onClick={this.toggleMenu} to=\"/login\">Login</NavLink></li>}\r\n                                {!user?.isGuest && <li><Link onClick={this.toggleMenu} to=\"/\" onClick={this.onLogout}>Logout</Link></li>}\r\n                            </ul>\r\n                            <button onClick={() => this.toggleMenu()} className=\"btn-menu\"></button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        loggedInUser: state.user.loggedInUser\r\n    };\r\n};\r\nconst mapDispatchToProps = {\r\n    logout,\r\n    signup\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NavBar);","import React, { Component } from 'react'\r\nimport { Switch, Route } from 'react-router-dom'\r\nimport './style/global.scss';\r\nimport HomePage from './pages/HomePage'\r\nimport LoginSignup from './pages/LoginSignup'\r\nimport Boards from './pages/Boards'\r\nimport BoardDetails from './pages/BoardDetails'\r\nimport UserProfile from './pages/UserProfile'\r\nimport NavBar from './cmps/NavBar'\r\nimport { signup } from './store/actions/userActions';\r\nimport { connect } from 'react-redux'\r\nimport { makeId, getRandomColor } from './services/utilService'\r\n\r\n\r\nclass App extends Component {\r\n\r\n  componentDidMount() {\r\n    if (this.props.loggedInUser) return;\r\n    this.guestSignup()\r\n  }\r\n\r\n  guestSignup() {\r\n    const userCred = {\r\n      username: `Guest-${makeId(4)}`,\r\n      password: '123456',\r\n      fullname: `Guesty McGuest-${makeId(4)}`,\r\n      imgUrl: 'https://res.cloudinary.com/shaishar9/image/upload/v1590398852/tgfntq8ghkaxjpo9seqa.jpg',\r\n      isGuest: true,\r\n      bgColor: getRandomColor()\r\n    }\r\n    this.props.signup(userCred)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"app\">\r\n        <Route component={NavBar} path=\"/\" />\r\n        <main className=\"main-content top-p\">\r\n          <Switch>\r\n            <Route component={UserProfile} path=\"/user/:userId\" />\r\n            <Route component={BoardDetails} path=\"/boards/:boardId\" />\r\n            <Route component={Boards} path=\"/boards\" />\r\n            <Route component={UserProfile} path=\"/profile\" />\r\n            <Route component={LoginSignup} path=\"/login\" />\r\n            <Route component={LoginSignup} path=\"/signup\" />\r\n            <Route component={HomePage} path=\"/\" />\r\n          </Switch>\r\n        </main>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    loggedInUser: state.user.loggedInUser\r\n  };\r\n};\r\nconst mapDispatchToProps = {\r\n  signup\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","let localLoggedinUser = null;\r\nif (sessionStorage.user) localLoggedinUser = JSON.parse(sessionStorage.user);\r\n\r\nconst initialState = {\r\n    loggedInUser: localLoggedinUser,\r\n    users: []\r\n};\r\n\r\nexport default function (state = initialState, action = {}) {\r\n    switch (action.type) {\r\n        case 'SET_USER':\r\n            return {\r\n                ...state,\r\n                loggedInUser: action.user\r\n            }\r\n        case 'LOAD_USERS':\r\n            return {\r\n                ...state,\r\n                users: action.users\r\n            }\r\n        case 'UPDATE_USER':\r\n            return {\r\n                ...state,\r\n                users: state.users.map(user => {\r\n                    if (user._id === action.user._id) return action.user;\r\n                    return user;\r\n                })\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","const initialState = {\r\n    boards: [],\r\n    currBoard: null\r\n}\r\n\r\nexport default function boardReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case 'SET_BOARDS':\r\n            return {\r\n                ...state,\r\n                boards: action.boards\r\n            }\r\n        case 'SET_BOARD':\r\n            return {\r\n                ...state,\r\n                currBoard: action.board\r\n            }\r\n        case 'SET_CARD':\r\n            return {\r\n                ...state,\r\n                currBoard: {\r\n                    ...state.currBoard, stacks: state.currBoard.stacks.map(stack => {\r\n                        stack.cards = stack.cards.map(card => {\r\n                            if (card.id === action.card.id) return action.card;\r\n                            return card;\r\n                        })\r\n                        return stack\r\n                    })\r\n                }\r\n            }\r\n        case 'ADD_BOARD':\r\n            return {\r\n                ...state,\r\n                boards: [...state.boards, action.board]\r\n            }\r\n        case 'UPDATE_BOARD':\r\n            return {\r\n                ...state,\r\n                boards: state.boards.map(board => {\r\n                    if (board._id === action.board._id) return action.board;\r\n                    return board;\r\n                })\r\n            }\r\n        case 'REMOVE_BOARD':\r\n            return {\r\n                ...state,\r\n                boards: state.boards.filter(board => board._id !== action.boardId)\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","\r\nimport { createStore, combineReducers, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport userReducer from './reducers/userReducer.js';\r\nimport boardReducer from './reducers/boardReducers.js';\r\n\r\nconst rootReducer = combineReducers({\r\n    user: userReducer,\r\n    board: boardReducer\r\n});\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nexport const store = createStore(rootReducer,\r\n    composeEnhancers(applyMiddleware(thunk))\r\n)","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { store } from './store/store.js';\r\nimport { Provider } from 'react-redux'\r\nimport { Router } from \"react-router-dom\";\r\nimport history from './history'\r\n\r\n\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <Router history={history}>\r\n      <App />\r\n    </Router>\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}