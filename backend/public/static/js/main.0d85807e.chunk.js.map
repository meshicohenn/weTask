{"version":3,"sources":["pages/HomePage.jsx","services/httpService.js","services/userService.js","store/actions/userActions.js","services/utilService.js","services/cloudinaryService.js","pages/LoginSignup.jsx","cmps/board/BoardPreview.jsx","services/boardService.js","services/socketService.js","store/actions/boardActions.js","cmps/board/BoardBg.jsx","cmps/board/BoardAdd.jsx","cmps/board/BoardList.jsx","cmps/general/Loader.jsx","pages/Boards.jsx","cmps/board/AddContent.jsx","cmps/card/CardPreview.jsx","cmps/stack/Stack.jsx","cmps/card/CardDescription.jsx","cmps/card/CardComments.jsx","cmps/card/DueDate.jsx","cmps/card/CardChangeLabel.jsx","cmps/card/LabelsPicker.jsx","cmps/card/CardMembers.jsx","cmps/card/CardMove.jsx","cmps/card/CardTimeEstimation.jsx","cmps/card/RemoveCard.jsx","cmps/stack/ChangeStackTitle.jsx","cmps/stack/StackMenu.jsx","cmps/card/CardBgColor.jsx","cmps/card/ActionContainer.jsx","cmps/card/CardChecklist.jsx","cmps/card/CardPreviewActions.jsx","cmps/card/CardImg.jsx","cmps/card/CardActivity.jsx","cmps/card/CardShowTimeEstimation.jsx","pages/CardDetails.jsx","cmps/board/AddMember.jsx","cmps/board/BoardBackground.jsx","cmps/side_menu/BoardStyling.jsx","cmps/side_menu/BoardActivities.jsx","cmps/side_menu/RemoveBoard.jsx","cmps/side_menu/BoardMenu.jsx","cmps/card/FilterCardsList.jsx","cmps/board/BoardFilter.jsx","cmps/board/BoardOptions.jsx","cmps/side_menu/StatisticsPie.jsx","cmps/side_menu/StatisticsBar.jsx","cmps/side_menu/StatisticsInfoBlock.jsx","pages/BoardStatistics.jsx","services/boardDetailsUtils.js","pages/BoardDetails.jsx","pages/UserProfile.jsx","cmps/general/NavBar.jsx","App.js","serviceWorker.js","store/reducers/userReducer.js","store/reducers/boardReducers.js","store/store.js","history.js","index.js"],"names":["HomePage","className","to","src","alt","axios","Axios","create","withCredentials","endpoint","data","ajax","a","method","url","res","console","log","dir","response","error","login","logout","signup","getById","userId","httpService","query","filterBy","q","board","_id","update","user","userCred","_handleLogin","sessionStorage","clear","setItem","JSON","stringify","userCreds","dispatch","userService","setUser","err","type","makeId","length","id","possible","i","charAt","Math","floor","random","getRandomColor","letters","split","color","uploadImg","ev","UPLOAD_URL","formData","FormData","append","target","files","post","then","catch","LoginSignup","state","username","password","fullname","imgUrl","confirmPassword","isLogin","msg","isUploadImg","isFinishUpload","setCurrPage","props","match","path","setState","onUploadImg","timeoutFinishUpload","setTimeout","prevState","handleChange","field","name","value","handleUserSubmit","preventDefault","bgColor","history","push","onOpenUpload","inputElement","click","this","prevProps","params","clearTimeout","onSubmit","onChange","autoComplete","placeholder","ref","input","hidden","onClick","disabled","Component","mapDispatchToProps","connect","loggedInUser","BoardPreview","style","backgroundColor","bg","backgroundImage","title","save","remove","get","queryStr","prm","socket","setup","io","terminate","on","eventName","cb","off","emit","loadBoard","boardService","saveCard","card","getState","socketService","currBoard","BoardBg","bgs","changeBgColor","map","idx","key","backgroundSize","React","BoardAdd","bgColors","bgImgs","bgBy","onHandleSubmit","members","stacks","createdAt","Date","now","createdBy","activities","boardLabels","addBoard","onClose","stopPropagation","width","required","onChangeBgBy","savedBoard","BoardList","isAddOpen","toggleAddShown","boards","Loader","Boards","loadBoards","AddContent","isOpen","addItem","event","undefined","itemTitle","unshift","txt","byMember","onStackAdd","parentId","itemId","onCardAdd","toggleOpen","padding","fontSize","minWidth","maxWidth","borderTopLeftRadius","borderTopRightRadius","autoFocus","CardPreview","innerRef","provided","labelsOpen","todosStatus","todosCount","checklists","doneTodosCount","forEach","checklist","todos","todo","isDone","getTodosInfo","dueDateClass","dueDate","parse","getDueDateType","showInfo","comments","description","link","draggableProps","dragHandleProps","background","labels","onToggleLabels","label","foundLabel","find","currLabel","moment","format","Stack","children","droppableProps","CardDescription","textAreaHeight","textAreaMinHeight","isSubmitShown","loadDesc","setDescHeight","keyCode","onSaveDesc","newCard","onSetSubmitShown","isShown","isPrevDesc","htmlFor","onFocus","onKeyUp","minHeight","height","CardComments","comment","onAddComment","removeComment","filter","currComment","myRef","createRef","isFocusComment","current","focus","getTwoChars","fromNow","currCard","date","calendarType","locale","dueDateNotSave","onSubmitDate","onToggleAction","removeDueDate","CardChangeLabel","colors","isChecked","colorChecked","isColorChecked","currColor","changeLabel","labelId","onChangeLabelColor","onChangeTitle","labelSelected","onBackToLabels","LabelsPicker","isChangeShown","onToggleLabel","labelIdx","findIndex","splice","newBoard","isLabelChecked","onEditLabel","toUpperCase","slice","CardMembers","isMemberChecked","memberId","member","getMembers","searchBy","includes","onAddMember","currMember","memberIdx","str","twoChars","CardMove","selectIsShown","onToggleSelect","moveCardToStack","stackDest","stack","cardIdx","cards","CardTimeEstimation","timeEstimation","hours","minutes","days","onAddTimeEstimation","approved","removeCardEstimation","ReomveCard","onToggleRemoveCard","onRemoveStack","isPublic","ChangeStackTitle","stackTitle","onEditStackTitle","onNewStackTitle","stackIdx","StackMenu","isOpenModalRemove","onToggleRemoveStack","onStackRemove","onToggleChangeTitle","CardBgColor","onChangeBgColor","ActionContainer","action","checkAction","actions","onOutsideClick","display","titleToReturn","move","CardChecklist","newTodo","loadChecklistTitle","onEditChecklistTitle","onSaveChecklistTitle","checklistId","calculateProgBarWidth","countIsDone","toFixed","calculateProgBarBgc","onRemoveChecklist","currChecklist","onSaveTodo","foundTodo","currTodo","onRemoveTodo","bgc","onBlur","CardImg","onRemoveImg","CardActivity","activity","CardShowTimeEstimation","onFocusComment","CardDetails","onBackBoard","boardId","onChangeDate","onEditTitle","onEditTitleFinish","onAddChecklist","newChecklist","loadCard","cardId","onMouseDown","AddMember","loadUsers","users","BoardBackground","onSetBg","img","backgroundPosition","BoardStyling","bgChooseShown","setBgShown","BoardActivities","ReomveBoard","onToggleRemoveBoard","onRemoveBoard","BoardMenu","isStylingShown","isRemoveBoardShown","onToggleStyling","removeBoard","onCloseMenu","FilterCardsList","getStackByCard","BoardFilter","onSetFilterBy","clearFilter","filterCards","toLowerCase","concat","BoardOptions","isAddMemberShown","isBoardMenuShown","onToggleAddMember","onToggleBoardMenu","onRemoveMember","toggleShowStatistics","isShowingStatistics","StatisticsPie","statsTimeOut","getSliceColor","margin","top","right","bottom","left","innerRadius","padAngle","cornerRadius","borderWidth","borderColor","from","modifiers","radialLabelsSkipAngle","radialLabelsTextXOffset","radialLabelsTextColor","radialLabelsLinkOffset","radialLabelsLinkDiagonalLength","radialLabelsLinkHorizontalLength","radialLabelsLinkStrokeWidth","radialLabelsLinkColor","slicesLabelsSkipAngle","slicesLabelsTextColor","animate","motionStiffness","motionDamping","theme","fontFamily","legends","StatisticsBar","Tasks","updateDimensions","window","innerWidth","addEventListener","maxTasks","removeEventListener","keys","indexBy","axisTop","axisRight","axisBottom","tickSize","tickPadding","tickRotation","legend","legendPosition","legendOffset","axisLeft","tickValues","labelSkipWidth","labelSkipHeight","labelTextColor","dataFrom","anchor","direction","justify","translateX","translateY","itemsSpacing","itemWidth","itemHeight","itemDirection","itemOpacity","symbolSize","effects","axis","text","ticks","stroke","fill","strokeWidth","StatisticsInfoBlock","info","BoardStatistics","currView","cardCount","boardStats","getStatsByLabels","count","Object","labelTitle","labelInfo","getStatsByUsers","tasks","doneTasks","some","userStatsData","userInfo","getStatsByDueDates","workload","Delayed","getBoardStats","stats","byLabels","byUsers","byDueDate","totalTimeEstimation","getTotalTimeEstimation","isNoCardsBoard","estimate","duration","asHours","elStats","reorder","list","startIndex","endIndex","result","Array","removed","source","destination","droppableSource","droppableDestination","sourceClone","destClone","index","droppableId","BoardDetails","initialX","deltaX","offset","areLabelsOpen","stackMenus","populateStacksInfo","setBoard","setCard","getItemStyle","isDragging","draggableStyle","stackId","newStackTitle","elStacksSection","scrollTo","newCardTitle","onDragEnd","newState","items","stackSourceTitle","stackPlace","sIndex","dIndex","sourceTitle","destTitle","cardMovedTitle","bgUrl","document","body","component","scroll","isCombineEnabled","snapshot","draggableId","updateStackTitle","UserProfile","isErrorMsg","onUpdateUser","go","msgStyle","updatedUser","NavBar","isScroll","isMenuOpen","handleScroll","theDocument","documentElement","clientHeight","scrollTop","onLogout","toggleMenu","isGuest","scrollEvent","isHomepage","marginTop","exact","location","pathname","App","guestSignup","Boolean","hostname","localLoggedinUser","initialState","rootReducer","combineReducers","foundCard","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","createBrowserHistory","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.0d85807e.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport default function HomePage() {\r\n    return (\r\n        <>\r\n            <section className=\"home-container hero-container flex align-center\">\r\n                <div className=\"hero-cta flex space-between align-center\">\r\n                    <div className=\"hero-content\">\r\n                        <div className=\"hero-txt\">Work made easy</div>\r\n                        <p>\r\n                            Using cutting edge technologies and a great understanding of positive work principles, wework balances the best of both worlds for your team's success!\r\n                        </p>\r\n                        <Link to=\"/boards/5ecf72e3145b296860281f54\" className=\"hero-btn\">Try now</Link>\r\n                    </div>\r\n                    <img src=\"assets/img/hero-img.svg\" alt=\"\" className=\"hero-img\" />\r\n                </div>\r\n            </section>\r\n\r\n            <section className=\"home-container second-container flex align-center\">\r\n                <img src=\"assets/img/home-second-img.svg\" alt=\"\" className=\"hero-img\" />\r\n                <div className=\"content \">\r\n                    <div className=\"txt-title\">A work community like never before</div>\r\n                    <p>\r\n                        Getting a lot of great information upfront is great - but its what information you get that counts.\r\n                        With features like our 'Time Estimation' system for better development financial tracking, you can feel safe your seeing it all - and with 20/20 vision.\r\n                    </p>\r\n                </div>\r\n            </section>\r\n        </>\r\n    )\r\n}\r\n","import Axios from 'axios';\r\n\r\nconst BASE_URL = process.env.NODE_ENV === 'production'\r\n    ? '/api/'\r\n    : '//localhost:3030/api/'\r\n\r\n\r\nvar axios = Axios.create({\r\n    withCredentials: true\r\n});\r\n\r\nexport default {\r\n    get(endpoint, data) {\r\n        return ajax(endpoint, 'GET', data)\r\n    },\r\n    post(endpoint, data) {\r\n        return ajax(endpoint, 'POST', data)\r\n    },\r\n    put(endpoint, data) {\r\n        return ajax(endpoint, 'PUT', data)\r\n    },\r\n    delete(endpoint, data) {\r\n        return ajax(endpoint, 'DELETE', data)\r\n    }\r\n}\r\n\r\n\r\nasync function ajax(endpoint, method = 'get', data = null) {\r\n    try {\r\n        const res = await axios({\r\n            url: `${BASE_URL}${endpoint}`,\r\n            method,\r\n            data\r\n        })\r\n        return res.data;\r\n    } catch (err) {\r\n        console.log(`Had Issues ${method}ing to the backend, endpoint: ${endpoint}, with data: ${data}`);\r\n        console.dir(err);\r\n        throw err.response.data.error;\r\n    }\r\n}","import httpService from './httpService'\r\n\r\nexport default {\r\n    login,\r\n    logout,\r\n    signup,\r\n    getById,\r\n    query,\r\n    update\r\n}\r\n\r\nfunction query(filterBy) {\r\n    if (!filterBy) return httpService.get('users')\r\n    return httpService.get(`users?q=${filterBy.q}&boardId=${filterBy.board._id}`)\r\n}\r\n\r\nasync function login(userCred) {\r\n    try {\r\n        const user = await httpService.post('auth/login', userCred)\r\n        return _handleLogin(user)\r\n    } catch (err) {\r\n        throw err\r\n    }\r\n}\r\n\r\nasync function signup(userCred) {\r\n    const user = await httpService.post('auth/signup', userCred)\r\n    return _handleLogin(user)\r\n}\r\n\r\nasync function logout() {\r\n    await httpService.post('auth/logout');\r\n    sessionStorage.clear();\r\n}\r\n\r\nfunction _handleLogin(user) {\r\n    sessionStorage.setItem('user', JSON.stringify(user))\r\n    return user;\r\n}\r\n\r\nfunction getById(userId) {\r\n    return httpService.get(`user/${userId}`)\r\n}\r\n\r\nfunction update(user) {\r\n    return httpService.put(`users/${user._id}`, user)\r\n}","import userService from '../../services/userService';\r\n\r\nexport function login(userCreds) {\r\n    try {\r\n        return async dispatch => {\r\n            const user = await userService.login(userCreds);\r\n            dispatch(setUser(user));\r\n        };\r\n    } catch (err) {\r\n        throw err\r\n    }\r\n}\r\n\r\nexport function update(user) {\r\n    return async dispatch => {\r\n        const updatedUser = await userService.update(user)\r\n        dispatch({ type: 'UPDATE_USER', updatedUser })\r\n    }\r\n}\r\n\r\nexport function loadUsers(filterBy = null) {\r\n    return async dispatch => {\r\n        try {\r\n            const users = await userService.query(filterBy)\r\n            dispatch({ type: 'LOAD_USERS', users })\r\n        } catch (err) {\r\n            console.log('userActions: cannot load users!', err);\r\n        }\r\n    }\r\n}\r\n\r\nexport function signup(userCreds) {\r\n    return async dispatch => {\r\n        const user = await userService.signup(userCreds);\r\n        dispatch(setUser(user));\r\n    };\r\n}\r\n\r\nexport function logout() {\r\n    return async dispatch => {\r\n        await userService.logout();\r\n        dispatch(setUser(null));\r\n    };\r\n}\r\n\r\nexport function setUser(user) {\r\n    return {\r\n        type: 'SET_USER',\r\n        user\r\n    };\r\n}","export function makeId(length = 5) {\r\n    let id = '';\r\n    let possible = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n\r\n    for (let i = 0; i < length; i++) {\r\n        id += possible.charAt(Math.floor(Math.random() * possible.length));\r\n    }\r\n\r\n    return id;\r\n}\r\n\r\nexport function getRandomColor() {\r\n    const letters = '0123456789ABCDEF'.split('');\r\n    let color = '#';\r\n    for (let i = 0; i < 6; i++) {\r\n        color += letters[Math.floor(Math.random() * 16)];\r\n    }\r\n    return color;\r\n}\r\n","import axios from 'axios'\r\n\r\nexport function uploadImg(ev) {\r\n    const CLOUD_NAME = 'shaishar9'; // find it in your cloudinary account (main page)\r\n    const UPLOAD_URL = `https://api.cloudinary.com/v1_1/${CLOUD_NAME}/image/upload`;\r\n\r\n    const formData = new FormData();\r\n    formData.append('file', ev.target.files[0]);\r\n    formData.append('upload_preset', 'cgwfirgu'); // second parameter is the upload preset (you can find it in cloudinary settings)\r\n\r\n    return axios.post(UPLOAD_URL, formData)\r\n        .then(res => res.data.url)\r\n        .catch(err => console.error(err))\r\n}","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { login, signup } from '../store/actions/userActions';\r\nimport { getRandomColor } from '../services/utilService'\r\nimport { uploadImg } from '../services/cloudinaryService'\r\nimport { Link } from 'react-router-dom'\r\n\r\nclass LoginSignup extends Component {\r\n\r\n    state = {\r\n        user: {\r\n            username: '',\r\n            password: '',\r\n            fullname: '',\r\n            imgUrl: '',\r\n            confirmPassword: ''\r\n        },\r\n        isLogin: false,\r\n        msg: '',\r\n        isUploadImg: false,\r\n        isFinishUpload: false\r\n    }\r\n\r\n    componentDidMount() {\r\n        // if (!this.props.loggedInUser?.isGuest) this.props.history.push('/boards')\r\n        this.setCurrPage()\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.match.params !== this.props.match.params) {\r\n            this.setState({\r\n                msg: '', isUploadImg: false, isFinishUpload: false,\r\n                user: { username: '', password: '', confirmPassword: '', fullname: '', imgUrl: '' }\r\n            })\r\n            this.setCurrPage()\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearTimeout(this.timeoutFinishUpload)\r\n    }\r\n\r\n    setCurrPage = () => {\r\n        const isLogin = (this.props.match.path === '/login') ? true : false\r\n        this.setState({ isLogin })\r\n    }\r\n\r\n    onUploadImg = async ev => {\r\n        this.setState({ isUploadImg: true })\r\n        const imgUrl = await uploadImg(ev)\r\n        this.setState({ isUploadImg: false, isFinishUpload: true })\r\n        this.timeoutFinishUpload = setTimeout(() => {\r\n            this.setState({ isFinishUpload: false })\r\n        }, 2500);\r\n        this.setState(prevState => ({ user: { ...prevState.user, imgUrl } }))\r\n    }\r\n\r\n    handleChange = ({ target }) => {\r\n        const field = target.name\r\n        const value = target.value\r\n\r\n        this.setState(prevState => ({ user: { ...prevState.user, [field]: value } }))\r\n    }\r\n\r\n    handleUserSubmit = async ev => {\r\n        ev.preventDefault();\r\n        const { username, password, fullname, imgUrl, confirmPassword } = this.state.user\r\n        const { isLogin } = this.state\r\n\r\n        if (!username || !password && !confirmPassword && isLogin) return this.setState({ msg: 'Please enter username and password' })\r\n        if (!isLogin && password !== confirmPassword) return this.setState({ msg: 'Passwords don\\'t match!' })\r\n        if (!isLogin && !username && !password && !fullname) return this.setState({ msg: 'Please enter username, password and full name' });\r\n\r\n        const userCred = { username, password, fullname, imgUrl }\r\n        try {\r\n            if (this.state.isLogin) await this.props.login(userCred)\r\n            else {\r\n                userCred.bgColor = getRandomColor()\r\n                await this.props.signup(userCred)\r\n            }\r\n        } catch (err) {\r\n            return this.setState({ msg: err })\r\n        }\r\n\r\n        this.props.history.push('/boards')\r\n    }\r\n\r\n    onOpenUpload = () => {\r\n        this.inputElement.click();\r\n    }\r\n\r\n    render() {\r\n        const { isLogin, msg, user, isUploadImg, isFinishUpload } = this.state\r\n        return (\r\n            <div className=\"container flex column align-center\">\r\n                <div className=\"form-container\">\r\n                    <h2 className=\"form-title\">{isLogin ? 'Login' : 'Signup'}</h2>\r\n\r\n                    {isLogin && <div className=\"signup-login-link\"><Link to=\"/signup\">Sign up for an account</Link></div>}\r\n                    {!isLogin && <div className=\"signup-login-link\"><Link to=\"/login\">Already have an account? Sign in</Link></div>}\r\n                    {isFinishUpload && <div className=\"img-uploaded-msg flex align-center space-between\">Your image was uploaded successfully! <img src=\"assets/img/success.png\" className=\"small-icon\" alt=\"\" /></div>}\r\n                    <div className=\"form-img-container flex\">\r\n                        <form className=\"login-signup-form flex column align-start\" onSubmit={this.handleUserSubmit}>\r\n                            <input type=\"text\" onChange={this.handleChange} value={user.username} name=\"username\" autoComplete=\"off\" placeholder=\"Username\" />\r\n                            {!isLogin && <input type=\"text\" onChange={this.handleChange} value={user.fullname} name=\"fullname\" autoComplete=\"off\" placeholder=\"Full name\" />}\r\n                            <input type=\"password\" onChange={this.handleChange} value={user.password} name=\"password\" placeholder=\"Password\" />\r\n                            {!isLogin && <input type=\"password\" onChange={this.handleChange} value={user.confirmPassword} name=\"confirmPassword\" placeholder=\"Confirm password\" />}\r\n                            {!isLogin && <input type=\"file\" ref={input => this.inputElement = input} name=\"imgUrl\" onChange={this.onUploadImg} hidden />}\r\n                            <div className=\"img-submit-container flex align-start space-between\">\r\n                                {!isLogin && <span className=\"upload-img\" onClick={() => this.onOpenUpload()}>Upload Profile Image</span>}\r\n                                <button className={`btn btn-success ${isUploadImg ? 'disable' : ''}`} disabled={isUploadImg}>{isLogin ? 'Login' : 'Signup'}</button>\r\n                            </div>\r\n                        </form>\r\n                        <img src=\"assets/img/login-signup.png\" className=\"login-signup-img\" alt=\"\" />\r\n                    </div>\r\n\r\n                    {msg && <div className=\"user-msg flex align-center space-between\">{msg}<img src=\"assets/img/error-white.png\" className=\"small-icon\" alt=\"\" /></div>}\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        loggedInUser: state.user.loggedInUser\r\n    };\r\n};\r\nconst mapDispatchToProps = {\r\n    signup,\r\n    login\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginSignup);\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\nexport default function BoardPreview({ board }) {\r\n\r\n    return (\r\n        <Link to={`/boards/${board._id}`} className=\"board-item\" style={{ backgroundColor: board.bg, backgroundImage: `url(${board.bg})` }}>\r\n            <h3>{board.title}</h3>\r\n        </Link>\r\n    )\r\n}","import httpService from './httpService'\r\nconst BASE_URL = 'boards'\r\n\r\nexport default {\r\n    query,\r\n    save,\r\n    remove,\r\n    get\r\n}\r\n\r\nasync function query(userId) {\r\n    const queryStr = `?userId=${userId}`;\r\n    return await httpService.get(`${BASE_URL}${queryStr}`);\r\n}\r\n\r\nasync function get(id) {\r\n    return await httpService.get(`${BASE_URL}/${id}`)\r\n}\r\n\r\n\r\nasync function remove(id) {\r\n    return await httpService.delete(`${BASE_URL}/${id}`)\r\n}\r\n\r\nasync function save(board) {\r\n    var prm;\r\n    if (board._id) {\r\n        prm = await httpService.put(`${BASE_URL}/${board._id}`, board)\r\n    } else {\r\n        prm = await httpService.post(`${BASE_URL}`, board)\r\n    }\r\n    return prm\r\n}\r\n\r\n","import io from 'socket.io-client';\r\n\r\nconst BASE_URL =\r\n    process.env.NODE_ENV === 'production' ? '/' : '//localhost:3030';\r\n\r\nlet socket;\r\n\r\nexport default {\r\n    setup,\r\n    terminate,\r\n    on,\r\n    off,\r\n    emit\r\n};\r\n\r\nfunction setup() {\r\n    socket = io(BASE_URL);\r\n}\r\n\r\nfunction terminate() {\r\n    socket = null;\r\n}\r\n\r\nfunction on(eventName, cb) {\r\n    socket.on(eventName, cb);\r\n}\r\n\r\nfunction off(eventName, cb) {\r\n    socket.off(eventName, cb);\r\n}\r\n\r\nfunction emit(eventName, data) {\r\n    socket.emit(eventName, data);\r\n}\r\n","import boardService from '../../services/boardService'\r\nimport socketService from '../../services/socketService'\r\n\r\nexport function loadBoards(userId) {\r\n  return dispatch => {\r\n    return boardService.query(userId)\r\n      .then(boards => dispatch({ type: 'SET_BOARDS', boards }))\r\n  }\r\n}\r\n\r\nexport function updateStackTitle(id, title) {\r\n  return dispatch => dispatch({ type: 'UPDATE_STACK_TITLE', stack: { id, title } })\r\n}\r\n\r\nexport function loadCard(id) {\r\n  return dispatch => {\r\n    dispatch({ type: 'LOAD_CARD', id });\r\n  }\r\n}\r\n\r\nexport function loadBoard(id) {\r\n  return dispatch => {\r\n    boardService.get(id)\r\n      .then(board => {\r\n        dispatch({ type: 'SET_BOARD', board });\r\n      })\r\n  }\r\n}\r\nexport function saveCard(card) {\r\n  return (dispatch, getState) => {\r\n    dispatch({ type: 'SET_CARD', card });\r\n    socketService.emit('updateBoard', getState().board.currBoard);\r\n    boardService.save(getState().board.currBoard)\r\n  }\r\n}\r\nexport function removeBoard(boardId) {\r\n  return dispatch => {\r\n    return boardService.remove(boardId)\r\n      .then(() => {\r\n        dispatch({ type: 'REMOVE_BOARD', boardId })\r\n      })\r\n  }\r\n}\r\nexport function addBoard(board) {\r\n  return dispatch => {\r\n    boardService.save(board)\r\n      .then(savedBoard => dispatch({ type: 'ADD_BOARD', board: savedBoard }))\r\n  }\r\n}\r\n\r\nexport function save(board) {\r\n  return dispatch => {\r\n    dispatch({ type: 'SET_BOARD', board })\r\n    socketService.emit('updateBoard', board);\r\n    boardService.save(board)\r\n  }\r\n}\r\nexport function setBoard(board) {\r\n  return dispatch => dispatch({ type: 'SET_BOARD', board })\r\n}","import React from 'react'\r\n\r\n\r\nexport default class BoardBg extends React.Component {\r\n\r\n    render() {\r\n        const { bgs, type, changeBgColor  } = this.props\r\n        \r\n        return <ul className=\"bg-color-list clean-list flex wrap\">{\r\n            bgs.map((bg,idx )=> {\r\n                return <li key={idx} className=\"bg-color-li\" onClick={() => changeBgColor(bg)} \r\n                style={type === 'color' ? { backgroundColor: bg } : { backgroundImage: `url(${bg})`,backgroundSize:\"cover\" }}></li>\r\n            })\r\n        }\r\n      </ul >\r\n    }\r\n}\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { addBoard } from '../../store/actions/boardActions'\r\nimport { Link } from 'react-router-dom'\r\nimport BoardBg from './BoardBg'\r\n\r\n\r\n\r\nclass BoardAdd extends React.Component {\r\n    state = {\r\n        board: {\r\n            title: '',\r\n            bg: '#122961'\r\n        },\r\n        bgColors: ['#fd9644', '#fc5c65', '#fed330', '#26de81', '#2bcbba', '#45aaf2', '#4b7bec', '#a55eea', '#122961'],\r\n        bgImgs: ['assets/img/bg-beach.jpg', 'assets/img/bg-flowers.jpg',\r\n            'assets/img/bg-sunset.jpg', 'assets/img/bg-view.jpg',\r\n            'assets/img/bg-view2.jpg', 'assets/img/bg-view3.jpg',\r\n            'assets/img/bg-view4.jpg', 'assets/img/bg-water.jpg', 'assets/img/bg-view5.jpg'],\r\n        bgBy: 'color'\r\n    }\r\n\r\n    handleChange = (ev) => {\r\n        let { name, value } = ev.target;\r\n        this.setState(prevState => ({ board: { ...prevState.board, [name]: value } }))\r\n    };\r\n\r\n    onHandleSubmit = (ev) => {\r\n        ev.preventDefault()\r\n        const { board } = this.state\r\n        if (!board.title) return;\r\n        board.members = [this.props.loggedInUser];\r\n        board.stacks = [];\r\n        board.createdAt = Date.now();\r\n        board.createdBy = this.props.loggedInUser;\r\n        board.activities = [];\r\n        board.boardLabels = [{ id: '101', title: 'done', color: '#61bd4f' }, { id: '102', title: 'error', color: '#f2d600' },\r\n        { id: '103', title: 'design', color: '#ff9f1a' }, { id: '104', title: 'feature', color: '#eb5a46' },\r\n        { id: '105', title: 'bug', id: '106', color: '#c377e0' }, { id: '107', title: 'warning', color: '#0079bf' }];\r\n        this.props.addBoard(board)\r\n        this.setState({ board: '' })\r\n        this.props.onClose()\r\n    };\r\n\r\n    changeBgColor = (bg) => {\r\n        this.setState(prevState => ({ board: { ...prevState.board, bg } }))\r\n    }\r\n\r\n    onChangeBgBy(bgBy) {\r\n        this.setState({ bgBy });\r\n    }\r\n\r\n    render() {\r\n        const { board, bgColors, bgImgs, bgBy } = this.state\r\n        const { onClose } = this.props\r\n        return <>\r\n            <div className=\"screen\" onClick={onClose}>\r\n                <div className=\"add-board-container modal-container\" onClick={(ev) => ev.stopPropagation()} style={{ backgroundColor: \"unset\", width: 'fit-content' }}>\r\n                    <img src=\"assets/img/close.png\" onClick={onClose} className=\"close-btn\" alt=\"\" />\r\n                    <form onSubmit={this.onHandleSubmit}>\r\n                        <div className=\"main-form-container flex wrap\">\r\n                            <div className=\"main-form\"\r\n                                style={{ width: 'unset', backgroundColor: board.bg, backgroundImage: `url(${board.bg})`, backgroundSize: \"cover\" }}>\r\n                                <div className=\"main-form-header flex space-between\">\r\n                                    <h3>Create Board</h3>\r\n                                </div>\r\n\r\n                                <input name=\"title\" className=\"board-title\" value={board.title}\r\n                                    placeholder=\"Add board title\" onChange={this.handleChange} autoComplete=\"off\" required />\r\n                                <div className=\"bg-btns-container\">\r\n                                    <Link className=\"clean-link bg-btn\" to=\"#\" onClick={() => this.onChangeBgBy('color')}>Background Color</Link>\r\n                                    <Link className=\"clean-link bg-btn\" to=\"#\" onClick={() => this.onChangeBgBy('image')}>Background Image</Link>\r\n                                </div>\r\n\r\n                            </div>\r\n                            <div className=\"bg-color-container flex \">\r\n                                <BoardBg bgs={bgBy === 'color' ? bgColors : bgImgs} type={bgBy} changeBgColor={this.changeBgColor} />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"modal-footer flex justify-end\">\r\n                            <button className=\"create-board-btn btn btn-success\">Create Board</button>\r\n                        </div>\r\n                    </form>\r\n\r\n                </div>\r\n            </div>\r\n        </>\r\n    }\r\n}\r\n\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        loggedInUser: state.user.loggedInUser\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    addBoard\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(BoardAdd)","import React from 'react'\r\nimport BoardPreview from './BoardPreview'\r\nimport BoardAdd from './BoardAdd'\r\n\r\nexport default class BoardList extends React.Component {\r\n    \r\n    state = {\r\n        isAddOpen: false\r\n    }\r\n\r\n\r\n    toggleAddShown = () => {\r\n        this.setState(prevState => ({ isAddOpen: !prevState.isAddOpen }))\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                {this.state.isAddOpen && <BoardAdd onClose={this.toggleAddShown} />}\r\n                <div className=\"boards-list\">\r\n                    {this.props.boards.map(board => <BoardPreview key={board._id} board={board} />)}\r\n                    <button className=\"add-new-board board-item\" onClick={this.toggleAddShown}>Create new board</button>\r\n                </div>\r\n            </>)\r\n    }\r\n}\r\n\r\n\r\n\r\n","import React from 'react'\r\n\r\nexport default function Loader() {\r\n    return (\r\n        <div className=\"screen loader-screen\">\r\n            <div className=\"loader\">\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport BoardList from '../cmps/board/BoardList'\r\nimport { loadBoards } from '../store/actions/boardActions'\r\nimport { connect } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport Loader from '../cmps/general/Loader'\r\n\r\n\r\nclass Boards extends React.Component {\r\n\r\n    async componentDidMount() {\r\n        if (!this.props.loggedInUser) return this.props.history.push('/')\r\n        await this.props.loadBoards(this.props.loggedInUser._id)\r\n    }\r\n\r\n    render() {\r\n        const { loggedInUser, boards } = this.props\r\n        return ((!loggedInUser) ? <Loader /> :\r\n            <div className=\"container flex justify-center\">\r\n                <div className=\"form-container boards-page\">\r\n                    <header className=\"boards-header wrap flex space-between\">\r\n                        <h2 className=\"boards-title\">My Boards</h2>\r\n                        <Link to=\"/profile\" className=\"hello-btn\">Hello {loggedInUser.username}</Link>\r\n                    </header>\r\n                    <BoardList boards={boards} />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        boards: state.board.boards,\r\n        loggedInUser: state.user.loggedInUser\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    loadBoards\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Boards)","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { makeId } from '../../services/utilService'\r\nimport { connect } from 'react-redux'\r\n\r\nclass AddContent extends React.Component {\r\n\r\n    state = {\r\n        isOpen: false,\r\n        title: ''\r\n    };\r\n\r\n    addItem = (event) => {\r\n        event.preventDefault();\r\n\r\n        if (!event.target) return;\r\n        if (event.target.name.value === '' || event.target.name.value === undefined) return;\r\n\r\n        const itemTitle = event.target.name.value;\r\n        const { loggedInUser, type } = this.props\r\n        this.props.currBoard.activities.unshift({ id: makeId(), txt: `added new ${(type === 'stack') ? 'list' : type}: ${itemTitle}`, createdAt: Date.now(), byMember: loggedInUser })\r\n        switch (type) {\r\n            case 'stack':\r\n                this.props.onStackAdd(itemTitle);\r\n                break;\r\n            case 'card':\r\n                const parentId = this.props.itemId;\r\n                this.props.onCardAdd(itemTitle, parentId);\r\n                break;\r\n            default:\r\n                \r\n        }\r\n\r\n        this.setState({ isOpen: false, title: '' });\r\n    }\r\n\r\n    handleChange = ({ target }) => {\r\n\r\n        let title = target.value;\r\n\r\n        this.setState({ title });\r\n    }\r\n\r\n    toggleOpen = (event) => {\r\n        event.preventDefault();\r\n\r\n        this.setState(({ isOpen }) => ({ isOpen: !isOpen }));\r\n    }\r\n\r\n    render() {\r\n        const { title, isOpen } = this.state;\r\n        const { type } = this.props;\r\n\r\n        return (\r\n\r\n            <div className={`add-content-container flex align-start add-${type}`} style={{\r\n\r\n                // marginRight: (type === 'stack') ? '16px' : '0',\r\n                padding: (type === 'stack') ? '10px 20px' : '10px 15px',\r\n                fontSize: (type === 'stack') ? 16 : 14,\r\n                color: (type === 'stack') ? '#ffffff' : '#888888',\r\n                // background: (type === 'stack') ? 'lightgreen' : 'cornflowerblue',\r\n                minWidth: (type === 'stack') ? 250 : '100%',\r\n                maxWidth: (type === 'stack') ? 250 : '100%',\r\n                borderTopLeftRadius: (type === 'stack') ? 3 : 0,\r\n                borderTopRightRadius: (type === 'stack') ? 3 : 0\r\n\r\n            }}>\r\n                {(isOpen)\r\n                    ?\r\n                    <>\r\n                        <form onSubmit={this.addItem} className={`add-content flex column align-start ${type === 'stack' ? '' : 'card-add-content'}`}>\r\n                            <input name=\"name\" autoComplete=\"off\" onChange={this.handleChange}\r\n                                value={title} placeholder={`Enter ${(type === 'stack') ? 'list' : type} title...`}\r\n                                className={`input ${(type === 'stack') ? 'stack-input' : 'card-input'}`} style={{ padding: '8px 12px' }} autoFocus={true} />\r\n                            <span className=\"add-content-buttons flex space-between\">\r\n                                <button className={`btn btn-${(type === 'stack') ? 'primary' : 'success'} btn-small`}>{`Add ${type}`}</button>\r\n                                <img src={`/assets/img/close${(type === 'stack') ? '-stack' : ''}.png`} onClick={this.toggleOpen} className=\"close-add-icon\" alt=\"\" />\r\n                            </span>\r\n                        </form>\r\n                    </>\r\n                    :\r\n                    <>\r\n                        <Link to=\"#\" onClick={this.toggleOpen} className=\"add-content-title\">{`Add ${(type === 'stack') ? 'list' : type}`}</Link>\r\n                    </>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        currBoard: state.board.currBoard,\r\n        loggedInUser: state.user.loggedInUser\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(AddContent)\r\n","import React from 'react';\r\nimport moment from 'moment'\r\n\r\nexport function CardPreview(props) {\r\n\r\n    function onLabelsPress(ev) {\r\n        ev.stopPropagation()\r\n        props.onToggleLabels();\r\n    }\r\n\r\n    function getTodosInfo() {\r\n\r\n        let doneTodosCount = 0;\r\n\r\n        card.checklists.forEach(checklist => {\r\n            todosCount += checklist.todos.length;\r\n\r\n            checklist.todos.forEach(todo => {\r\n\r\n                if (todo.isDone) doneTodosCount += 1;\r\n            })\r\n        })\r\n\r\n        return `${doneTodosCount}/${todosCount}`;\r\n    }\r\n\r\n    function getDueDateType() {\r\n        const now = Date.now();\r\n        return (Date.parse(card.dueDate) > now) ? 'future' : 'past'\r\n    }\r\n\r\n    const { card, innerRef, provided, style, labelsOpen } = props;\r\n\r\n    let todosStatus = '';\r\n    let todosCount = 0;\r\n    if (card.checklists && card.checklists.length) {\r\n        todosStatus = getTodosInfo();\r\n    }\r\n\r\n    let dueDateClass = '';\r\n    if (card.dueDate && card.dueDate !== '') {\r\n        dueDateClass = 'due-date-' + getDueDateType();\r\n    }\r\n\r\n    const showInfo = (card.comments.length || card.description !== '' || todosCount || card.dueDate !== '');\r\n\r\n    function onCardClick() {\r\n        props.history.push(props.link)\r\n    }\r\n    // console.log(style);\r\n\r\n    return (\r\n        <>\r\n            {/* <Link to={link}> */}\r\n            <div className=\"card-preview flex column align-center justify-center\" onClick={onCardClick} ref={innerRef} style={style}\r\n                {...provided.draggableProps} {...provided.dragHandleProps} >\r\n                <div className=\"card-preview-content\" style={{ background: style.background }}>\r\n\r\n\r\n                    {(card.labels.length)\r\n                        ?\r\n                        <div className={`card-labels flex wrap align-center`} onClick={(event) => onLabelsPress(event)}>\r\n                            {\r\n                                card.labels.map(label => {\r\n                                    const foundLabel = props.board.boardLabels.find(currLabel => currLabel.id === label.id)\r\n                                    if (foundLabel) {\r\n                                        return (\r\n                                            <div className={`card-label flex align-center justify-center ${(labelsOpen) ? 'label-expand' : ''}`}\r\n                                                key={label.title + card.id} style={{\r\n                                                    background: foundLabel.color,\r\n\r\n                                                }}>{(labelsOpen) ? foundLabel.title : ''}</div>\r\n                                        )\r\n                                        }\r\n                                    })\r\n                            }\r\n                        </div>\r\n                        : null\r\n\r\n                    }\r\n                    {card.imgUrl && <img src={card.imgUrl} className=\"card-img\" alt=\"\" />}\r\n                    <p className={`card-preview-title ${(card.labels.length) ? 'top-margin' : ''}`} >{props.title}</p>\r\n\r\n                    {(showInfo)\r\n                        ?\r\n                        <div className=\"card-preview-info flex align-center space-start\">\r\n\r\n                            {(card.dueDate && card.dueDate !== '')\r\n                                ?\r\n                                <span className={`preview-info-span flex align-center due-date ${dueDateClass}`}>\r\n                                    <img className=\"preview-info-img\" src=\"/assets/img/clock.png\" alt=\"\" />\r\n                                    <p className=\"preview-info-count\">{moment(card.dueDate).format(\"MMM DD\")}</p>\r\n                                </span>\r\n                                :\r\n                                null\r\n                            }\r\n                            {(card.description !== '')\r\n                                ?\r\n                                <span className=\"preview-info-span flex align-center\">\r\n                                    <img className=\"preview-info-img\" src=\"/assets/img/description.png\" alt=\"\" />\r\n                                </span>\r\n                                :\r\n                                null\r\n                            }\r\n                            {(card.comments.length)\r\n                                ?\r\n                                <span className=\"preview-info-span flex align-center\">\r\n                                    <img className=\"preview-info-img\" src=\"/assets/img/comment.png\" alt=\"\" />\r\n                                    <p className=\"preview-info-count\">{card.comments.length}</p>\r\n                                </span>\r\n                                :\r\n                                null\r\n                            }\r\n                            {(card.checklists && todosCount)\r\n                                ?\r\n                                <span className=\"preview-info-span flex align-center\">\r\n                                    <img className=\"preview-info-img\" src=\"/assets/img/todos.png\" alt=\"\" />\r\n                                    <p className=\"preview-info-count\">{todosStatus}</p>\r\n                                </span>\r\n                                :\r\n                                null\r\n                            }\r\n\r\n                        </div>\r\n                        : null}\r\n                </div>\r\n            </div>\r\n            {/* </Link> */}\r\n\r\n        </>\r\n    )\r\n\r\n}","import React from 'react'\r\n\r\nexport class Stack extends React.Component {\r\n\r\n    state = {\r\n\r\n    };\r\n\r\n    render() {\r\n        const { innerRef, provided, style, children } = this.props;\r\n        return (\r\n            <div className=\"stack flex column space-start\" ref={innerRef} style={style}\r\n                {...provided.droppableProps} >\r\n                {children}\r\n            </div>\r\n\r\n        )\r\n    }\r\n};","import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { makeId } from '../../services/utilService'\r\n\r\n\r\nexport default class CardDescription extends Component {\r\n\r\n    state = {\r\n        description: '',\r\n        textAreaHeight: 35,\r\n        textAreaMinHeight: 0,\r\n        isSubmitShown: false\r\n    }\r\n\r\n    componentDidMount() {\r\n        const { card } = this.props\r\n        this.loadDesc()\r\n        if (card.description.split(/\\r\\n|\\r|\\n/).length < 5) this.setState({ textAreaMinHeight: '50px' })\r\n        else this.setState({ textAreaMinHeight: '150px' })\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.card.description !== this.props.card.description) this.loadDesc()\r\n    }\r\n\r\n    handleChange = ({ target }) => {\r\n        const value = target.value\r\n        this.setState({ description: value })\r\n    }\r\n\r\n    loadDesc = () => {\r\n        this.setState({ description: this.props.card.description })\r\n    }\r\n\r\n    setDescHeight = (ev) => {\r\n        if (ev.keyCode === 13) this.setState(prevState => ({ textAreaHeight: 20 + prevState.textAreaHeight }))\r\n    }\r\n\r\n    onSaveDesc = (ev) => {\r\n        ev.preventDefault()\r\n\r\n        const newCard = { ...this.props.card }\r\n        newCard.activities.unshift({\r\n            id: makeId(), txt: `edited card description`,\r\n            createdAt: Date.now(), byMember: this.props.loggedInUser\r\n        })\r\n        newCard.description = this.state.description\r\n        this.props.saveCard(newCard)\r\n        this.onSetSubmitShown(false)\r\n    }\r\n\r\n    onSetSubmitShown = (isShown, isPrevDesc) => {\r\n        this.setState({ isSubmitShown: isShown })\r\n        if (!isShown && isPrevDesc) this.loadDesc()\r\n    }\r\n\r\n    render() {\r\n        const { isSubmitShown, description } = this.state\r\n        return (\r\n            <div className=\"card-desc-container\">\r\n\r\n                <div className=\"card-mini-title flex align-center\">\r\n                    <img src=\"/assets/img/description.png\" alt=\"\"></img>\r\n                    <label className=\"card-txt-title\" htmlFor=\"cardDesc\">Description</label>\r\n                </div>\r\n\r\n                <form className=\"main-content-card-action\" onSubmit={this.onSaveDesc}>\r\n                    <textarea name=\"description\" value={description} onChange={this.handleChange}\r\n                        onFocus={() => this.onSetSubmitShown(true)} className=\"card-desc\" onKeyUp={this.setDescHeight} style={{ minHeight: this.state.textAreaMinHeight, height: this.state.textAreaHeight }} id=\"cardDesc\" placeholder=\"Add your card description...\">\r\n                    </textarea>\r\n                    {isSubmitShown && <div className=\"desc-btns-container flex align-center\">\r\n                        <button className=\"btn btn-primary btn-save-desc\">Save Changes</button>\r\n                        <Link to=\"#\" className=\"cancel-changes\" onClick={() => this.onSetSubmitShown(false, true)}>\r\n                            <img className=\"close-btn-desc\" src=\"/assets/img/close.png\" alt=\"\" />\r\n                        </Link>\r\n                    </div>}\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport moment from 'moment'\r\nimport { Link } from 'react-router-dom'\r\nimport { makeId } from '../../services/utilService'\r\n\r\n\r\nexport default class CardComments extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.myRef = React.createRef();\r\n    }\r\n\r\n    state = {\r\n        comment: {\r\n            txt: ''\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.isFocusComment !== prevProps.isFocusComment) {\r\n            this.myRef.current.focus();\r\n            this.setState({ comment: { txt: 'Comment on time estimation: ' } })\r\n        }\r\n    }\r\n\r\n    onAddComment = (ev) => {\r\n        ev.preventDefault();\r\n        const newCard = { ...this.props.card }\r\n        const { comment } = this.state\r\n        if (!comment.txt) return;\r\n        comment.id = makeId();\r\n        comment.createdAt = Date.now();\r\n        comment.byMember = this.props.loggedInUser;\r\n        newCard.comments.unshift(comment)\r\n        newCard.activities.unshift({\r\n            id: makeId(), txt: `set card comment to ${comment.txt}`,\r\n            createdAt: Date.now(), byMember: this.props.loggedInUser\r\n        })\r\n        this.props.saveCard(newCard)\r\n        this.setState({ comment: { txt: '' } })\r\n    }\r\n\r\n    handleChange = ({ target }) => {\r\n        this.setState(prevState => ({ comment: { ...prevState.comment, txt: target.value } }))\r\n    }\r\n\r\n    removeComment = (comment) => {\r\n        const newCard = { ...this.props.card }\r\n        newCard.comments = newCard.comments.filter(currComment => currComment.id !== comment.id)\r\n        newCard.activities.unshift({\r\n            id: makeId(), txt: `removed card comment ${comment.txt}`,\r\n            createdAt: Date.now(), byMember: this.props.loggedInUser\r\n        })\r\n        this.props.saveCard(newCard)\r\n    }\r\n\r\n    render() {\r\n        const { card } = this.props\r\n        const { comment } = this.state\r\n        return (\r\n            <>\r\n                <div className=\"card-mini-title flex align-center\">\r\n                    <img src=\"/assets/img/comment.png\" alt=\"\" />\r\n                    <label className=\"card-txt-title\" htmlFor=\"cardComment\">Comments</label>\r\n                </div>\r\n                <div className=\"main-content-card-action\">\r\n                    <form onSubmit={this.onAddComment}>\r\n                        <input ref={this.myRef} name=\"comment\" className=\"comment-input input\" autoComplete=\"off\"\r\n                            onChange={this.handleChange} id=\"cardComment\" placeholder=\"Your comment...\"\r\n                            value={comment.txt} />\r\n                        <button className=\"btn-primary comment-btn\">Add Comment</button>\r\n                    </form>\r\n                    <div className=\"comments-container\">\r\n                        {card.comments && card.comments.map((comment, idx) => <div className=\"comment flex align-start column\" key={idx}>\r\n                            <div className=\"flex align-center\">\r\n                                <div className=\"member flex justify-center align-center\"\r\n                                    style={{ backgroundImage: `url(${comment.byMember.imgUrl})`, backgroundColor: comment.byMember.bgColor }}>\r\n                                    <span className=\"member-two-chars\">{this.props.getTwoChars(comment.byMember.fullname)}</span>\r\n                                </div>\r\n                                <div>\r\n                                    <span className=\"comment-title-fullname\">{comment.byMember.fullname}</span>\r\n                                    <span className=\"comment-title-time\">{moment(comment.createdAt).fromNow()}</span>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"comment-txt\">{comment.txt}</div>\r\n                            <Link className=\"delete-comment\" to=\"#\" onClick={() => this.removeComment(comment)}>Delete</Link>\r\n                        </div>)}\r\n                    </div>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n","import React from 'react'\r\nimport Calendar from 'react-calendar';\r\nimport 'react-calendar/dist/Calendar.css';\r\nimport { saveCard } from '../../store/actions/boardActions'\r\nimport { makeId } from '../../services/utilService'\r\nimport { connect } from 'react-redux'\r\nimport moment from 'moment'\r\n\r\nfunction DueDate(props) {\r\n\r\n    function onSubmitDate() {\r\n        const { currBoard, loggedInUser } = props\r\n        currBoard.activities.unshift({\r\n            id: makeId(), txt: `set card due date to \r\n        ${moment(props.dueDateNotSave).format(\"MMM DD\")}`, createdAt: Date.now(), byMember: loggedInUser\r\n        })\r\n\r\n        const newCard = { ...props.currCard }\r\n\r\n        newCard.activities.unshift({\r\n            id: makeId(), txt: `set card due date to \r\n        ${moment(props.dueDateNotSave).format(\"MMM DD\")}`, createdAt: Date.now(), byMember: loggedInUser\r\n        })\r\n\r\n        newCard.dueDate = props.dueDateNotSave\r\n        props.saveCard(newCard)\r\n    }\r\n\r\n    function removeDueDate() {\r\n        const newCard = { ...props.currCard }\r\n        newCard.dueDate = ''\r\n        props.saveCard(newCard)\r\n    }\r\n\r\n    const date = (props.value) ? new Date(props.value) : new Date()\r\n    return <div>\r\n        <Calendar onChange={props.onChange} calendarType=\"US\" value={date} locale=\"en-GB\" name=\"dueDate\" />\r\n        <div className=\"btns-container flex space-between\">\r\n            <button className=\"btn btn-primary btn-save\" onClick={() => {\r\n                onSubmitDate()\r\n                props.onToggleAction('dueDate')\r\n            }}>Save</button>\r\n            <button className=\"btn btn-danger btn-remove\" onClick={() => {\r\n                removeDueDate()\r\n                props.onToggleAction('dueDate')\r\n            }}>Remove</button>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    saveCard\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        currCard: state.board.currCard,\r\n        currBoard: state.board.currBoard,\r\n        loggedInUser: state.user.loggedInUser\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DueDate);","import React, { Component } from 'react'\r\n\r\n\r\nexport default class CardChangeLabel extends Component {\r\n    state = {\r\n        colors: [\r\n            { title: '#fd9644', isChecked: false }, { title: '#fc5c65', isChecked: false },\r\n            { title: '#fed330', isChecked: false }, { title: '#26de81', isChecked: false },\r\n            { title: '#2bcbba', isChecked: false }, { title: '#45aaf2', isChecked: false },\r\n            { title: '#4b7bec', isChecked: false }, { title: '#a55eea', isChecked: false },\r\n            { title: '#122961', isChecked: false }, { title: '#ec7dd5', isChecked: false },\r\n        ],\r\n        colorChecked: '',\r\n        title: ''\r\n    }\r\n\r\n    isColorChecked = (color) => {\r\n        this.setState(prevState => ({\r\n            colorChecked: color,\r\n            colors: prevState.colors.map(currColor => {\r\n                if (currColor.title === color) currColor.isChecked = true;\r\n                else currColor.isChecked = false;\r\n                return currColor;\r\n            })\r\n        }))\r\n    }\r\n\r\n    changeLabel = (labelId) => {\r\n        let color = this.state.colorChecked ? this.state.colorChecked : '';\r\n        let title = this.state.title ? this.state.title : '';\r\n        console.log('title', title, 'color', color);\r\n        this.props.onChangeLabelColor(labelId, color, title);\r\n    }\r\n\r\n    onChangeTitle = (ev) => {\r\n        let { value } = ev.target;\r\n        this.setState(({ title: value }))\r\n    }\r\n\r\n    render() {\r\n        const { labelSelected, onBackToLabels } = this.props\r\n        return <div className=\"change-label-container\">\r\n            <div className=\"flex align-center header-container\">\r\n                <div onClick={onBackToLabels}><img src=\"/assets/img/back.png\" alt=\"\" /></div>\r\n                <h4>EDIT LABEL</h4>\r\n            </div>\r\n            <div>\r\n                <input type=\"text\" className=\"input label-title\" autoComplete=\"off\" placeholder=\"Change title\"\r\n                    value={this.state.title} onChange={this.onChangeTitle} />\r\n            </div>\r\n            <div className=\"flex wrap align-center justify-center\">\r\n                {this.state.colors.map((color, idx) => {\r\n                    return <div key={idx} className=\"label-color-item flex align-center justify-center\"\r\n                        onClick={() => this.isColorChecked(color.title)}\r\n                        style={{ backgroundColor: color.title }} >\r\n                        {color.isChecked && <img src=\"/assets/img/icon-checked-white.png\" alt=\"\" />}\r\n                    </div>\r\n                })}\r\n            </div>\r\n            <div className=\"btns-container flex space-between\">\r\n                <button className=\"btn btn-primary btn-save\" onClick={() => {\r\n                    this.changeLabel(labelSelected);\r\n                    onBackToLabels();\r\n                }}>Save</button>\r\n            </div>\r\n        </div>\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport CardChangeLabel from './CardChangeLabel';\r\nimport { makeId } from '../../services/utilService'\r\n\r\n\r\nexport default class LabelsPicker extends Component {\r\n    state = {\r\n        isChangeShown: false,\r\n        labelSelected: ''\r\n    }\r\n\r\n    onToggleLabel = (currLabel) => {\r\n        const { loggedInUser, card } = this.props\r\n        const newCard = { ...card }\r\n        const labelIdx = newCard.labels.findIndex(label => label.id === currLabel.id);\r\n\r\n        if (labelIdx === -1) {\r\n            newCard.activities.unshift({\r\n                id: makeId(), txt: `add label: ${currLabel.title} to the card`,\r\n                createdAt: Date.now(), byMember: loggedInUser\r\n            })\r\n            newCard.labels.push(currLabel)\r\n        }\r\n        else {\r\n            newCard.activities.unshift({\r\n                id: makeId(), txt: `removed label: ${currLabel.title} from the card`,\r\n                createdAt: Date.now(), byMember: loggedInUser\r\n            })\r\n            newCard.labels.splice(labelIdx, 1)\r\n        }\r\n        this.props.saveCard(newCard)\r\n    }\r\n\r\n    onChangeLabelColor = (labelId, color, title) => {\r\n        const newBoard = { ...this.props.board }\r\n        const newCard = { ...this.props.card }\r\n        newBoard.boardLabels.find(label => {\r\n            if (label.id === labelId) {\r\n                if (color) label.color = color;\r\n                if (title) label.title = title;\r\n            }\r\n        })\r\n        newCard.labels.find(label => {\r\n            if (label.id === labelId) {\r\n                if (color) label.color = color;\r\n                if (title) label.title = title;\r\n            }\r\n        })\r\n        this.props.save(newBoard)\r\n    }\r\n\r\n    isLabelChecked = (labelId) => {\r\n        const currCard = this.props.card;\r\n        if (!currCard.labels) currCard.labels = [];\r\n        if (currCard.labels.find(label => labelId === label.id)) return true\r\n        return false\r\n    }\r\n\r\n    onEditLabel = (labelId) => {\r\n        this.setState(prevState => ({ isChangeShown: !prevState.isChangeShown, labelSelected: labelId }));\r\n    }\r\n\r\n    onBackToLabels = () => {\r\n        this.setState(prevState => ({ isChangeShown: !prevState.isChangeShown }));\r\n    }\r\n\r\n    render() {\r\n        const { board } = this.props\r\n        const { labelSelected, isChangeShown } = this.state\r\n\r\n        return (\r\n            <>\r\n                {!isChangeShown && board.boardLabels.map((label, idx) => {\r\n                    return <div key={idx} className=\"flex align-center space-between\">\r\n                        <div className=\"label-item flex align-center space-between\"\r\n                            style={{ backgroundColor: label.color }} onClick={() => this.onToggleLabel(label)}>\r\n                            {label.title.charAt(0).toUpperCase() + label.title.slice(1)}\r\n                            {this.isLabelChecked(label.id) ? <img src=\"/assets/img/icon-checked-white.png\" alt=\"\" /> : ''}\r\n                        </div>\r\n                        <div className=\"edit-icon\" onClick={() => this.onEditLabel(label.id)}>\r\n                            <img src=\"/assets/img/edit.svg\" />\r\n                        </div>\r\n                    </div>\r\n                })}\r\n                {isChangeShown && labelSelected && <CardChangeLabel labelSelected={labelSelected} onChangeLabelColor={this.onChangeLabelColor} onBackToLabels={this.onBackToLabels} />}\r\n            </>\r\n        )\r\n    }\r\n}","import React from 'react'\r\nimport { makeId } from '../../services/utilService'\r\n\r\nexport default class CardMembers extends React.Component {\r\n    state = {\r\n        byMember: ''\r\n    }\r\n\r\n    handleChange = (ev) => {\r\n        let { value } = ev.target;\r\n        this.setState(({ byMember: value }))\r\n    };\r\n\r\n    isMemberChecked = (memberId) => {\r\n        if (this.props.card.members.find(member => memberId === member._id)) return true\r\n        return false\r\n    }\r\n\r\n    getMembers = () => {\r\n        let searchBy = this.state.byMember;\r\n        if (searchBy) return this.props.board.members.filter(member => member.username.includes(searchBy))\r\n\r\n        return this.props.board.members;\r\n    }\r\n\r\n    getTwoChars(str) {\r\n        let twoChars;\r\n        if (str.split(' ').length !== 2) twoChars = str?.charAt(0)\r\n        else twoChars = str?.charAt(0) + str.split(' ')[1].charAt(0)\r\n        if (!twoChars) twoChars = ''\r\n        return twoChars\r\n    }\r\n\r\n    onAddMember = (currMember) => {\r\n        const { loggedInUser, card } = this.props\r\n        const newCard = { ...card }\r\n        const memberIdx = newCard.members.findIndex(member => member._id === currMember._id);\r\n\r\n        if (memberIdx === -1) {\r\n\r\n            newCard.activities.unshift({\r\n                id: makeId(), txt: `add member:  ${currMember.username} to the card`,\r\n                createdAt: Date.now(), byMember: loggedInUser\r\n            })\r\n            newCard.members.push(currMember)\r\n        }\r\n        else {\r\n            newCard.activities.unshift({\r\n                id: makeId(), txt: `removed member:  ${currMember.username} from the card`,\r\n                createdAt: Date.now(), byMember: loggedInUser\r\n            })\r\n            newCard.members.splice(memberIdx, 1)\r\n        }\r\n        this.props.saveCard(newCard)\r\n    }\r\n\r\n    render() {\r\n        const { getMembers } = this\r\n        return (\r\n            <div className=\"card-members-container\">\r\n                <div className=\"search-input\">\r\n                    <input type=\"text\" className=\"input search-members\" value={this.state.byMember} autoComplete=\"off\"\r\n                        placeholder=\"Search member\" onChange={this.handleChange} />\r\n                </div>\r\n                <div className=\"members-list-container\">\r\n                    <h4>BOARD MEMBERS</h4>\r\n                    <div className=\"members-list\">\r\n                        {getMembers().map(member => {\r\n                            return <div key={member._id}\r\n                                className=\"member-item flex space-between align-center\" onClick={() => this.onAddMember(member)}>\r\n                                <div className=\"flex align-center\">\r\n                                    <div className=\"member flex justify-center align-center\" style={{\r\n                                        backgroundImage: `url(${member.imgUrl})`,\r\n                                        backgroundColor: member.bgColor\r\n                                    }}>\r\n                                        <span className=\"member-two-chars\">{this.getTwoChars(member.fullname)}</span>\r\n                                    </div>\r\n                                    <span className=\"members-card-title\">{member.username}</span>\r\n                                </div>\r\n                                {this.isMemberChecked(member._id) ? <img src=\"/assets/img/icon-checked.png\" /> : ''}\r\n                            </div>\r\n                        })}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\n","import React from 'react'\r\nimport { makeId } from '../../services/utilService'\r\n\r\nexport default class CardMove extends React.Component {\r\n\r\n    state = {\r\n        selectIsShown: false\r\n    }\r\n\r\n    onToggleSelect = () => {\r\n        this.setState(prevState => ({ selectIsShown: !prevState.selectIsShown }))\r\n    }\r\n\r\n    moveCardToStack = (stackDest) => {\r\n        const { loggedInUser, card, board, save } = this.props\r\n        const newCard = { ...card }\r\n        const newBoard = { ...board }\r\n        newBoard.stacks.forEach(stack => {\r\n            let cardIdx = stack.cards.findIndex(card => card.id === newCard.id)\r\n            if (cardIdx !== -1) {\r\n                stack.cards.splice(cardIdx, 1);\r\n            }\r\n            if (stack.title === stackDest.title) {\r\n                stack.cards.unshift(newCard)\r\n            }\r\n        })\r\n        newCard.activities.unshift({\r\n            id: makeId(), txt: `moved card to stack ${stackDest.title}`,\r\n            createdAt: Date.now(), byMember: loggedInUser\r\n        })\r\n        save(board)\r\n    }\r\n\r\n    render() {\r\n        const { card, board } = this.props\r\n        const { selectIsShown } = this.state\r\n        return (\r\n            <div className=\"card-move-container\">\r\n                <h4>SELECT DESTINATION</h4>\r\n                <div className=\"select-stack\" onClick={this.onToggleSelect}>Select list</div>\r\n                {selectIsShown && <div className=\"selection-container\">\r\n                    {board.stacks.map((stack, idx) => {\r\n                        if (stack.cards.find(currCard => currCard.id === card.id)) return null;\r\n                        return <div key={idx} className=\"option-stack-name\" onClick={() => this.moveCardToStack(stack)}>{stack.title}</div>\r\n                    })}\r\n                </div>}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n","import React from 'react'\r\nimport { makeId } from '../../services/utilService'\r\n\r\nexport default class CardTimeEstimation extends React.Component {\r\n\r\n    state = {\r\n        timeEstimation: {\r\n            hours: '',\r\n            minutes: '',\r\n            days: ''\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        const { timeEstimation } = this.props.card\r\n        if (timeEstimation) this.setState({ timeEstimation })\r\n    }\r\n\r\n    handleChange = (ev) => {\r\n        let { name, value } = ev.target;\r\n        this.setState(prevState => ({ timeEstimation: { ...prevState.timeEstimation, [name]: value } }))\r\n    }\r\n\r\n    onAddTimeEstimation = (timeEstimation) => {\r\n        const { loggedInUser, card, saveCard } = this.props\r\n        const newCard = { ...card }\r\n\r\n        timeEstimation.approved = false;\r\n        newCard.timeEstimation = timeEstimation\r\n        newCard.activities.unshift({\r\n            id: makeId(), txt: `added time estimation to card`,\r\n            createdAt: Date.now(), byMember: loggedInUser\r\n        })\r\n        saveCard(newCard)\r\n    }\r\n\r\n    removeCardEstimation = () => {\r\n        const { loggedInUser, card, saveCard } = this.props\r\n        const newCard = { ...card }\r\n        newCard.timeEstimation = null\r\n        newCard.activities.unshift({\r\n            id: makeId(), txt: `removed time estimation from the card`,\r\n            createdAt: Date.now(), byMember: loggedInUser\r\n        })\r\n        saveCard(newCard)\r\n    }\r\n\r\n    render() {\r\n        const { onToggleAction, card } = this.props\r\n        const { onAddTimeEstimation, removeCardEstimation } = this\r\n        const { timeEstimation } = this.state\r\n\r\n        return (\r\n            <div className=\"card-time-estimation-container\">\r\n                <h4>SELECT TIME ESTIMATION</h4>\r\n                <div>Days:<input type=\"number\" name=\"days\" className=\"input input-time-estimation\"\r\n                    onChange={this.handleChange} autoComplete=\"off\" value={timeEstimation.days}\r\n                    placeholder={`${card.timeEstimation ? card.timeEstimation.days : '00'}`} />\r\n                </div>\r\n                <div>Hours:<input type=\"number\" name=\"hours\" className=\"input input-time-estimation\"\r\n                    onChange={this.handleChange} autoComplete=\"off\" value={timeEstimation.hours}\r\n                    placeholder={`${card.timeEstimation ? card.timeEstimation.hours : '00'}`} />\r\n                </div>\r\n                <div>Minutes:<input type=\"number\" name=\"minutes\" className=\"input input-time-estimation\"\r\n                    onChange={this.handleChange} autoComplete=\"off\" value={timeEstimation.minutes}\r\n                    placeholder={`${card.timeEstimation ? card.timeEstimation.minutes : '00'}`} />\r\n                </div>\r\n                <div className=\"btns-container flex space-between\">\r\n                    <button className=\"btn btn-primary btn-save\" onClick={() => {\r\n                        onAddTimeEstimation(timeEstimation);\r\n                        onToggleAction('timeEstimation');\r\n                    }}>Save</button>\r\n                    <button className=\"btn btn-danger btn-remove\" onClick={() => {\r\n                        removeCardEstimation()\r\n                        onToggleAction('timeEstimation');\r\n                    }}>Remove</button>\r\n                </div>\r\n            </div>\r\n\r\n        )\r\n    }\r\n\r\n}\r\n\r\n","import React from 'react'\r\nimport { makeId } from '../../services/utilService'\r\n\r\nexport default function ReomveCard(props) {\r\n\r\n    function onRemoveCard() {\r\n        const { board, save, history, loggedInUser, card } = props\r\n        const newBoard = { ...board }\r\n        if (newBoard.isPublic) return;\r\n        newBoard.stacks.forEach(stack => {\r\n            let cardIdx = stack.cards.findIndex(currCard => {\r\n                return currCard.id === card.id\r\n            })\r\n            if (cardIdx !== -1) {\r\n                stack.cards.splice(cardIdx, 1);\r\n            }\r\n        })\r\n        newBoard.activities.unshift({ id: makeId(), txt: `has removed a card`, createdAt: Date.now(), byMember: loggedInUser })\r\n        save(newBoard);\r\n        history.push(`/boards/${props.board._id}`);\r\n    }\r\n\r\n    const { type } = props;\r\n    return (\r\n        <div className=\"remove-board-container remove-card\">\r\n            <div className=\"remove-board-title remove-card-title flex align-center space-between\">\r\n                {`Remove ${(type && type === 'stack') ? 'list' : 'card'}`}\r\n                <img src=\"/assets/img/close.png\" className=\"close-icon\" onClick={props.onToggleRemoveCard} alt=\"\" />\r\n            </div>\r\n            <p>Are you sure?</p>\r\n            {(type && type === 'stack') ?\r\n                <button className=\"btn btn-danger btn-remove-card\" onClick={() => props.onRemoveStack()}>Yes, remove!</button>\r\n                :\r\n                <button className=\"btn btn-danger btn-remove-card\" onClick={onRemoveCard}>Yes, remove!</button>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { save } from '../../store/actions/boardActions';\r\n\r\n\r\nclass ChangeStackTitle extends Component {\r\n\r\n    state = {\r\n        stackTitle: ''\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({ stackTitle: this.props.stack.title })\r\n    }\r\n\r\n\r\n    onEditStackTitle = ({ target }) => {\r\n        this.setState({ stackTitle: target.value });\r\n    }\r\n\r\n    onNewStackTitle = (ev) => {\r\n        ev.preventDefault()\r\n        let currBoard = { ...this.props.currBoard };\r\n        const { stackTitle } = this.state;\r\n\r\n        const stackIdx = currBoard.stacks.findIndex(stack => stack.id === this.props.stack.id)\r\n        currBoard.stacks[stackIdx].title = stackTitle\r\n        this.props.save(currBoard);\r\n        this.props.onToggleAction('stack')\r\n    }\r\n\r\n    render() {\r\n        const { stackTitle } = this.state\r\n        return (\r\n            <form onSubmit={this.onNewStackTitle} className=\"stack-title-form flex column\">\r\n                <label htmlFor=\"stackTitle\">Change Stack Title:</label>\r\n                <div className=\"flex space-between\">\r\n                    <input autoComplete=\"off\" id=\"stackTitle\" type=\"text\" name=\"title\" onChange={this.onEditStackTitle} value={stackTitle} />\r\n                    <button className=\"btn btn-primary\">Save</button>\r\n                </div>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        currBoard: state.board.currBoard,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    save\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ChangeStackTitle)\r\n","import React from 'react'\r\nimport ReomveCard from '../card/RemoveCard'\r\nimport ChangeStackTitle from './ChangeStackTitle'\r\n\r\nexport default class StackMenu extends React.Component {\r\n\r\n    state = {\r\n        isOpenModalRemove: false,\r\n    };\r\n\r\n    onToggleRemoveStack = () => {\r\n        this.setState(prevState => ({ isOpenModalRemove: !prevState.isOpenModalRemove }))\r\n    }\r\n\r\n    onRemoveStack = () => {\r\n        this.props.onStackRemove(this.props.stack.id)\r\n    }\r\n\r\n    render() {\r\n        const { isOpenModalRemove } = this.state;\r\n        const { stack, onToggleAction } = this.props\r\n        return (\r\n            <>\r\n                <ul className=\"stack-menu-list\">\r\n                    <ChangeStackTitle onToggleAction={onToggleAction} stack={stack} onToggleChangeTitle={this.onToggleChangeTitle} onChangeTitle={this.onChangeTitle} />\r\n                    <li className=\"stack-menu-item\" onClick={this.onToggleRemoveStack}><div className=\"stack-menu-remove\" >Remove List</div></li>\r\n                </ul>\r\n                {isOpenModalRemove && <ReomveCard type=\"stack\" onToggleRemoveStack={this.onToggleRemoveStack} onRemoveStack={this.onRemoveStack} />}\r\n            </>\r\n        )\r\n    }\r\n};","import React from 'react'\r\n\r\nexport default function CardBgColor(props) {\r\n\r\n\r\n    function onChangeBgColor(bgColor) {\r\n        const newCard = { ...props.card }\r\n        newCard.bgColor = bgColor\r\n        props.saveCard(newCard)\r\n        props.onToggleAction('bgColor')\r\n    }\r\n\r\n\r\n    const bgColors = ['#fd9644', '#fc5c65', '#fed330', '#26de81', '#2bcbba', '#45aaf2', '#4b7bec', '#a55eea', '#122961', '#fff', '#000', '#f8a5c2']\r\n    return (\r\n        <div className=\"card-bg-container flex wrap justify-center\">\r\n            {bgColors.map((color, idx) => <div key={idx} className=\"card-bg\" onClick={() => onChangeBgColor(color)} style={{ backgroundColor: color }}></div>)}\r\n        </div>\r\n    )\r\n}\r\n","import React, { Component } from 'react'\r\nimport DueDate from './DueDate'\r\nimport LabelsPicker from './LabelsPicker'\r\nimport CardMembers from './CardMembers'\r\nimport CardMove from './CardMove'\r\nimport CardTimeEstimation from './CardTimeEstimation'\r\nimport StackMenu from '../stack/StackMenu'\r\nimport CardBgColor from './CardBgColor'\r\nimport OutsideClickHandler from 'react-outside-click-handler';\r\nimport { saveCard, save } from '../../store/actions/boardActions'\r\nimport { connect } from 'react-redux'\r\n\r\n\r\n\r\nclass ActionContainer extends Component {\r\n    state = {\r\n        action: null\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.checkAction();\r\n    }\r\n\r\n    checkAction() {\r\n        const actions = this.props.isShown;\r\n        for (const key in actions) {\r\n            if (actions[key]) {\r\n                this.setState({ action: key });\r\n            }\r\n        }\r\n    }\r\n\r\n    titleToReturn(key) {\r\n        switch (key) {\r\n            case 'dueDate':\r\n                return 'Change Due Date'\r\n            case 'label':\r\n                return 'Labels'\r\n            case 'members':\r\n                return 'Add Members'\r\n            case 'move':\r\n                return 'Move Card'\r\n            case 'timeEstimation':\r\n                return 'Time Estimation'\r\n            case 'stack':\r\n                return this.props.stack.title\r\n            case 'bgColor':\r\n                return 'Change Background Color'\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { isShown, currCard, onToggleAction, currBoard, onChange, value, moveCardToStack,\r\n            onAddTimeEstimation, removeCardEstimation, stack, onStackRemove,\r\n            onChangeBgColor, dueDateNotSave, saveCard, loggedInUser, save } = this.props;\r\n\r\n        const { action } = this.state;\r\n\r\n        return (\r\n            <OutsideClickHandler onOutsideClick={() => onToggleAction(action)} display={'contents'}>\r\n                <div className=\"action-container\">\r\n                    <div className=\"action-header flex space-between align-center\">\r\n                        <h3>{this.titleToReturn(action)}</h3>\r\n                        <button className=\"close-label\" onClick={() => onToggleAction(action)}>\r\n                            <img src=\"/assets/img/close.png\" alt=\"\" />\r\n                        </button>\r\n                    </div>\r\n                    {isShown.label && <LabelsPicker saveCard={saveCard} save={save} loggedInUser={loggedInUser} card={currCard} board={currBoard} onToggleAction={onToggleAction} />}\r\n                    {isShown.dueDate && <DueDate dueDateNotSave={dueDateNotSave} onChange={onChange} value={value} onToggleAction={onToggleAction} />}\r\n                    {isShown.members && <CardMembers board={currBoard} loggedInUser={loggedInUser} saveCard={saveCard} card={currCard} />}\r\n                    {isShown.bgColor && <CardBgColor saveCard={saveCard} onToggleAction={onToggleAction} card={currCard} />}\r\n                    {isShown.move && <CardMove loggedInUser={loggedInUser} save={save} saveCard={saveCard} board={currBoard} card={currCard} />}\r\n                    {isShown.timeEstimation && <CardTimeEstimation saveCard={saveCard} loggedInUser={loggedInUser} card={currCard} onToggleAction={onToggleAction}\r\n                        onAddTimeEstimation={onAddTimeEstimation} removeCardEstimation={removeCardEstimation} />}\r\n                    {isShown.stack && <StackMenu board={currBoard} onToggleAction={onToggleAction} stack={stack} onStackRemove={onStackRemove} />}\r\n                </div >\r\n            </OutsideClickHandler>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    saveCard,\r\n    save\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        loggedInUser: state.user.loggedInUser,\r\n        currCard: state.board.currCard,\r\n        currBoard: state.board.currBoard\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ActionContainer);","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { saveCard } from '../../store/actions/boardActions'\r\nimport { makeId } from '../../services/utilService'\r\n\r\n\r\nclass CardChecklist extends React.Component {\r\n    state = {\r\n        newTodo: {\r\n            title: '',\r\n            isDone: false\r\n        },\r\n        checklist: {\r\n            title: '',\r\n            todos: []\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.loadChecklistTitle()\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.checklist !== this.props.checklist) this.loadChecklistTitle()\r\n    }\r\n\r\n    loadChecklistTitle = () => {\r\n        this.setState({ checklist: { title: this.props.checklist.title, todos: this.props.checklist.todos } })\r\n    }\r\n\r\n    onEditChecklistTitle = (ev) => {\r\n        let { value } = ev.target;\r\n        this.setState({ checklist: { title: value } })\r\n    }\r\n\r\n    onSaveChecklistTitle = (checklistId) => {\r\n        const newCard = { ...this.props.card }\r\n        newCard.checklists = newCard.checklists.map(checklist => {\r\n            if (checklist.id === checklistId) checklist.title = this.state.checklist.title\r\n            return checklist\r\n        })\r\n        this.props.saveCard(newCard)\r\n    }\r\n\r\n    handleChange = (ev) => {\r\n        let { name, value } = ev.target;\r\n        this.setState(prevState => ({ newTodo: { ...prevState.newTodo, [name]: value } }))\r\n    }\r\n\r\n    calculateProgBarWidth = () => {\r\n        let countIsDone = 0;\r\n        this.props.checklist.todos.forEach(todo => {\r\n            if (todo.isDone) countIsDone++;\r\n        })\r\n        if (!this.props.checklist.todos.length) return 0;\r\n        return ((countIsDone / this.props.checklist.todos.length) * 100).toFixed(0);\r\n    }\r\n\r\n    calculateProgBarBgc = () => {\r\n        const width = this.calculateProgBarWidth();\r\n        if (width === '100') return '#61bd4f'\r\n        return '#0079bf'\r\n    }\r\n\r\n    onRemoveChecklist = (checklist) => {\r\n        const newCard = { ...this.props.card }\r\n\r\n        newCard.checklists = newCard.checklists.filter(currChecklist => currChecklist.id !== checklist.id)\r\n        newCard.activities.unshift({\r\n            id: makeId(), txt: `removed checklist ${checklist.title} from the card`,\r\n            createdAt: Date.now(), byMember: this.props.loggedInUser\r\n        })\r\n\r\n        this.props.saveCard(newCard)\r\n    }\r\n\r\n    onSaveTodo = (ev, checklistId, todo, click) => {\r\n        ev.preventDefault();\r\n        const value = ev.target.value\r\n        const { newTodo } = this.state\r\n        const newCard = { ...this.props.card }\r\n        const checklist = newCard.checklists.find(currChecklist => currChecklist.id === checklistId)\r\n        if (!todo) {\r\n            newTodo.id = makeId();\r\n            checklist.todos.unshift(newTodo)\r\n            this.setState({ newTodo: { title: '', isDone: false } })\r\n            this.props.saveCard(newCard)\r\n        } else {\r\n            const foundTodo = checklist.todos.find(currTodo => currTodo.id === todo.id)\r\n\r\n            if (click) {\r\n                foundTodo.isDone = !foundTodo.isDone\r\n                return this.props.saveCard(newCard)\r\n            }\r\n            this.setState(prevState => ({\r\n                checklist: {\r\n                    ...prevState.checklist,\r\n                    todos: prevState.checklist.todos.map(currTodo => {\r\n\r\n                        if (currTodo.id === todo.id) currTodo.title = value\r\n                        return currTodo\r\n                    })\r\n                }\r\n            }))\r\n        }\r\n    }\r\n\r\n    onRemoveTodo = (checklistId, todo) => {\r\n        const newCard = { ...this.props.card }\r\n        newCard.checklists.map(checklist => {\r\n            if (checklist.id === checklistId) {\r\n                checklist.todos = checklist.todos.filter(currTodo => currTodo.id !== todo.id)\r\n            }\r\n            return checklist\r\n        })\r\n        newCard.activities.unshift({\r\n            id: makeId(), txt: `removed todo ${todo.title} from the card`,\r\n            createdAt: Date.now(), byMember: this.props.loggedInUser\r\n        })\r\n        this.props.saveCard(newCard)\r\n    }\r\n\r\n    render() {\r\n        const { todos, id } = this.props.checklist\r\n        const { card } = this.props\r\n        const width = this.calculateProgBarWidth();\r\n        const bgc = this.calculateProgBarBgc();\r\n\r\n        return (\r\n            <div className=\"card-checklist-container\">\r\n                <div className=\"card-checklist-title flex align-center space-between\">\r\n                    <div className=\"checklist-title flex align-center\">\r\n                        <img src=\"/assets/img/todos.png\" />\r\n                        <input type=\"text\" name=\"title\" className=\"checklist-title\" autoComplete=\"off\"\r\n                            onChange={this.onEditChecklistTitle}\r\n                            onBlur={() => this.onSaveChecklistTitle(id)} value={this.state.checklist.title} />\r\n                    </div>\r\n                    <button className=\"btn btn-delete\" onClick={() => this.onRemoveChecklist(this.props.checklist)}>Delete</button>\r\n                </div>\r\n                <div className=\"checklist-main\">\r\n                    <div className=\"checklist-progress-bar-container\"><span>{`${width}%`}</span>\r\n                        <div className=\"checklist-progress-bar\">\r\n                            <div className=\"progress-bar\" style={{ width: `${width}%`, backgroundColor: `${bgc}` }}>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"checklist-todos-container\">\r\n                        {todos.map(todo => <div className=\"flex align-center todo-item space-between\" key={todo.id}>\r\n                            <div className=\"todo-check-container flex align-center\">\r\n                                <div className={todo.isDone ? \"checkbox done\" : \"checkbox\"} onClick={(event) => this.onSaveTodo(event, id, todo, true)}>\r\n                                </div>\r\n                                <input name=\"title\" autoComplete=\"off\" className={`checklist-title todo-title ${todo.isDone ? 'done-decoration' : 'd'}`}\r\n                                    value={todo.title} onChange={(event) => this.onSaveTodo(event, id, todo)} onBlur={() => this.props.saveCard(card)} />\r\n                            </div>\r\n                            <div className=\"todo-delete-btn-container\"><img className=\"todo-delete-btn\" src=\"/assets/img/close.png\" onClick={() => this.onRemoveTodo(id, todo)} /></div>\r\n                        </div>\r\n                        )}\r\n                        <form onSubmit={(event) => this.onSaveTodo(event, id)}>\r\n                            <input type=\"text\" name=\"title\" className=\"checklist-title todo-title add-todo\" onChange={this.handleChange} placeholder=\"Add New Todo\" autoComplete=\"off\" value={this.state.newTodo.title} />\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div >\r\n        )\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    saveCard\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(CardChecklist);","import React from 'react'\r\nimport moment from 'moment'\r\nimport { connect } from 'react-redux'\r\n\r\nfunction CardPreviewActions(props) {\r\n    const { currCard, getTwoChars, currBoard } = props\r\n    return (\r\n        <>\r\n            {(currCard.members.length !== 0 || currCard.labels.length !== 0 || currCard.dueDate) && <div className=\"members-labels-container flex wrap\">\r\n                {currCard.members.length !== 0 &&\r\n                    <div className=\"member-card-container\" >\r\n                        <h3>Members</h3>\r\n                        <div className=\"flex wrap\">\r\n                            {currCard.members.map((member, idx) => <div key={idx} className=\"member flex justify-center align-center\"\r\n                                style={{ backgroundImage: `url(${member.imgUrl})`, backgroundColor: member.bgColor }}>\r\n                                <span className=\"member-two-chars\">{getTwoChars(member.fullname)}</span>\r\n                            </div>)}\r\n                        </div>\r\n\r\n                    </div>}\r\n                {currCard.labels.length !== 0 &&\r\n                    <div className=\"labels-card-container\">\r\n                        <h3>Labels</h3>\r\n                        <div className=\"flex wrap\">\r\n                            {currCard.labels.map((label, idx) => {\r\n                                const foundLabel = currBoard.boardLabels.find(currLabel => currLabel.id === label.id)\r\n                                if (foundLabel) {\r\n                                    return <div key={idx} className=\"card-label-item\" style={{ backgroundColor: `${foundLabel.color}` }}>\r\n                                        {foundLabel.title}\r\n                                    </div>\r\n                                }\r\n                            })}\r\n                        </div>\r\n\r\n                    </div>}\r\n                {currCard.dueDate &&\r\n                    <div className=\"due-date-container\">\r\n                        <h3>Due date</h3>\r\n                        <div className=\"flex align-center justify-center time-container\">\r\n                            {moment(currCard.dueDate).format(\"MMM DD\")}\r\n                        </div>\r\n                    </div>\r\n                }\r\n            </div>}\r\n        </>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        currBoard: state.board.currBoard,\r\n        currCard: state.board.currCard\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(CardPreviewActions);","import React from 'react'\r\n\r\nexport default function CardImg(props) {\r\n    const { isUploadImg, onRemoveImg, imgUrl } = props\r\n    return (\r\n        <div className=\"card-img-container\">\r\n            <div className=\"card-mini-title flex align-center space-between\">\r\n                <div>\r\n                    <img src=\"/assets/img/style.png\"></img>\r\n                    <label className=\"card-txt-title\">Image</label>\r\n                </div>\r\n                <button className=\"btn btn-delete\" onClick={() => onRemoveImg()}>Delete</button>\r\n            </div>\r\n            <div className=\"card-img\">\r\n                {isUploadImg ? <div className=\"loading\">\r\n                    <div className=\"dot\"></div>\r\n                    <div className=\"dot\"></div>\r\n                    <div className=\"dot\"></div>\r\n                    <div className=\"dot\"></div>\r\n                    <div className=\"dot\"></div>\r\n                </div> : <img src={`${imgUrl}`} />}\r\n\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport moment from 'moment'\r\n\r\nexport default function CardActivity(props) {\r\n    const { activities } = props;\r\n    return (\r\n        <>\r\n            <div className=\"card-mini-title flex align-center\">\r\n                <img src=\"/assets/img/activity.png\" />\r\n                <span className=\"card-txt-title\" htmlFor=\"cardComment\">Activities</span>\r\n            </div>\r\n            <div className=\"main-content-card-action\">\r\n                <div className=\"comments-container\">\r\n                    {activities && activities.map((activity, idx) => <div className=\"comment flex align-start column\" key={idx}>\r\n                        <div className=\"flex align-center\">\r\n                            <div className=\"member flex justify-center align-center\"\r\n                                style={{ backgroundImage: `url(${activity.byMember.imgUrl})`, backgroundColor: activity.byMember.bgColor }}>\r\n                                <span className=\"member-two-chars\">{props.getTwoChars(activity.byMember.fullname)}</span>\r\n                            </div>\r\n                            <div className=\"flex align-center\">\r\n                                <span className=\"comment-title-fullname\">{activity.byMember.fullname}</span>\r\n                                <div className=\"activity-txt\">{activity.txt}</div>\r\n                            </div>\r\n                        </div>\r\n                        <span className=\"comment-title-time activity-time\">{moment(activity.createdAt).fromNow()}</span>\r\n\r\n                    </div>)}\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { makeId } from '../../services/utilService'\r\n\r\nexport default function CardShowTimeEstimation(props) {\r\n\r\n\r\n    function onApproveTimeEstimation() {\r\n        const newCard = { ...props.card }\r\n        newCard.timeEstimation.approved = true\r\n        newCard.activities.unshift({\r\n            id: makeId(), txt: `confirmed the time estimate`,\r\n            createdAt: Date.now(), byMember: props.loggedInUser\r\n        })\r\n        props.saveCard(newCard)\r\n    }\r\n\r\n    const { timeEstimation } = props.card\r\n    return (\r\n        <>\r\n            {(timeEstimation.days || timeEstimation.hours || timeEstimation.minutes) && <>\r\n                <h3 className=\"time-estimation-title\">Time Estimation</h3>\r\n                <div className=\"show-time-estimation flex align-center space-between\">\r\n                    <div>\r\n                        {timeEstimation.days ? <span>{timeEstimation.days} days </span> : ''}\r\n                        {timeEstimation.hours ? <span> {timeEstimation.hours} hours </span> : ''}\r\n                        {timeEstimation.minutes ? <span> {timeEstimation.minutes} minutes</span> : ''}\r\n                    </div>\r\n                    {!timeEstimation.approved && <div className=\"flex align-center justify-center\" >\r\n                        <span onClick={onApproveTimeEstimation}><img src=\"/assets/img/approve.png\" title=\"Approve\" alt=\"\" /></span>\r\n                        <span onClick={props.onFocusComment}><img src=\"/assets/img/small-comment.png\" title=\"Comment\" alt=\"\" /></span>\r\n                    </div>\r\n                    }\r\n                </div>\r\n            </>}\r\n        </>\r\n    )\r\n}","import React, { Component } from 'react'\r\nimport CardDescription from '../cmps/card/CardDescription'\r\nimport CardComments from '../cmps/card/CardComments'\r\nimport { save, loadBoard, saveCard, loadCard } from '../store/actions/boardActions'\r\nimport { Link } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\nimport { makeId } from '../services/utilService'\r\nimport ActionContainer from '../cmps/card/ActionContainer'\r\nimport CardChecklist from '../cmps/card/CardChecklist'\r\nimport CardPreviewActions from '../cmps/card/CardPreviewActions'\r\nimport CardImg from '../cmps/card/CardImg'\r\nimport RemoveCard from '../cmps/card/RemoveCard'\r\nimport CardActivity from '../cmps/card/CardActivity'\r\nimport CardShowTimeEstimation from '../cmps/card/CardShowTimeEstimation'\r\nimport Loader from '../cmps/general/Loader'\r\nimport { uploadImg } from '../services/cloudinaryService'\r\n\r\nclass CardDetails extends Component {\r\n\r\n    state = {\r\n        isShown: {\r\n            label: false,\r\n            dueDate: false,\r\n            members: false,\r\n            move: false,\r\n            timeEstimation: false,\r\n            bgColor: false\r\n        },\r\n        isOpenModalRemove: false,\r\n        dueDateNotSave: '',\r\n        isFocusComment: false,\r\n        isUploadImg: false,\r\n        isFinishUpload: false\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.props.currBoard) {\r\n            this.props.loadCard(this.props.match.params.cardId)\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.currBoard !== prevProps.currBoard) this.props.loadCard(this.props.match.params.cardId)\r\n    }\r\n\r\n    onBackBoard = () => {\r\n        const { boardId } = this.props.match.params\r\n        this.props.history.push(`/boards/${boardId}`)\r\n    }\r\n\r\n    // @TODO: due date start from the DB, if got\r\n\r\n    onChangeDate = (dueDate) => {\r\n        this.setState({ dueDateNotSave: dueDate })\r\n    }\r\n\r\n    onEditTitle = ({ target }) => {\r\n        const newCard = { ...this.props.currCard }\r\n        newCard.title = target.value\r\n        this.props.saveCard(newCard)\r\n    }\r\n\r\n    onEditTitleFinish = () => {\r\n        const newCard = { ...this.props.currCard }\r\n        newCard.activities.unshift({\r\n            id: makeId(), txt: `edited card title to ${newCard.title}`,\r\n            createdAt: Date.now(), byMember: this.props.loggedInUser\r\n        })\r\n        this.props.saveCard(newCard)\r\n    }\r\n\r\n    getTwoChars(str) {\r\n        let twoChars;\r\n        if (str.split(' ').length !== 2) twoChars = str?.charAt(0)\r\n        else twoChars = str?.charAt(0) + str.split(' ')[1].charAt(0)\r\n        if (!twoChars) twoChars = ''\r\n        return twoChars\r\n    }\r\n\r\n    onAddChecklist = () => {\r\n        const newChecklist = {\r\n            id: makeId(),\r\n            title: 'Checklist',\r\n            todos: []\r\n        }\r\n        const newCard = { ...this.props.currCard }\r\n        newCard.checklists.unshift(newChecklist)\r\n        newCard.activities.unshift({\r\n            id: makeId(), txt: `added checklist to the card`,\r\n            createdAt: Date.now(), byMember: this.props.loggedInUser\r\n        })\r\n        this.props.saveCard(newCard)\r\n    }\r\n\r\n    onToggleAction = (action) => {\r\n        let actions = this.state.isShown;\r\n        for (const key in actions) {\r\n            if (key !== action) {\r\n                actions[key] = false;\r\n            }\r\n        }\r\n        actions[action] = !actions[action];\r\n        this.setState({ isShown: actions });\r\n    }\r\n\r\n    onOpenUpload = () => {\r\n        this.inputElement.click();\r\n    }\r\n\r\n    onToggleRemoveCard = () => {\r\n        this.setState(prevState => ({ isOpenModalRemove: !prevState.isOpenModalRemove }))\r\n    }\r\n\r\n    onFocusComment = () => {\r\n        this.setState(prevState => ({ isFocusComment: !prevState.isFocusComment }))\r\n    }\r\n    onUploadImg = async ev => {\r\n        this.setState({ isUploadImg: true })\r\n        const imgUrl = await uploadImg(ev)\r\n        this.setState({ isUploadImg: false, isFinishUpload: true })\r\n        const newCard = { ...this.props.currCard }\r\n        newCard.imgUrl = imgUrl\r\n        newCard.activities.unshift({\r\n            id: makeId(), txt: `uploaded image to the card`,\r\n            createdAt: Date.now(), byMember: this.props.loggedInUser\r\n        })\r\n        this.props.saveCard(newCard)\r\n    }\r\n\r\n    onRemoveImg = () => {\r\n        const newCard = { ...this.props.currCard }\r\n        newCard.imgUrl = null\r\n        newCard.activities.unshift({\r\n            id: makeId(), txt: `removed image from the card`,\r\n            createdAt: Date.now(), byMember: this.props.loggedInUser\r\n        })\r\n        this.props.saveCard(newCard)\r\n    }\r\n\r\n    render() {\r\n        const { isShown, isOpenModalRemove, isFocusComment, dueDateNotSave, isUploadImg } = this.state\r\n        const { currCard, saveCard, loggedInUser, history, currBoard, save } = this.props\r\n        const { onToggleAction } = this;\r\n\r\n        return ((!currCard) ? <Loader /> :\r\n            <>\r\n                <div className=\"screen\" onMouseDown={this.onBackBoard} >\r\n                    <div className=\"modal-container shadow-drop-2-center card-details-modal\" onMouseDown={(ev) => ev.stopPropagation()}>\r\n                        <div className=\"modal-header flex align-center space-between\">\r\n                            <div className=\"task-title-container flex align-center\">\r\n                                <img className=\"img-icon\" src=\"/assets/img/task.png\" alt=\"\" />\r\n                                <input type=\"text\" name=\"title\" className=\"card-title\" onChange={this.onEditTitle}\r\n                                    onBlur={this.onEditTitleFinish} value={currCard.title} autoComplete=\"off\" />\r\n                            </div>\r\n                            <div className=\"close-modal flex justify-content align-center\" onClick={this.onBackBoard}><img className=\"img-icon\" src=\"/assets/img/close.png\" alt=\"\" /></div>\r\n                        </div>\r\n\r\n                        <div className=\"card-container flex\">\r\n                            <aside className=\"card-content\">\r\n                                {currCard.timeEstimation && <CardShowTimeEstimation saveCard={saveCard} loggedInUser={loggedInUser} card={currCard} onFocusComment={this.onFocusComment} />}\r\n                                <CardPreviewActions getTwoChars={this.getTwoChars} />\r\n                                <CardDescription card={currCard} saveCard={saveCard} loggedInUser={loggedInUser} />\r\n\r\n                                {(currCard.imgUrl || isUploadImg) && <CardImg imgUrl={currCard.imgUrl} isUploadImg={isUploadImg} onRemoveImg={this.onRemoveImg} />}\r\n\r\n                                {currCard.checklists && currCard.checklists.map(checklist => <CardChecklist key={checklist.id} saveCard={saveCard} loggedInUser={loggedInUser} card={currCard} checklist={checklist} />)}\r\n\r\n                                <CardComments card={currCard} saveCard={saveCard} loggedInUser={loggedInUser} isFocusComment={isFocusComment} getTwoChars={this.getTwoChars} />\r\n                                {currCard.activities && <CardActivity activities={currCard.activities} getTwoChars={this.getTwoChars} />}\r\n                            </aside>\r\n                            <aside className=\"card-actions\">\r\n                                <div className=\"actions-title\">Actions:</div>\r\n                                <ul className=\"actions-list clean-list\">\r\n                                    <Link title=\"Edit Card Members\" to=\"#\" onClick={() => onToggleAction('members')}><li><img src=\"/assets/img/user-icon.png\" alt=\"\" />Members</li></Link>\r\n                                    <Link title=\"Edit Card Labels\" to=\"#\" onClick={() => onToggleAction('label')}><li><img src=\"/assets/img/label-icon.png\" alt=\"\" />Labels</li></Link>\r\n                                    <Link title=\"Add Checklist\" to=\"#\" onClick={this.onAddChecklist}><li><img src=\"/assets/img/checklist-icon.png\" alt=\"\" />Checklist</li></Link>\r\n                                    <Link title=\"Set Due Date\" to=\"#\" onClick={() => onToggleAction('dueDate')}><li><img src=\"/assets/img/due-date.png\" alt=\"\" />Due Date</li></Link>\r\n                                    <Link title=\"Set Time Estimation\" to=\"#\" onClick={() => onToggleAction('timeEstimation')}><li><img src=\"/assets/img/clock-icon.png\" alt=\"\" />Time Estimation</li></Link>\r\n                                    <Link title=\"Add Image\" to=\"#\" onClick={() => this.onOpenUpload()}><li><img src=\"/assets/img/style.png\" alt=\"\" />Add Image</li></Link>\r\n                                    <Link title=\"Change Card Background\" to=\"#\" onClick={() => this.onToggleAction('bgColor')}><li><img src=\"/assets/img/palette.png\" alt=\"\" />Change Background</li></Link>\r\n                                    <input type=\"file\" ref={input => this.inputElement = input} name=\"imgUrl\" onChange={this.onUploadImg} hidden />\r\n                                    <Link title=\"Move Card\" to=\"#\" onClick={() => this.onToggleAction('move')}><li><img src=\"/assets/img/back.png\" className=\"img-rotate\" alt=\"\" />Move Card</li></Link>\r\n                                    <Link title=\"Remove Card\" to=\"#\" onClick={this.onToggleRemoveCard}><li className=\"li-last-child\"><img src=\"/assets/img/trash-white.png\" alt=\"\" />Remove Card</li></Link>\r\n\r\n                                    {isShown.dueDate && <ActionContainer dueDateNotSave={dueDateNotSave} isShown={isShown} onChange={this.onChangeDate} onSubmitDate={this.onSubmitDate} onToggleAction={onToggleAction} value={currCard.dueDate} removeDueDate={this.removeDueDate} />}\r\n                                    {isShown.label && <ActionContainer isShown={isShown} onToggleAction={onToggleAction} />}\r\n                                    {isShown.members && <ActionContainer isShown={isShown} onToggleAction={onToggleAction} />}\r\n                                    {isShown.bgColor && <ActionContainer isShown={isShown} onToggleAction={onToggleAction} />}\r\n                                    {isShown.move && <ActionContainer isShown={isShown} onToggleAction={onToggleAction} />}\r\n                                    {isShown.timeEstimation && <ActionContainer isShown={isShown} onToggleAction={onToggleAction} />}\r\n                                    {isShown.changeLabel && <ActionContainer isShown={isShown} onToggleAction={onToggleAction} />}\r\n\r\n                                </ul>\r\n                                {isOpenModalRemove && <RemoveCard history={history} board={currBoard} card={currCard} save={save} loggedInUser={loggedInUser} onToggleRemoveCard={this.onToggleRemoveCard} />}\r\n\r\n                            </aside>\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    save,\r\n    loadBoard,\r\n    saveCard,\r\n    loadCard\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        currBoard: state.board.currBoard,\r\n        loggedInUser: state.user.loggedInUser,\r\n        currCard: state.board.currCard\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CardDetails);","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport { loadUsers } from '../../store/actions/userActions'\r\nimport Loader from '../general/Loader'\r\nimport OutsideClickHandler from 'react-outside-click-handler';\r\n\r\nclass AddMember extends Component {\r\n\r\n    state = {\r\n        filterBy: {\r\n            board: null,\r\n            q: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({ filterBy: { board: this.props.currBoard, q: '' } }, () => this.props.loadUsers(this.state.filterBy))\r\n    }\r\n\r\n    handleChange = ({ target }) => {\r\n        const field = target.name\r\n        const value = target.value\r\n\r\n        this.setState(prevState => ({ filterBy: { ...prevState.filterBy, [field]: value } }), () => {\r\n            this.props.loadUsers(this.state.filterBy)\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { users, onClose, onAddMember } = this.props\r\n        const { filterBy } = this.state\r\n\r\n        return ((!users) ? <Loader /> :\r\n            <OutsideClickHandler onOutsideClick={() => onClose()} display={'contents'}>\r\n                <div className=\"add-member-container slide-bottom\">\r\n                    <div className=\"add-member-title flex space-between align-center\">\r\n                        Add Members\r\n                    <img src=\"/assets/img/close-white.png\" className=\"close-icon\" onClick={() => onClose()} alt=\"\" />\r\n                    </div>\r\n                    <input type=\"text\" placeholder=\"Enter user name\" autoComplete=\"off\" name=\"q\" value={filterBy.q} onChange={this.handleChange} className=\"add-member-input\" />\r\n                    <div className=\"members-list flex column\">\r\n                        {users.map((user, idx) => <Link to=\"#\" key={idx} onClick={() => onAddMember(user)} className=\"single-member\">{user.username}</Link>)}\r\n                    </div>\r\n                </div>\r\n            </OutsideClickHandler>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        users: state.user.users,\r\n        currBoard: state.board.currBoard\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    loadUsers\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddMember);","import React from 'react'\r\n\r\nexport default function BoardBackground(props) {\r\n\r\n    const bgColors = ['#fd9644', '#fc5c65', '#fed330', '#26de81', '#2bcbba', '#45aaf2', '#4b7bec', '#a55eea', '#122961']\r\n    const bgImgs = ['/assets/img/bg-beach.jpg', '/assets/img/bg-flowers.jpg',\r\n        '/assets/img/bg-sunset.jpg', '/assets/img/bg-view.jpg',\r\n        '/assets/img/bg-view2.jpg', '/assets/img/bg-view3.jpg',\r\n        '/assets/img/bg-view4.jpg', '/assets/img/bg-water.jpg', '/assets/img/bg-view5.jpg'];\r\n    const { type, onSetBg } = props\r\n\r\n    if (type === 'image') {\r\n        return (\r\n            <div className=\"backgrounds-container\">\r\n                {bgImgs.map((img, idx) => <div key={idx} className=\"background\" onClick={() => onSetBg(img, 'img')} style={{ backgroundImage: `url(${img})`, backgroundSize: '100%',backgroundPosition:'center' }}></div>)}\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div className=\"backgrounds-container\">\r\n                {bgColors.map((color, idx) => <div key={idx} className=\"background\" onClick={() => onSetBg(color, 'color')} style={{ backgroundColor: color }}></div>)}\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport BoardBackground from '../board/BoardBackground'\r\nimport { save, loadBoard } from '../../store/actions/boardActions'\r\nimport { connect } from 'react-redux'\r\n\r\nclass BoardStyling extends Component {\r\n\r\n    state = {\r\n        bgChooseShown: ''\r\n    }\r\n\r\n    setBgShown = (bgChooseShown) => {\r\n        this.setState({ bgChooseShown })\r\n    }\r\n\r\n    render() {\r\n        const { bgChooseShown } = this.state\r\n        const { onSetBg } = this.props\r\n        return (\r\n            <div className=\"board-styling-container\">\r\n                <div className=\"board-styling-title flex align-center\">\r\n                    {bgChooseShown && <img src=\"/assets/img/back.png\" onClick={() => this.setBgShown('')} className=\"back small-icon\" alt=\"\" />}Board Styling\r\n                </div>\r\n                {!bgChooseShown && <button onClick={() => this.setBgShown('color')} className=\"background-choose color-choose\"><span>Background Color</span></button>}\r\n                {!bgChooseShown && <button onClick={() => this.setBgShown('image')} className=\"background-choose img-choose\"><span>Background Image</span></button>}\r\n                {bgChooseShown && <BoardBackground onSetBg={onSetBg} type={bgChooseShown} />}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    save,\r\n    loadBoard\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        currBoard: state.board.currBoard\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(BoardStyling);","import React from 'react'\r\nimport moment from 'moment'\r\n\r\nexport default function BoardActivities(props) {\r\n    const { board } = props\r\n    return (\r\n        <div className=\"activities-container\">\r\n            <h2 className=\"activities-title\">Activities</h2>\r\n            <ul className=\"activities clean-list\">\r\n                {board.activities.map((activity, idx) => {\r\n                    return <li key={idx}>\r\n                        <span className=\"bold\">{activity.byMember.username}</span> {activity.txt}\r\n                        <p className=\"activity-at\">{moment(activity.createdAt).fromNow()}</p>\r\n                    </li>\r\n                })}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function ReomveBoard(props) {\r\n    return (\r\n        <div className=\"remove-board-container\">\r\n            <div className=\"remove-board-title flex align-center space-between\">\r\n                Remove board\r\n                <img src=\"/assets/img/close.png\" className=\"close-icon\" onClick={() => props.onToggleRemoveBoard()} alt=\"\" />\r\n            </div>\r\n            <p>Are you sure you want to remove the board?</p>\r\n            <button className=\"btn btn-danger\" onClick={() => props.onRemoveBoard()}>Yes, remove!</button>\r\n        </div>\r\n    )\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { removeBoard } from '../../store/actions/boardActions';\r\nimport { connect } from 'react-redux';\r\nimport BoardStyling from './BoardStyling';\r\nimport BoardActivities from './BoardActivities';\r\nimport RemoveBoard from './RemoveBoard';\r\n\r\nclass BoardMenu extends Component {\r\n\r\n    state = {\r\n        isStylingShown: false,\r\n        isRemoveBoardShown: false\r\n    }\r\n\r\n    onToggleStyling = () => this.setState(prevState => ({ isStylingShown: !prevState.isStylingShown }))\r\n    onToggleRemoveBoard = () => this.setState(prevState => ({ isRemoveBoardShown: !prevState.isRemoveBoardShown }))\r\n    onRemoveBoard = async () => {\r\n        if (this.props.board.isPublic) return\r\n        await this.props.removeBoard(this.props.board._id)\r\n        this.props.history.push('/boards')\r\n    }\r\n\r\n    onCloseMenu = () => {\r\n        this.props.onClose()\r\n        this.setState({ isStylingShown: false, isRemoveBoardShown: false })\r\n    }\r\n\r\n    render() {\r\n        const { onSetBg, board, isOpen } = this.props\r\n        const { isStylingShown, isRemoveBoardShown } = this.state\r\n\r\n        return (\r\n            <div className={`board-menu-container ${isOpen ? 'board-menu-open' : ''}`}>\r\n\r\n                <div className=\"board-menu-title flex space-between align-center\">\r\n                    Board Managment\r\n                    <img src=\"/assets/img/close-white.png\" className=\"close-icon\" onClick={this.onCloseMenu} alt=\"\" />\r\n                </div>\r\n\r\n                <div className=\"board-menu-content\">\r\n                    {!isStylingShown && <ul className=\"board-menu-list clean-list\">\r\n                        <Link to=\"#\" onClick={this.onToggleStyling}><li><img src=\"/assets/img/style.png\" className=\"small-icon\" alt=\"\" />Board Styling</li></Link>\r\n                        <Link to=\"#\" onClick={this.onToggleRemoveBoard}><li className=\"remove-board\"><img src=\"/assets/img/trash.png\" className=\"small-icon\" alt=\"\" />Remove Board</li></Link>\r\n                    </ul>}\r\n\r\n                    {isRemoveBoardShown && <RemoveBoard onToggleRemoveBoard={this.onToggleRemoveBoard} onRemoveBoard={this.onRemoveBoard} />}\r\n                    {!isStylingShown && <BoardActivities board={board} />}\r\n                    {isStylingShown && <BoardStyling onSetBg={onSetBg} onToggleStyling={this.onToggleStyling} />}\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    removeBoard\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(BoardMenu)","import React from 'react'\r\nimport moment from 'moment'\r\n\r\nexport default function FilterCardsList(props) {\r\n    const { boardId } = props\r\n\r\n    function onClickCard(cardId) {\r\n        props.history.push(`/boards/${boardId}/card/${cardId}`)\r\n    }\r\n\r\n    function getStackByCard(card) {\r\n        return props.stacks.find(stack => stack.cards.find(currCard => card.id === currCard.id))\r\n    }\r\n\r\n    return (\r\n        <div className=\"filter-cards-container\">\r\n            <div className=\"filter-scroll-cards\">\r\n                {props.cards.map((card, idx) => {\r\n                    return <div className=\"filter-card\" onClick={() => onClickCard(card.id)} key={idx}>\r\n                        <div className=\"filter-card-title\">{card.title}</div>\r\n                        <div className=\"filter-card-details\">List: {getStackByCard(card).title}{(card.dueDate) ? `, Due date: ${moment(card.dueDate).format(\"MMM DD\")}` : ''}</div>\r\n                    </div>\r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport FilterCardsList from '../card/FilterCardsList'\r\n\r\nclass BoardFilter extends Component {\r\n\r\n    state = {\r\n        filterBy: '',\r\n        cards: []\r\n    }\r\n\r\n    onSetFilterBy = ({ target }) => {\r\n        if (!target.value) return this.clearFilter()\r\n        this.setState({ filterBy: target.value }, () => this.filterBy(this.state.filterBy))\r\n    }\r\n\r\n    filterBy = () => {\r\n        const { filterBy } = this.state\r\n        const { currBoard } = this.props\r\n        const filterCards = currBoard.stacks.map(stack => {\r\n            return stack.cards.filter(card => {\r\n                return card.title.toLowerCase().includes(filterBy.toLowerCase())\r\n                    || card.description.toLowerCase().includes(filterBy.toLowerCase())\r\n            })\r\n        })\r\n        this.setState({ cards: [].concat(...filterCards) })\r\n    }\r\n\r\n    clearFilter = () => {\r\n        setTimeout(() => {\r\n            this.setState({ cards: [], filterBy: '' })\r\n        }, 150);\r\n    }\r\n\r\n    render() {\r\n        const { currBoard, history } = this.props\r\n        const { cards, filterBy } = this.state\r\n\r\n        return (\r\n            <>\r\n                <input className={`search-container flex align-center`} autoComplete=\"off\" name=\"filterBy\" value={filterBy} onBlur={this.clearFilter} onChange={this.onSetFilterBy} />\r\n                {cards.length > 0 && <FilterCardsList stacks={currBoard.stacks} cards={cards} history={history} boardId={currBoard._id} />}\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        currBoard: state.board.currBoard\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(BoardFilter);","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { save } from '../../store/actions/boardActions'\r\nimport AddMember from './AddMember'\r\nimport BoardMenu from '../side_menu/BoardMenu'\r\nimport BoardFilter from './BoardFilter'\r\nimport { makeId } from '../../services/utilService'\r\n\r\n\r\nclass BoardOptions extends Component {\r\n\r\n    state = {\r\n        isAddMemberShown: false,\r\n        isBoardMenuShown: false,\r\n        currBoard: null\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({ currBoard: this.props.currBoard })\r\n    }\r\n\r\n    getTwoChars(str) {\r\n        let twoChars;\r\n        if (str.split(' ').length !== 2) twoChars = str?.charAt(0)\r\n        else twoChars = str?.charAt(0) + str.split(' ')[1].charAt(0)\r\n        if (!twoChars) twoChars = ''\r\n        return twoChars\r\n    }\r\n\r\n    onToggleAddMember = () => this.setState(prevState => ({ isAddMemberShown: !prevState.isAddMemberShown }))\r\n    onToggleBoardMenu = () => this.setState(prevState => ({ isBoardMenuShown: !prevState.isBoardMenuShown }))\r\n\r\n    onAddMember = member => {\r\n        const { loggedInUser, currBoard } = this.props\r\n\r\n        currBoard.members.unshift(member)\r\n        currBoard.activities.unshift({ id: makeId(), txt: `added ${member.username} to the board`, createdAt: Date.now(), byMember: loggedInUser })\r\n        this.props.save(currBoard)\r\n        this.onToggleAddMember()\r\n    }\r\n\r\n    onRemoveMember = currMember => {\r\n        const { loggedInUser, currBoard } = this.props\r\n\r\n        const memberIdx = currBoard.members.findIndex(member => currMember._id === member._id);\r\n        currBoard.members.splice(memberIdx, 1)\r\n        currBoard.activities.unshift({ id: makeId(), txt: `removed ${currMember.username} from the board`, createdAt: Date.now(), byMember: loggedInUser })\r\n        this.props.save(currBoard)\r\n        this.setState({ currBoard })\r\n    }\r\n\r\n    render() {\r\n        const { board, onSetBg, history, toggleShowStatistics, isShowingStatistics } = this.props;\r\n        const { isAddMemberShown, isBoardMenuShown } = this.state;\r\n\r\n        return (\r\n            <div className={`board-options-container ${(isShowingStatistics) ? 'stats-margin' : ''}`}>\r\n                <div className=\"board-title flex align-center justify-center\">{board.title}</div>\r\n\r\n                <div className=\"board-members flex\">\r\n                    {board.members.map((member, idx) => <div key={idx} className=\"member flex justify-center align-center\" style={{ backgroundImage: `url(${member.imgUrl})`, backgroundColor: member.bgColor }}><img onClick={() => this.onRemoveMember(member)} src=\"/assets/img/close.png\" className=\"remove-member\" alt=\"\" /><span className=\"member-two-chars\">{this.getTwoChars(member.fullname)}</span></div>)}\r\n                </div>\r\n\r\n                <div className=\"board-options flex\">\r\n                    <BoardFilter history={history} />\r\n\r\n                    <button className=\"option flex align-center\" onClick={() => this.onToggleAddMember()}>\r\n                        <img src=\"/assets/img/add-user.png\" alt=\"\" />\r\n                    </button>\r\n                    <button className=\"option flex align-center\" onClick={() => toggleShowStatistics()}>\r\n                        <img src=\"/assets/img/stats.png\" alt=\"\" />\r\n                    </button>\r\n                    <button className=\"option flex align-center\" onClick={() => this.onToggleBoardMenu()}>\r\n                        <img src=\"/assets/img/menu.png\" alt=\"\" />\r\n                    </button>\r\n                </div>\r\n                {isAddMemberShown && <AddMember onClose={this.onToggleAddMember} onAddMember={this.onAddMember} />}\r\n                {<BoardMenu isOpen={isBoardMenuShown} history={history}\r\n                    onSetBg={onSetBg} board={board} onClose={this.onToggleBoardMenu} />}\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    save\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        currBoard: state.board.currBoard,\r\n        loggedInUser: state.user.loggedInUser\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(BoardOptions);","import React from 'react'\r\nimport { ResponsivePie } from '@nivo/pie';\r\n\r\nexport class StatisticsPie extends React.Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.statsTimeOut = null;\r\n    }\r\n\r\n    state = {\r\n        data: [{ id: '', label: '', value: 0, color: '#fff' }]\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.statsTimeOut = setTimeout(() => {\r\n\r\n            this.setState({ data: this.props.data });\r\n\r\n        }, 250)\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.data !== prevProps.data) {\r\n            this.setState({ data: this.props.data });\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.statsTimeOut) clearTimeout(this.statsTimeOut);\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        const getSliceColor = slice => slice.color;\r\n        const { data } = this.state;\r\n        return (\r\n            // <span className=\"pie-content\">\r\n            <ResponsivePie\r\n                data={data}\r\n                margin={{ top: 10, right: 80, bottom: 80, left: 80 }}\r\n                innerRadius={0.7}\r\n                padAngle={0}\r\n                cornerRadius={5}\r\n                colors={getSliceColor}\r\n                borderWidth={2}\r\n                borderColor={{ from: 'color', modifiers: [['darker', 0.2]] }}\r\n                radialLabelsSkipAngle={10}\r\n                radialLabelsTextXOffset={6}\r\n                radialLabelsTextColor={getSliceColor}\r\n                radialLabelsLinkOffset={-10}\r\n                radialLabelsLinkDiagonalLength={16}\r\n                radialLabelsLinkHorizontalLength={24}\r\n                radialLabelsLinkStrokeWidth={1}\r\n                radialLabelsLinkColor={{ from: 'color' }}\r\n                slicesLabelsSkipAngle={10}\r\n                slicesLabelsTextColor=\"#333333\"\r\n                animate={true}\r\n                motionStiffness={90}\r\n                motionDamping={15}\r\n                theme={{\r\n\r\n                    fontFamily: 'openSansBold',\r\n                    fontSize: 14,\r\n                }}\r\n                legends={[\r\n                    // {\r\n                    //     anchor: 'bottom',\r\n                    //     direction: 'row',\r\n                    //     translateY: 56,\r\n                    //     itemWidth: 50,\r\n                    //     itemHeight: 18,\r\n                    //     itemTextColor: '#999',\r\n                    //     symbolSize: 18,\r\n                    //     symbolShape: 'circle',\r\n                    //     effects: [\r\n                    //         {\r\n                    //             on: 'hover',\r\n                    //             style: {\r\n                    //                 itemTextColor: '#000'\r\n                    //             }\r\n                    //         }\r\n                    //     ]\r\n                    // }\r\n                ]}\r\n\r\n            />\r\n            /* </span> */\r\n        )\r\n\r\n    }\r\n\r\n};","import React from 'react'\r\nimport { ResponsiveBar } from '@nivo/bar'\r\n\r\nexport class StatisticsBar extends React.Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.statsTimeOut = null;\r\n    }\r\n\r\n    state = {\r\n        data: [{ member: '', Tasks: 0, 'Done Tasks': 0 }],\r\n        width: 1000\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        window.addEventListener('resize', this.updateDimensions);\r\n        this.statsTimeOut = setTimeout(() => {\r\n\r\n            this.setState({ data: this.props.data, maxTasks: this.props.maxTasks });\r\n\r\n        }, 250)\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.data !== prevProps.data) {\r\n            this.setState({ data: this.props.data, maxTasks: this.props.maxTasks });\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.statsTimeOut) clearTimeout(this.statsTimeOut);\r\n\r\n        window.removeEventListener('resize', this.updateDimensions);\r\n    }\r\n\r\n    updateDimensions = () => {\r\n        this.setState({ width: window.innerWidth });\r\n    };\r\n\r\n    render() {\r\n\r\n        const getUserColor = user => (user.id === 'Done Tasks') ? '#39EA80' : '#a8a8a8';\r\n\r\n        const { data, maxTasks, width } = this.state;\r\n        return (\r\n\r\n            <ResponsiveBar\r\n                data={data}\r\n                keys={['Tasks', 'Done Tasks']}\r\n                indexBy=\"member\"\r\n                margin={{ top: 10, right: 130, bottom: 50, left: 60 }}\r\n                padding={0.3}\r\n                colors={getUserColor}\r\n                borderColor={{ from: 'color', modifiers: [['darker', 1.6]] }}\r\n                axisTop={null}\r\n                axisRight={null}\r\n                axisBottom={{\r\n                    format: value => `${(width < 550) ? value.slice(0, 3) : value.slice(0, 8)}`,\r\n                    tickSize: 5,\r\n                    tickPadding: 5,\r\n                    tickRotation: 0,\r\n                    legend: (width < 700) ? '' : 'Users',\r\n                    legendPosition: 'middle',\r\n                    legendOffset: 40,\r\n                }}\r\n                axisLeft={{\r\n                    tickValues: maxTasks,\r\n                    tickSize: 5,\r\n                    tickPadding: 5,\r\n                    tickRotation: 0,\r\n                    legend: 'Tasks',\r\n                    legendPosition: 'middle',\r\n                    legendOffset: -40\r\n                }}\r\n                labelSkipWidth={12}\r\n                labelSkipHeight={12}\r\n                labelTextColor={{ from: 'color', modifiers: [['darker', 1.6]] }}\r\n                legends={[\r\n                    {\r\n                        dataFrom: \"keys\",\r\n                        anchor: 'bottom-right',\r\n                        direction: 'column',\r\n                        justify: false,\r\n                        translateX: 120,\r\n                        translateY: 0,\r\n                        itemsSpacing: 2,\r\n                        itemWidth: 100,\r\n                        itemHeight: 20,\r\n                        itemDirection: 'left-to-right',\r\n                        itemOpacity: 0.85,\r\n                        symbolSize: 20,\r\n                        effects: [\r\n                            {\r\n                                on: 'hover',\r\n                                style: {\r\n                                    itemOpacity: 1\r\n                                }\r\n                            }\r\n                        ]\r\n                    }\r\n                ]}\r\n                animate={true}\r\n                motionStiffness={90}\r\n                motionDamping={15}\r\n                theme={{\r\n                    axis: {\r\n                        legend: {\r\n                            text: {\r\n                                fontFamily: 'openSansBold',\r\n                                fontSize: 14\r\n                            }\r\n                        },\r\n                        ticks: {\r\n                            text: {\r\n                                fontFamily: 'openSans',\r\n                                fontSize: (width < 550) ? 8 : (width < 700) ? 12 : 14,\r\n                            }\r\n                        }\r\n                    },\r\n                    labels: {\r\n                        text: {\r\n                            fontFamily: 'openSans',\r\n                            fontSize: 14,\r\n                            stroke: '#fff',\r\n                            fill: '#fff',\r\n                            strokeWidth: 1.5,\r\n                        },\r\n\r\n                    },\r\n                    legends: {\r\n                        text: {\r\n                            fontFamily: 'openSansBold',\r\n                            fontSize: 14\r\n                        }\r\n\r\n                    }\r\n\r\n                }}\r\n            />\r\n\r\n\r\n        )\r\n    }\r\n};","import React from 'react'\r\n\r\nexport function StatisticsInfoBlock(props) {\r\n\r\n    const { info, type } = props;\r\n\r\n    return (\r\n        <span className=\"stat-info-block flex align-center justify-start\">\r\n            <div className=\"stat-info-img flex align-center justify-center\">\r\n                <img className={`stat-img ${type}`} src={`/assets/img/${type}.png`} alt=\"\" />\r\n            </div>\r\n            <div className=\"stat-info-details flex column align-center justify-content\">\r\n\r\n                <p className={`stats-info-p ${(type === 'timeEstimation') ? 'last-stat-info' : '' }`}>{info}</p>\r\n                <p className=\"secondary\">{(type === 'createdBy') ? 'created by' : (type === 'timeEstimation') ? 'time estimation' : type}</p>\r\n            </div>\r\n        </span>\r\n    );\r\n};","import React from 'react'\r\n\r\nimport { save, loadBoard } from '../store/actions/boardActions'\r\nimport { connect } from 'react-redux'\r\nimport { StatisticsPie } from '../cmps/side_menu/StatisticsPie';\r\nimport { StatisticsBar } from '../cmps/side_menu/StatisticsBar';\r\nimport { StatisticsInfoBlock } from '../cmps/side_menu/StatisticsInfoBlock';\r\nimport moment from 'moment'\r\n\r\nclass BoardStatistics extends React.Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.elStats = React.createRef();\r\n        this.statsTimeOut = null;\r\n        this.boardStats = null;\r\n    }\r\n\r\n    state = {\r\n        board: {},\r\n        currView: 'byUsers',\r\n        cardCount: -1,\r\n        boardStats: null\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        if (this.props.currBoard) {\r\n            this.statsTimeOut = setTimeout(() => {\r\n                const boardStats = this.getBoardStats(this.props.currBoard);\r\n                this.setState({ board: this.props.currBoard, boardStats }, () => {\r\n                });\r\n            }, 250)\r\n        }\r\n\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.currBoard !== prevProps.currBoard) {\r\n            const boardStats = this.getBoardStats(this.props.currBoard);\r\n            this.setState({ board: this.props.currBoard, boardStats });\r\n        }\r\n\r\n\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.statsTimeOut) clearTimeout(this.statsTimeOut);\r\n    }\r\n\r\n\r\n    handleChange = ({ target }) => {\r\n        const field = target.name\r\n        const value = target.value\r\n\r\n        this.setState(prevState => ({ card: { ...prevState.card, [field]: value } }))\r\n    }\r\n\r\n    getStatsByLabels = (board) => {\r\n\r\n        let labels = {};\r\n\r\n        board.stacks.forEach((stack) => {\r\n            stack.cards.forEach((card) => {\r\n                card.labels.forEach((label) => {\r\n                    if (labels[label.title]) {\r\n                        labels[label.title].count += 1;\r\n                    } else {\r\n                        labels[label.title] = { count: 1, color: label.color };\r\n                    }\r\n                })\r\n\r\n            })\r\n        })\r\n        let labelStatsData = Object.keys(labels).map((labelTitle) => {\r\n            const labelInfo = labels[labelTitle];\r\n            return ({\r\n                id: labelTitle,\r\n                label: labelTitle,\r\n                value: labelInfo.count,\r\n                color: labelInfo.color\r\n            });\r\n        })\r\n\r\n        return labelStatsData;\r\n    }\r\n\r\n    getStatsByUsers = (board) => {\r\n\r\n        let users = {};\r\n        let maxTasks = 0;\r\n\r\n        board.stacks.forEach((stack) => {\r\n            stack.cards.forEach((card) => {\r\n\r\n                if (card.members.length) {\r\n                    card.members.forEach(member => {\r\n\r\n                        if (!users[member.username]) users[member.username] = { tasks: 0, doneTasks: 0, color: member.bgColor };\r\n\r\n                        let isDone = card.labels.some((label) => {\r\n                            const labelTitle = label.title.toLowerCase();\r\n                            return labelTitle === 'done' || labelTitle === 'finished';\r\n                        })\r\n\r\n                        if(isDone) {\r\n                            users[member.username].tasks += 1;\r\n                            users[member.username].doneTasks += 1;\r\n                        } else {\r\n                            users[member.username].tasks += 1;\r\n                        }\r\n\r\n                        if(maxTasks < users[member.username]['tasks']) {\r\n                            maxTasks = users[member.username]['tasks'];\r\n                        }\r\n\r\n                    })\r\n\r\n                }\r\n            })\r\n        })\r\n\r\n        let userStatsData = Object.keys(users).map((username) => {\r\n            const userInfo = users[username];\r\n            return ({\r\n                member: username,\r\n                Tasks: userInfo.tasks - userInfo.doneTasks,\r\n                'Done Tasks': userInfo.doneTasks,\r\n                color: userInfo.color\r\n            });\r\n        })\r\n\r\n        return {userStatsData, maxTasks};\r\n    }\r\n\r\n    getStatsByDueDates = (board) => {\r\n\r\n        let workload = { 'On Schedule': 0, Delayed: 0 };\r\n        let cardCount = 0;\r\n        board.stacks.forEach((stack) => {\r\n            cardCount += stack.cards.length;\r\n\r\n            stack.cards.forEach((card) => {\r\n                if (card.dueDate !== '') {\r\n                    if (+moment(card.dueDate).format('x') > Date.now()) workload['On Schedule'] += 1;\r\n                    else workload.Delayed += 1;\r\n                }\r\n\r\n            })\r\n        })\r\n\r\n        if (!cardCount) return null;\r\n\r\n        if (this.state.cardCount !== cardCount) {\r\n            this.setState({ cardCount });\r\n        }\r\n\r\n\r\n        let dueDatesStatsData = Object.keys(workload).map((type) => {\r\n\r\n            return ({\r\n                id: type,\r\n                label: type,\r\n                value: workload[type],\r\n                color: (type === 'Delayed') ? 'tomato' : 'lightgreen'\r\n            });\r\n        })\r\n\r\n        return dueDatesStatsData;\r\n    }\r\n\r\n    getBoardStats = (board) => {\r\n\r\n        if (!board.stacks) return null;\r\n\r\n        let stats;\r\n\r\n        let byLabels = this.getStatsByLabels(board);\r\n        let byUsers = this.getStatsByUsers(board);\r\n        let byDueDate = this.getStatsByDueDates(board);\r\n        let totalTimeEstimation = this.getTotalTimeEstimation(board);\r\n\r\n        if (byDueDate === null) this.setState({ isNoCardsBoard: true })\r\n        else {\r\n            if (this.state.isNoCardsBoard) this.setState({ isNoCardsBoard: false })\r\n        }\r\n        stats = { byLabels, byUsers: byUsers.userStatsData, byDueDate, maxTasks: byUsers.maxTasks, totalTimeEstimation };\r\n\r\n        console.log(stats);\r\n        return stats;\r\n    }\r\n\r\n    getTotalTimeEstimation = (board) => {\r\n\r\n        let timeEstimation = { days: 0, hours: 0, minutes: 0 };\r\n\r\n        board.stacks.forEach(stack => {\r\n\r\n            stack.cards.forEach(card => {\r\n                const estimate = card.timeEstimation;\r\n \r\n                if(estimate && estimate !== '') {\r\n                    timeEstimation.days += +estimate.days;\r\n                    timeEstimation.hours += +estimate.hours;\r\n                    timeEstimation.minutes += +estimate.minutes;\r\n                }\r\n            })\r\n        })\r\n\r\n        if(!(timeEstimation.days + timeEstimation.hours + timeEstimation.minutes)) {\r\n            return null;\r\n        }\r\n        \r\n\r\n        return moment.duration(timeEstimation).asHours() + ' hours';\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        const { board, cardCount, boardStats } = this.state;\r\n        const { isShowingStatistics, toggleShowStatistics } = this.props;\r\n\r\n        return ((!board) ? '' :\r\n\r\n            <>\r\n                <div className=\"stats flex align-center justify-center\">\r\n\r\n                    <section className={`board-statistics modal-container flex column ${(isShowingStatistics) ? '' : 'board-statistics-closed'}`} onMouseDown={(ev) => ev.stopPropagation()}\r\n                        ref={this.elStats}>\r\n                        <header className=\"board-statistics-header-span flex align-center justify-center\">\r\n                            <div className=\"board-statistics-header-text flex align-baseline justify-center\">\r\n                                <p className=\"board-statistics-header\">{board.title}</p>\r\n                                <p className=\"secondary\">statistics</p>\r\n                            </div>\r\n                            <img className=\"stats-back-btn\" src=\"/assets/img/back.png\" alt=\"\" onClick={toggleShowStatistics} />\r\n                        </header>\r\n                        <small className=\"board-statistics-info flex align-center space-evenly wrap\">\r\n                            \r\n                            {/* {(board.createdBy) ?\r\n                                // <StatisticsInfoBlock info={moment(board.createdAt).format('MMM Do YYYY') + ` [${board.createdBy.username}]`} type='createdBy' />\r\n                                <StatisticsInfoBlock info={moment(board.createdAt).format('MMM Do YYYY')} type='createdBy' />\r\n                                : null\r\n                            } */}\r\n                            {(boardStats && boardStats.totalTimeEstimation) ?\r\n                                \r\n                                <StatisticsInfoBlock info={boardStats.totalTimeEstimation} type='timeEstimation' />\r\n                                : null\r\n                            }\r\n                            {(board.members) ?\r\n                                <StatisticsInfoBlock info={board.members.length} type='members' />\r\n                                : null\r\n                            }\r\n                            {(board.stacks) ?\r\n                                <StatisticsInfoBlock info={board.stacks.length} type='stacks' />\r\n                                : null\r\n                            }\r\n                            {(board.stacks && cardCount) ?\r\n                                <StatisticsInfoBlock info={cardCount} type='cards' />\r\n                                : null\r\n                            }\r\n                            {(board.activities) ?\r\n                                <StatisticsInfoBlock info={board.activities.length} type='activities' />\r\n                                : null\r\n                            }\r\n\r\n\r\n                        </small>\r\n                        {(boardStats) ?\r\n                            <section className=\"board-statistics-content grid\">\r\n\r\n                                {(boardStats.byUsers) ?\r\n                                    < div className=\"stat-item by-users flex column justify-center align-center\">\r\n                                        <p className=\"board-stats-title\">Weekly Members Workload</p>\r\n                                        <StatisticsBar data={boardStats.byUsers} maxTasks={boardStats.maxTasks} />\r\n\r\n                                    </div>\r\n                                    : null\r\n                                }\r\n                                {(boardStats.byLabels) ?\r\n                                    < div className=\"stat-item by-labels flex column justify-center align-center\">\r\n                                        <p className=\"board-stats-title\">Most Popular Labels</p>\r\n                                        <StatisticsPie data={boardStats.byLabels} type=\"labels\" />\r\n\r\n                                    </div>\r\n                                    : null\r\n                                }\r\n                                {(boardStats.byDueDate) ?\r\n                                    < div className=\"stat-item by-due-date flex column justify-center align-center\">\r\n                                        <p className=\"board-stats-title\">On-Time/Delayed Work</p>\r\n                                        <StatisticsPie data={boardStats.byDueDate} type=\"dueDate\" />\r\n\r\n                                    </div>\r\n                                    : null\r\n                                }\r\n\r\n                            </section>\r\n                            : null\r\n\r\n                        }\r\n\r\n                    </section>\r\n\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nconst mapDispatchToProps = {\r\n    save,\r\n    loadBoard\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        currBoard: state.board.currBoard,\r\n        loggedInUser: state.user.loggedInUser\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(BoardStatistics);","\r\n// a little function to help us with reordering the result\r\n\r\nexport function reorder (list, startIndex, endIndex) {\r\n    const result = Array.from(list);\r\n    const [removed] = result.splice(startIndex, 1);\r\n    result.splice(endIndex, 0, removed);\r\n    return result;\r\n};\r\n\r\n// a little function to help us with moving an item between droppables\r\n\r\nexport function move (source, destination, droppableSource, droppableDestination) {\r\n    const sourceClone = Array.from(source);\r\n    const destClone = Array.from(destination);\r\n    const [removed] = sourceClone.splice(droppableSource.index, 1);\r\n    destClone.splice(droppableDestination.index, 0, removed);\r\n\r\n    const result = {};\r\n    result[droppableSource.droppableId] = sourceClone;\r\n    result[droppableDestination.droppableId] = destClone;\r\n    return result;\r\n};","import React from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\nimport { loadBoard, save, setBoard, updateStackTitle } from '../store/actions/boardActions';\r\nimport AddContent from '../cmps/board/AddContent';\r\nimport { Route, Link } from 'react-router-dom';\r\nimport { CardPreview } from '../cmps/card/CardPreview';\r\nimport { Stack } from '../cmps/stack/Stack';\r\nimport CardDetails from '../pages/CardDetails';\r\nimport BoardOptions from '../cmps/board/BoardOptions'\r\nimport socketService from '../services/socketService'\r\nimport BoardStatistics from '../pages/BoardStatistics'\r\nimport { makeId } from '../services/utilService';\r\nimport { reorder, move } from '../services/boardDetailsUtils';\r\nimport ActionContainer from '../cmps/card/ActionContainer';\r\nimport Loader from '../cmps/general/Loader'\r\n// import Hammer from 'hammerjs'\r\n\r\nclass BoardDetails extends React.Component {\r\n\r\n    initialX = 0;\r\n    deltaX = 0;\r\n    offset = this.initialX + this.deltaX;\r\n\r\n    state = {\r\n        areLabelsOpen: false,\r\n        isShowingStatistics: false,\r\n        stackMenus: {}\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (!this.props.loggedInUser) return this.props.history.push('/boards')\r\n        const { boardId } = this.props.match.params;\r\n\r\n        socketService.setup();\r\n        socketService.emit('setBoard', boardId);\r\n        socketService.on('loadBoard', this.setBoard)\r\n\r\n        this.props.loadBoard(boardId);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.currBoard !== this.props.currBoard) {\r\n            document.body.style.backgroundImage = `url(/${this.props.currBoard.bg})`;\r\n            document.body.style.backgroundColor = this.props.currBoard.bg;\r\n\r\n            // if (!this.hammer) this.hammer = Hammer(this.elStacksSection)\r\n            // this.hammer.on('panleft panright', ev => {\r\n            //     console.log(ev);\r\n            //     // if ()\r\n            //     this.deltaX = ev.deltaX\r\n            //     this.offset = this.initialX + this.deltaX\r\n\r\n\r\n            //     this.elStacksSection.scroll(-this.offset, 0)\r\n\r\n            // })\r\n\r\n            // Hammer.on(this.elStacksSection, 'mouseup', ev => {\r\n            //     this.initialX = this.offset\r\n            // })\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (!this.props.loggedInUser) return;\r\n        document.body.style = '';\r\n        socketService.off('loadBoard', this.setBoard);\r\n        socketService.terminate();\r\n    }\r\n\r\n    populateStacksInfo = (board) => {\r\n        let stackMenus = {};\r\n        board.stacks.forEach((stack) => {\r\n            stackMenus[stack.id] = false;\r\n        });\r\n        this.setState({ stackMenus });\r\n    }\r\n\r\n    setBoard = (currBoard) => {\r\n        this.props.setBoard(currBoard)\r\n        if (this.props.match.params.cardId) this.props.setCard()\r\n    }\r\n\r\n    onToggleLabels = () => {\r\n\r\n        this.setState(({ areLabelsOpen }) => ({ areLabelsOpen: !areLabelsOpen }));\r\n    }\r\n\r\n    getItemStyle = (isDragging, draggableStyle) => {\r\n\r\n        return ({\r\n            // some basic styles to make the items look a bit nicer\r\n            ...draggableStyle,\r\n            // change background colour if dragging\r\n            background: isDragging ? 'rgb(219, 219, 219)' : '#ebecf0'\r\n        });\r\n    }\r\n\r\n    onStackRemove = (stackId) => {\r\n\r\n        let currBoard = { ...this.props.currBoard };\r\n        if (currBoard.isPublic) return;\r\n        let stackIdx = currBoard.stacks.findIndex(stack => {\r\n            return stack.id === stackId;\r\n        })\r\n\r\n        currBoard.stacks.splice(stackIdx, 1);\r\n        this.props.save(currBoard);\r\n    }\r\n\r\n    onStackAdd = (newStackTitle) => {\r\n\r\n        let currBoard = { ...this.props.currBoard };\r\n        let id = makeId();\r\n\r\n        currBoard.stacks.push({\r\n            bgColor: \"#fefefe\",\r\n            cards: [],\r\n            id,\r\n            title: newStackTitle,\r\n        });\r\n\r\n        let stackMenus = { ...this.state.stackMenus };\r\n\r\n        stackMenus[id] = false;\r\n        this.setState({ stackMenus }, () => {\r\n            this.elStacksSection.scrollTo(9999, 0)\r\n            this.props.save(currBoard);\r\n        })\r\n    }\r\n\r\n    onCardAdd = (newCardTitle, stackId) => {\r\n\r\n        let currBoard = { ...this.props.currBoard };\r\n        let stackIdx = currBoard.stacks.findIndex((stack) => {\r\n            return stackId === stack.id;\r\n        });\r\n        currBoard.stacks[stackIdx].cards.push({\r\n            id: makeId(),\r\n            title: newCardTitle,\r\n            description: \"\",\r\n            comments: [],\r\n            checklists: [],\r\n            members: [],\r\n            labels: [],\r\n            activities: [],\r\n            byMember: this.props.loggedInUser,\r\n            createdAt: Date.now(),\r\n            dueDate: '',\r\n            bgColor: 'white',\r\n            timeEstimation: ''\r\n        });\r\n\r\n        this.props.save(this.props.currBoard);\r\n    }\r\n\r\n    onDragEnd = (result) => {\r\n\r\n        const { loggedInUser, currBoard } = this.props\r\n        const { source, destination } = result;\r\n\r\n        // Dropped outside the list\r\n        if (!destination) {\r\n            return;\r\n        }\r\n\r\n        let stacks = [...currBoard.stacks];\r\n        const newState = { ...currBoard };\r\n\r\n        // Changed Stacks order\r\n        if ((source.droppableId === destination.droppableId) && source.droppableId === 'board') {\r\n            const items = reorder(stacks, source.index, destination.index);\r\n            newState.stacks = items;\r\n\r\n            const stackSourceTitle = currBoard.stacks[source.index].title;\r\n            const stackPlace = destination.index + 1\r\n            currBoard.activities.unshift({ id: makeId(), txt: `moved stack ${stackSourceTitle} to place number ${stackPlace}`, createdAt: Date.now(), byMember: loggedInUser })\r\n\r\n\r\n            // Changed Cards order\r\n        } else {\r\n            const sIndex = +source.droppableId;\r\n            const dIndex = +destination.droppableId;\r\n\r\n            // Changed Card index in current Stack\r\n            if (sIndex === dIndex) {\r\n                const items = reorder(stacks[sIndex].cards, source.index, destination.index);\r\n                newState.stacks[sIndex].cards = items;\r\n\r\n                // Changed Card between Stacks\r\n            } else {\r\n                const sourceTitle = currBoard.stacks[+source.droppableId].title\r\n                const destTitle = currBoard.stacks[+destination.droppableId].title\r\n                const cardMovedTitle = currBoard.stacks[+source.droppableId].cards[source.index].title\r\n                currBoard.activities.unshift({ id: makeId(), txt: `moved card ${cardMovedTitle} from ${sourceTitle} to ${destTitle}`, createdAt: Date.now(), byMember: loggedInUser })\r\n\r\n                const result = move(stacks[sIndex].cards, stacks[dIndex].cards, source, destination);\r\n                newState.stacks[sIndex].cards = result[sIndex];\r\n                newState.stacks[dIndex].cards = result[dIndex];\r\n            }\r\n        }\r\n        this.props.save(newState)\r\n    }\r\n\r\n    onToggleAction = (action) => {\r\n\r\n        let actions = this.state.stackMenus;\r\n        for (const key in actions) {\r\n            if (key !== action) {\r\n                actions[key] = false;\r\n            }\r\n        }\r\n        actions[action] = !actions[action];\r\n        this.setState({ isShown: actions });\r\n    }\r\n\r\n    onSetBg = (bg, type) => {\r\n        if (type === 'img') {\r\n            const bgUrl = bg.slice(1, bg.length + 1)\r\n            document.body.style.backgroundImage = `url(/${bgUrl})`;\r\n            document.body.style.backgroundColor = '';\r\n            this.props.currBoard.bg = bgUrl\r\n        } else {\r\n            document.body.style.backgroundImage = ''\r\n            document.body.style.backgroundColor = bg\r\n            this.props.currBoard.bg = bg\r\n        }\r\n        const { loggedInUser } = this.props\r\n        // @TODO: ACTIONS - ADD ACTIVITY!\r\n        this.props.currBoard.activities.unshift({ id: makeId(), txt: `has changed the board background`, createdAt: Date.now(), byMember: loggedInUser })\r\n        this.props.save(this.props.currBoard)\r\n    }\r\n\r\n    toggleShowStatistics = () => {\r\n        this.setState(prevState => ({ isShowingStatistics: !prevState.isShowingStatistics }));\r\n    }\r\n\r\n    render() {\r\n        const { history, currBoard } = this.props;\r\n        const { areLabelsOpen, isShowingStatistics, isShown } = this.state;\r\n\r\n        if (!currBoard) return <Loader />\r\n        // console.log(currBoard);\r\n        return (\r\n            <>\r\n                {/* Board Options bar */}\r\n                <BoardOptions isShowingStatistics={isShowingStatistics} history={history} board={currBoard} onSetBg={this.onSetBg} toggleShowStatistics={this.toggleShowStatistics} />\r\n                {/* Route to Card details */}\r\n                <Route component={CardDetails} path=\"/boards/:boardId/card/:cardId\" />\r\n\r\n                {/* Board content: showing stacks OR statistics */}\r\n                <section className=\"board-content flex align-start\" ref={scroll => this.elStacksSection = scroll}>\r\n\r\n\r\n                    {(isShowingStatistics)\r\n                        ?\r\n                        <BoardStatistics isShowingStatistics={isShowingStatistics} toggleShowStatistics={this.toggleShowStatistics} />\r\n                        : (currBoard)\r\n                            ?\r\n\r\n                            <DragDropContext\r\n                                onDragEnd={this.onDragEnd}\r\n                            >\r\n\r\n                                <Droppable droppableId=\"board\" isCombineEnabled={false} type=\"STACK\" direction='horizontal'>\r\n                                    {(provided, snapshot) => (\r\n                                        <div\r\n                                            ref={provided.innerRef}\r\n                                            {...provided.droppableProps}\r\n                                            className=\"stacks-content flex\"\r\n                                        >\r\n\r\n                                            {(currBoard.stacks.length) ? currBoard.stacks.map((stack, index) => (\r\n                                                <Draggable key={stack.id}\r\n                                                    draggableId={stack.id} index={index} type=\"STACK\" >\r\n\r\n                                                    {(provided, snapshot) => {\r\n                                                        return (\r\n                                                            <div\r\n                                                                ref={provided.innerRef}\r\n                                                                {...provided.draggableProps}\r\n                                                                style={{\r\n                                                                    ...this.getItemStyle(\r\n                                                                        snapshot.isDragging,\r\n                                                                        provided.draggableProps.style,\r\n                                                                    ),\r\n                                                                    width: 250,\r\n\r\n                                                                }}\r\n                                                                className=\"stack-content flex column\"\r\n                                                            >\r\n                                                                <div className=\"stack-header flex space-between\" {...provided.dragHandleProps}>\r\n                                                                    <div className=\"stack-title\">{stack.title}</div>\r\n                                                                    <Link title=\"Options\" to=\"#\" onClick={() => this.onToggleAction(stack.id)}><button className=\"stack-header-menu\">. . .</button></Link>\r\n                                                                    {(isShown && isShown[stack.id]) && <ActionContainer onStackRemove={this.onStackRemove} stack={stack} isShown={{ stack: true }}\r\n                                                                        onToggleAction={this.onToggleAction} />}\r\n                                                                </div>\r\n\r\n                                                                <Droppable key={index}\r\n                                                                    droppableId={`${index}`} isCombineEnabled={false}\r\n                                                                    type=\"CARD\">\r\n                                                                    {(provided, snapshot) => (\r\n                                                                        <Stack\r\n                                                                            innerRef={provided.innerRef}\r\n                                                                            provided={provided}\r\n                                                                        >\r\n\r\n                                                                            {stack.cards.map((card, index) => (\r\n                                                                                <Draggable\r\n                                                                                    key={card.id}\r\n                                                                                    draggableId={card.id}\r\n                                                                                    index={index}\r\n                                                                                    type=\"CARD\"\r\n                                                                                >\r\n                                                                                    {(provided, snapshot) => (\r\n\r\n                                                                                        <div>\r\n                                                                                            <CardPreview\r\n                                                                                                title={card.title}\r\n                                                                                                innerRef={provided.innerRef}\r\n                                                                                                provided={provided}\r\n                                                                                                card={card}\r\n                                                                                                board={currBoard}\r\n                                                                                                labelsOpen={areLabelsOpen}\r\n                                                                                                onToggleLabels={this.onToggleLabels}\r\n                                                                                                link={`/boards/${currBoard._id}/card/${card.id}`}\r\n                                                                                                style={{\r\n                                                                                                    ...this.getItemStyle(\r\n                                                                                                        snapshot.isDragging,\r\n                                                                                                        provided.draggableProps.style,\r\n                                                                                                    ),\r\n                                                                                                    background: card.bgColor,\r\n\r\n                                                                                                }}\r\n                                                                                                history={this.props.history}\r\n                                                                                            >\r\n                                                                                            </CardPreview>\r\n                                                                                        </div>\r\n\r\n                                                                                    )}\r\n                                                                                </Draggable>\r\n                                                                            ))}\r\n                                                                            {provided.placeholder}\r\n                                                                        </Stack>\r\n                                                                    )}\r\n                                                                </Droppable>\r\n                                                                <AddContent type=\"card\" onCardAdd={this.onCardAdd} itemId={stack.id} />\r\n                                                            </div>\r\n                                                        )\r\n                                                    }}\r\n                                                </Draggable>\r\n                                            )) : null}\r\n                                            {provided.placeholder}\r\n                                        </div>\r\n\r\n                                    )}\r\n                                </Droppable>\r\n\r\n                                <div className=\"add-stack-container\">\r\n                                    <AddContent type=\"stack\" onStackAdd={this.onStackAdd} />\r\n                                </div>\r\n                            </DragDropContext>\r\n\r\n                            : null\r\n                    }\r\n                </section>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        currBoard: state.board.currBoard,\r\n        loggedInUser: state.user.loggedInUser\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    loadBoard,\r\n    save,\r\n    setBoard,\r\n    updateStackTitle\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(BoardDetails)\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { update, login } from '../store/actions/userActions';\r\nimport { uploadImg } from '../services/cloudinaryService'\r\nimport Loader from '../cmps/general/Loader'\r\n\r\nclass UserProfile extends Component {\r\n\r\n    state = {\r\n        user: null,\r\n        msg: '',\r\n        isUploadImg: false,\r\n        isFinishUpload: false,\r\n        isErrorMsg: false\r\n    }\r\n\r\n    componentDidMount() {\r\n        const { loggedInUser, history } = this.props\r\n        if (!loggedInUser) history.push('/login')\r\n        this.setState({ user: loggedInUser })\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearTimeout(this.timeoutFinishUpload)\r\n    }\r\n\r\n    onUploadImg = async ev => {\r\n        this.setState({ isUploadImg: true })\r\n        const imgUrl = await uploadImg(ev)\r\n        this.setState({ isUploadImg: false, isFinishUpload: true })\r\n        this.timeoutFinishUpload = setTimeout(() => {\r\n            this.setState({ isFinishUpload: false })\r\n        }, 2500);\r\n        this.setState(prevState => ({ user: { ...prevState.user, imgUrl } }))\r\n    }\r\n\r\n    handleChange = ({ target }) => {\r\n        const field = target.name\r\n        const value = target.value\r\n\r\n        this.setState(prevState => ({ user: { ...prevState.user, [field]: value } }))\r\n    }\r\n\r\n    onUpdateUser = async ev => {\r\n        ev.preventDefault();\r\n        const { username, password, fullname, imgUrl, confirmPassword } = this.state.user\r\n\r\n        if (!username || !password || !fullname) return this.setState({ msg: 'Please enter username, password and full name', isErrorMsg: true });\r\n        if (!password && !confirmPassword) return this.setState({ msg: 'Please enter username and password', isErrorMsg: true })\r\n        if (password !== confirmPassword) return this.setState({ msg: 'Passwords don\\'t match!', isErrorMsg: true })\r\n\r\n        const user = { _id: this.props.loggedInUser._id, username, password, fullname, imgUrl }\r\n        try {\r\n            await this.props.update(user)\r\n            user._id = this.props.loggedInUser._id\r\n            await this.props.login(user)\r\n        } catch (err) {\r\n            return this.setState({ isErrorMsg: true, msg: err })\r\n        }\r\n\r\n        return this.setState({ isErrorMsg: false, msg: 'User Updated Successfully' }, () => {\r\n            setTimeout(() => {\r\n                this.props.history.go(0)\r\n                this.setState({ msg: '' })\r\n            }, 2000);\r\n        })\r\n    }\r\n\r\n    onOpenUpload = () => {\r\n        this.inputElement.click();\r\n    }\r\n\r\n    render() {\r\n        const { user, msg, isErrorMsg, isUploadImg } = this.state\r\n\r\n        const msgStyle = (isErrorMsg) ? { backgroundColor: '#dd1739' } : { backgroundColor: '#17d965' }\r\n\r\n        if (!user) return <Loader />\r\n        return (\r\n            <div className=\"container flex justify-center\">\r\n                <div className=\"form-container\">\r\n                    <div className=\"user-profile-container flex align-start\">\r\n                        <div className=\"user-content\">\r\n                            <h2 className=\"user-profile-title flex align-center\">\r\n                                <img src=\"assets/img/user-icon.png\" className=\"user-icon\" alt=\"\" /> {this.props.loggedInUser.fullname}\r\n                            </h2>\r\n                            <form onSubmit={this.onUpdateUser} className=\"user-profile-form flex column align-start\">\r\n                                <input type=\"text\" placeholder=\"User name\" autoComplete=\"off\" onChange={this.handleChange} className=\"profile-input input\" name=\"username\" value={user.username} />\r\n                                <input type=\"text\" placeholder=\"Full name\" autoComplete=\"off\" onChange={this.handleChange} className=\"profile-input input\" name=\"fullname\" value={user.fullname} />\r\n                                <input type=\"password\" placeholder=\"Password\" autoComplete=\"off\" onChange={this.handleChange} className=\"profile-input input\" name=\"password\" />\r\n                                <input type=\"password\" placeholder=\"Confirm Password\" autoComplete=\"off\" onChange={this.handleChange} className=\"profile-input input\" name=\"confirmPassword\" />\r\n                                <input type=\"file\" name=\"imgUrl\" ref={input => this.inputElement = input} onChange={this.onUploadImg} hidden />\r\n                                <div className=\"img-submit-container flex space-between align-start\">\r\n                                    <span className=\"upload-img\" onClick={() => this.onOpenUpload()}>Upload Profile Image</span>\r\n                                    <button className={`btn btn-success ${isUploadImg ? 'disable' : ''}`} disabled={isUploadImg}>Save Changes</button>\r\n                                </div>\r\n\r\n                            </form>\r\n                            {msg && <div style={msgStyle} className=\"user-msg flex align-center space-between\">{msg}<img src=\"assets/img/error-white.png\" className=\"small-icon\" alt=\"\" /></div>}\r\n                        </div>\r\n                        <div className=\"user-img\">\r\n                            <img src={user.imgUrl} alt=\"\" />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        loggedInUser: state.user.loggedInUser\r\n    };\r\n};\r\nconst mapDispatchToProps = {\r\n    update,\r\n    login\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UserProfile);","import React, { Component } from 'react'\r\nimport { Link, NavLink } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\nimport { logout, signup } from '../../store/actions/userActions';\r\nimport { getRandomColor, makeId } from '../../services/utilService'\r\n\r\n\r\nclass NavBar extends Component {\r\n\r\n    state = {\r\n        isScroll: false,\r\n        isMenuOpen: false\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.scrollEvent()\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.document.removeEventListener('scroll', this.handleScroll)\r\n    }\r\n\r\n    scrollEvent() {\r\n        window.document.addEventListener('scroll', this.handleScroll)\r\n    }\r\n\r\n    get isHomepage() {\r\n        return this.props.location.pathname === '/'\r\n    }\r\n\r\n    handleScroll = () => {\r\n        let body = document.body\r\n        let theDocument;\r\n        theDocument = document.documentElement\r\n        theDocument = (theDocument.clientHeight) ? theDocument : body;\r\n\r\n        if (theDocument.scrollTop === 0) this.setState({ isScroll: false })\r\n        else this.setState({ isScroll: true })\r\n    }\r\n\r\n    onLogout = async () => {\r\n        this.toggleMenu()\r\n        await this.props.logout()\r\n\r\n        const userCred = {\r\n            username: `Guest-${makeId(4)}`,\r\n            password: '123456',\r\n            fullname: `Guesty McGuest-${makeId(4)}`,\r\n            imgUrl: 'https://res.cloudinary.com/shaishar9/image/upload/v1590398852/tgfntq8ghkaxjpo9seqa.jpg',\r\n            isGuest: true,\r\n            bgColor: getRandomColor()\r\n        }\r\n        this.props.signup(userCred)\r\n    }\r\n\r\n    toggleMenu = () => {\r\n        this.setState(prevState => ({ isMenuOpen: !prevState.isMenuOpen }))\r\n    }\r\n\r\n    render() {\r\n        const user = this.props.loggedInUser\r\n        const { isMenuOpen, isScroll } = this.state\r\n\r\n        return (\r\n            <>\r\n                {isMenuOpen && <div className=\"screen main-nav-screen\" onClick={this.toggleMenu}></div>}\r\n                <div className={`nav-container ${(isScroll || !this.isHomepage) ? 'scrolled' : ''} ${(isMenuOpen) ? 'menu-open' : ''}`} style={(this.isHomepage) ? { marginTop: '10px' } : {}}>\r\n                    <div className={`${(this.isHomepage) ? 'container' : ''}`}>\r\n                        <div className=\"nav-content flex space-between align-center\">\r\n                            <Link to=\"/\"><img src=\"/assets/img/logomain-white.png\" className=\"logo-img\" alt=\"\"/></Link>\r\n                            {/* <Link to=\"/\"><h1 className=\"logo\"><span className=\"logo-we\">we</span>task</h1></Link> */}\r\n                            <ul className=\"main-nav clean-list flex\">\r\n                                <li className=\"quit-menu\"><button onClick={() => this.toggleMenu()}></button></li>\r\n                                <li><NavLink onClick={this.toggleMenu} exact to=\"/\">Home</NavLink></li>\r\n                                {user && <li><NavLink onClick={this.toggleMenu} to=\"/boards\">Boards</NavLink></li>}\r\n                                {user && <li><NavLink onClick={this.toggleMenu} to=\"/profile\">Profile</NavLink></li>}\r\n                                {user?.isGuest && <li><NavLink onClick={this.toggleMenu} to=\"/signup\">Signup</NavLink></li>}\r\n                                {user?.isGuest && <li><NavLink onClick={this.toggleMenu} to=\"/login\">Login</NavLink></li>}\r\n                                {!user?.isGuest && <li><Link to=\"/\" onClick={this.onLogout}>Logout</Link></li>}\r\n                            </ul>\r\n                            <button onClick={this.toggleMenu} className=\"btn-menu\"></button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        loggedInUser: state.user.loggedInUser\r\n    };\r\n};\r\nconst mapDispatchToProps = {\r\n    logout,\r\n    signup\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NavBar);","import React, { Component } from 'react'\r\nimport { Switch, Route } from 'react-router-dom'\r\nimport './style/global.scss';\r\nimport HomePage from './pages/HomePage'\r\nimport LoginSignup from './pages/LoginSignup'\r\nimport Boards from './pages/Boards'\r\nimport BoardDetails from './pages/BoardDetails'\r\nimport UserProfile from './pages/UserProfile'\r\nimport NavBar from './cmps/general/NavBar'\r\nimport { signup } from './store/actions/userActions';\r\nimport { connect } from 'react-redux'\r\nimport { makeId, getRandomColor } from './services/utilService'\r\n\r\n\r\nclass App extends Component {\r\n\r\n  componentDidMount() {\r\n    if (this.props.loggedInUser) return;\r\n    this.guestSignup()\r\n  }\r\n\r\n  guestSignup() {\r\n    const userCred = {\r\n      username: `Guest-${makeId(4)}`,\r\n      password: '123456',\r\n      fullname: `Guesty McGuest-${makeId(4)}`,\r\n      imgUrl: 'https://res.cloudinary.com/shaishar9/image/upload/v1590398852/tgfntq8ghkaxjpo9seqa.jpg',\r\n      isGuest: true,\r\n      bgColor: getRandomColor()\r\n    }\r\n    this.props.signup(userCred)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"app\">\r\n        <Route component={NavBar} path=\"/\" />\r\n        <main className=\"main-content top-p\">\r\n          <Switch>\r\n            <Route component={UserProfile} path=\"/user/:userId\" />\r\n            <Route component={BoardDetails} path=\"/boards/:boardId\" />\r\n            <Route component={Boards} path=\"/boards\" />\r\n            <Route component={UserProfile} path=\"/profile\" />\r\n            <Route component={LoginSignup} path=\"/login\" />\r\n            <Route component={LoginSignup} path=\"/signup\" />\r\n            <Route component={HomePage} path=\"/\" />\r\n          </Switch>\r\n        </main>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    loggedInUser: state.user.loggedInUser\r\n  };\r\n};\r\nconst mapDispatchToProps = {\r\n  signup\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","let localLoggedinUser = null;\r\nif (sessionStorage.user) localLoggedinUser = JSON.parse(sessionStorage.user);\r\n\r\nconst initialState = {\r\n    loggedInUser: localLoggedinUser,\r\n    users: []\r\n};\r\n\r\nexport default function (state = initialState, action = {}) {\r\n    switch (action.type) {\r\n        case 'SET_USER':\r\n            return {\r\n                ...state,\r\n                loggedInUser: action.user\r\n            }\r\n        case 'LOAD_USERS':\r\n            return {\r\n                ...state,\r\n                users: action.users\r\n            }\r\n        case 'UPDATE_USER':\r\n            return {\r\n                ...state,\r\n                users: state.users.map(user => {\r\n                    if (user._id === action.user._id) return action.user;\r\n                    return user;\r\n                })\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","const initialState = {\r\n    boards: [],\r\n    currBoard: null,\r\n    currCard: null\r\n}\r\n\r\nexport default function boardReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case 'SET_BOARDS':\r\n            return {\r\n                ...state,\r\n                boards: action.boards\r\n            }\r\n        case 'SET_BOARD':\r\n            let newCard;\r\n            if (state.currCard) {\r\n                action.board.stacks.forEach(stack => {\r\n                    newCard = stack.cards.find(card => state.currCard.id === card.id)\r\n                })\r\n            }\r\n            return {\r\n                ...state,\r\n                currBoard: action.board,\r\n                // currCard: (newCard) ? newCard : null\r\n            }\r\n        case 'LOAD_CARD':\r\n            let foundCard;\r\n            state.currBoard.stacks.forEach(stack => {\r\n                stack.cards.find(card => {\r\n                    if (card.id === action.id) foundCard = card\r\n                })\r\n            })\r\n            return {\r\n                ...state,\r\n                currCard: { ...foundCard }\r\n            }\r\n        case 'UPDATE_STACK_TITLE':\r\n            return {\r\n                ...state,\r\n                currBoard: {\r\n                    ...state.currBoard,\r\n                    stacks: state.currBoard.stacks.map(stack => {\r\n                        if (stack.id === action.stack.id) stack.title = action.stack.title\r\n                        return stack\r\n                    })\r\n                }\r\n            }\r\n        case 'SET_CARD':\r\n            return {\r\n                ...state,\r\n                currBoard: {\r\n                    ...state.currBoard,\r\n                    stacks: state.currBoard.stacks.map(stack => {\r\n                        stack.cards = stack.cards.map(card => {\r\n                            if (card.id === action.card.id) return action.card;\r\n                            return card;\r\n                        })\r\n                        return stack\r\n                    })\r\n                },\r\n                currCard: action.card\r\n            }\r\n        case 'ADD_BOARD':\r\n            return {\r\n                ...state,\r\n                boards: [action.board, ...state.boards]\r\n            }\r\n        case 'UPDATE_BOARD':\r\n            return {\r\n                ...state,\r\n                boards: state.boards.map(board => {\r\n                    if (board._id === action.board._id) return action.board;\r\n                    return board;\r\n                })\r\n            }\r\n        case 'REMOVE_BOARD':\r\n            return {\r\n                ...state,\r\n                boards: state.boards.filter(board => board._id !== action.boardId)\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","\r\nimport { createStore, combineReducers, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport userReducer from './reducers/userReducer.js';\r\nimport boardReducer from './reducers/boardReducers.js';\r\n\r\nconst rootReducer = combineReducers({\r\n    user: userReducer,\r\n    board: boardReducer\r\n});\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nexport const store = createStore(rootReducer,\r\n    composeEnhancers(applyMiddleware(thunk))\r\n)","import { createBrowserHistory } from \"history\";\r\nconst history = createBrowserHistory();\r\n\r\nexport default history;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { store } from './store/store.js';\r\nimport { Provider } from 'react-redux'\r\nimport { Router } from \"react-router-dom\";\r\nimport history from './history'\r\n\r\n\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <Router history={history}>\r\n      <App />\r\n    </Router>\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}